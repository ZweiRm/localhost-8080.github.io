import{_ as s,c as i,o as e,ag as a}from"./chunks/framework.DPDPlp3K.js";const g=JSON.parse('{"title":"语法元素","description":"","frontmatter":{},"headers":[],"relativePath":"python/grammar.md","filePath":"python/grammar.md"}'),l={name:"python/grammar.md"};function n(d,t,o,h,p,r){return e(),i("div",null,t[0]||(t[0]=[a(`<h1 id="语法元素" tabindex="-1">语法元素 <a class="header-anchor" href="#语法元素" aria-label="Permalink to &quot;语法元素&quot;">​</a></h1><h2 id="缩进" tabindex="-1">缩进 <a class="header-anchor" href="#缩进" aria-label="Permalink to &quot;缩进&quot;">​</a></h2><p>用以表达程序框架。</p><ul><li>缩进是语法的一部分，是表达代码之间层次关系的唯一手段，不正确的缩进会导致程序运行错误。</li><li>每个程序内缩进形式需相同，如使用 4 个空格或 1 个 TAB.</li></ul><h2 id="注释" tabindex="-1">注释 <a class="header-anchor" href="#注释" aria-label="Permalink to &quot;注释&quot;">​</a></h2><p>用以提高程序可读性，不会被执行。</p><ul><li>单行注释：以<code>#</code>开头，其后为注释内容。例如：<div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 这是一行注释</span></span></code></pre></div></li><li>多行注释：以<code>&#39;&#39;&#39;</code>或<code>&quot;&quot;&quot;</code>开头和结尾，其中包裹的为注释内容。例如：<div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;&#39;&#39;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">注释第一行</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">注释第二行 </span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;&#39;&#39;</span></span></code></pre></div></li></ul><h2 id="变量" tabindex="-1">变量 <a class="header-anchor" href="#变量" aria-label="Permalink to &quot;变量&quot;">​</a></h2><p>变量是用以保存和表示数据的占位符号。</p><ul><li>在 Python 程序中，使用标识符来对变量命名。即命名是关联标识符和变量的过程。<br><strong>标识符</strong>：大小写字母、数字、下划线、汉字等字符以及其组合。其中，标识符对大小写敏感；要求首字母不能为数字；标识符不能与保留字相同。<br><strong>保留字</strong>：也称关键字，共 33 个。是 Python 语言内部定义并保留使用的一系列标识符。<table tabindex="0"><thead><tr><th style="text-align:left;"><code>and</code></th><th style="text-align:left;"><code>elif</code></th><th style="text-align:left;"><code>import</code></th><th style="text-align:left;"><code>raise</code></th><th style="text-align:left;"><code>global</code></th></tr></thead><tbody><tr><td style="text-align:left;"><strong><code>as</code></strong></td><td style="text-align:left;"><strong><code>else</code></strong></td><td style="text-align:left;"><strong><code>in</code></strong></td><td style="text-align:left;"><strong><code>return</code></strong></td><td style="text-align:left;"><strong><code>nonlocal</code></strong></td></tr><tr><td style="text-align:left;"><strong><code>assert</code></strong></td><td style="text-align:left;"><strong><code>except</code></strong></td><td style="text-align:left;"><strong><code>is</code></strong></td><td style="text-align:left;"><strong><code>try</code></strong></td><td style="text-align:left;"><strong><code>True</code></strong></td></tr><tr><td style="text-align:left;"><strong><code>break</code></strong></td><td style="text-align:left;"><strong><code>finally</code></strong></td><td style="text-align:left;"><strong><code>lambda</code></strong></td><td style="text-align:left;"><strong><code>while</code></strong></td><td style="text-align:left;"><strong><code>False</code></strong></td></tr><tr><td style="text-align:left;"><strong><code>class</code></strong></td><td style="text-align:left;"><strong><code>for</code></strong></td><td style="text-align:left;"><strong><code>not</code></strong></td><td style="text-align:left;"><strong><code>with</code></strong></td><td style="text-align:left;"><strong><code>None</code></strong></td></tr><tr><td style="text-align:left;"><strong><code>continue</code></strong></td><td style="text-align:left;"><strong><code>from</code></strong></td><td style="text-align:left;"><strong><code>or</code></strong></td><td style="text-align:left;"><strong><code>yield</code></strong></td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;"><strong><code>def</code></strong></td><td style="text-align:left;"><strong><code>if</code></strong></td><td style="text-align:left;"><strong><code>pass</code></strong></td><td style="text-align:left;"><strong><code>del</code></strong></td><td style="text-align:left;"></td></tr></tbody></table></li><li>变量可以被赋值，使用赋值运算符 <code>=</code> 来向变量赋值或者改值。</li></ul><h2 id="数据类型" tabindex="-1">数据类型 <a class="header-anchor" href="#数据类型" aria-label="Permalink to &quot;数据类型&quot;">​</a></h2><p>是供计算机程序理解的数据形式。在程序设计语言中不允许出现语法歧义，故，需要规定一些向计算机表达数据的具体形式，即数据类型。</p><ul><li>数字类型：包含正数类型和浮点数类型两类。</li><li>字符串类型：由 0 个或多个字符组成的有序字符序列。使用一对单引号或双引号包裹表示。 <ul><li>字符串是字符的有序序列，可以对其中的字符进行索引。</li><li>特别地，Python 提供两种序号系统：正向递增序号和反向递减序号。正向递增序号从 0 开始计；反向递减从 -1 开始计。</li><li>索引操作：返回字符串中的某个单个字符，语法为：<code>&lt;字符串&gt;[序号]</code>。</li><li>切片操作：返回字符串中一段字符形成子串，语法为：<code>&lt;字符串&gt;[开始序号:结束序号]</code>。值得注意的是，切片形成的子串取不到结束序号字符本身，而只取到其前一位。</li></ul></li><li>列表类型：由 0 个或多个数据组成的有序数列。使用 <code>[]</code> 来表示，每个元素之间使用 <code>,</code> 分隔。 <ul><li>使用保留字 <code>in</code> 可以判断某元素是否在列表中。如：<div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 判断字符串 &quot;TempStr&quot; 的第 -1 位是否为 &#39;C&#39; 或 &#39;c&#39;.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">TempStr[</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;C&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;c&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span></code></pre></div></li></ul></li></ul><h2 id="语句与函数" tabindex="-1">语句与函数 <a class="header-anchor" href="#语句与函数" aria-label="Permalink to &quot;语句与函数&quot;">​</a></h2><ul><li><p>赋值语句<br> 由赋值运算符参与的单行语句代码。</p><ul><li>赋值语句可以给变量赋予新值。</li><li>赋值语句右侧数据类型作用于变量（即赋值运算符右侧数据类型会决定左侧变量的数据类型）。</li></ul></li><li><p>分支语句<br> 由条件决定程序运行方向的一组代码。</p><ul><li>使用保留字 <code>if</code>, <code>elif</code>, <code>else</code> 来构成判断条件。如：<div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 若判断条件为 True 则执行冒号后的语句。</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> TempStr[</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;F&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;f&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]:</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    ...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span></span></code></pre></div></li><li>Python 语法要求每个保留字所在行的最后存在一个 <code>:</code>. 冒号和缩进表示后续语句与条件的从属关系。此冒号不可省略，否则程序将运行错误。</li></ul></li><li><p>函数<br> 根据参数产生不同的输出。</p></li></ul><h2 id="输入与输出" tabindex="-1">输入与输出 <a class="header-anchor" href="#输入与输出" aria-label="Permalink to &quot;输入与输出&quot;">​</a></h2><ul><li><p>输入函数<br> 使用输入函数 <code>input()</code> 来从控制台获得用户输入。格式为：<code>&lt;变量&gt; = input(&lt;提示信息字符串&gt;)</code>。例如：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">TempStr </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> input</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;请输入&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div></li><li><p>输出函数<br> 使用输出函数 <code>print()</code> 以字符串形式向控制台输出结果。格式为：<code>print(&lt;拟输出的的字符串或字符串变量&gt;)</code>例如：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;输入格式错误&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">格式化输出</p><ul><li><p><code>{}</code>表示槽，后续变量填充到槽中。例如：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 变量填充到 {} 当中，此句以为将变量 C 填充到 {} 位置时取小数点后两位</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;转换后的温度是</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:.2f</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.format(C))</span></span></code></pre></div></li><li><p>格式表达<br><code>:.2f</code> 表示取小数点后两位</p></li></ul></div></li></ul>`,17)]))}const k=s(l,[["render",n]]);export{g as __pageData,k as default};
