import{_ as a,c as e,o as l,ag as t}from"./chunks/framework.DPDPlp3K.js";const r="/img/android/feature.png",n="/img/android/defualt_container.png",o="/img/android/recorder_container.png",g=JSON.parse('{"title":"Android 12 容器层级","description":"","frontmatter":{"prev":{"text":"performTraversal","link":"/framework/performTraversal"},"next":false},"headers":[],"relativePath":"framework/container.md","filePath":"framework/container.md"}'),d={name:"framework/container.md"};function s(c,i,u,p,m,y){return l(),e("div",null,i[0]||(i[0]=[t('<h1 id="android-12-容器层级" tabindex="-1">Android 12 容器层级 <a class="header-anchor" href="#android-12-容器层级" aria-label="Permalink to &quot;Android 12 容器层级&quot;">​</a></h1><h2 id="结构" tabindex="-1">结构 <a class="header-anchor" href="#结构" aria-label="Permalink to &quot;结构&quot;">​</a></h2><p>在 Android 12 中，窗口按树形层级进行排布。其决定由 Feature 和 36 个层级共同影响。<br> Android 12 原生定义 6 个 Feature：</p><ul><li>WindowedMagnification</li><li>HideDisplayCutout</li><li>OneHandedBackgroundPanel</li><li>OneHanded</li><li>FullscreenMagnification</li><li>ImePlaceholder</li></ul><p>36 个层级：</p><ol><li>Wallpaper</li><li>[DefaultTaskDisplayArea][APPLICATION_LAYER]</li><li>Presentation, Dock Driver, QS Dialog, Phone</li><li>Search Bar, Voice Interaction Starting</li><li>Voice Interaction</li><li>Input Consumer</li><li>System Dialog</li><li>Toast</li><li>Priority Phone</li><li>System Alert, System Error (Cannot add internal system window)</li><li>System Overlay (Cannot add internal system window)</li><li>Application Overlay</li><li>System Alert (Can add internal system window)</li><li></li><li>Input Method</li><li>Input Method Dialog</li><li>Status Bar</li><li>Status Bar Additional</li><li>Notification Shade</li><li>Status Bar Sub Panel</li><li>Keyguard Dialog</li><li>Volume Overlay</li><li>System Overlay (Can add internal system window)</li><li>Navigation Bar</li><li>Navigation Bar Panel</li><li>Screenshot</li><li>System Error (Cannot add internal system window)</li><li>Magnification Overlay</li><li>Display Overlay</li><li>Drag</li><li>Accessibility Overlay</li><li>Accessibility Magnification Overlay</li><li>Secure System Overlay</li><li>Boot Progress</li><li>Pointer</li></ol><p>应用集中于第 2 层。层数越高位置越靠上。<br> 系统按照算法利用原生 Feature 和它们能覆盖的层数生成基础树状结构。在此基础上再安排具体 APP 等的窗口位置。</p><p>树状结构生成算法类似 2048 执行向上推的操作后，依据按断层左右分开节点，上下进行连接。</p><p><img src="'+r+'" alt="Feature"></p><blockquote><p>DisplayAreaPolicyBuilder.build() 里根据各个 Feature 添加的顺序、应用的层级，以及依次递补的原则，构建DisplayArea 层级，并添加到屏幕根容器DisplayContent里。 例如：</p><ul><li>第一个 Feature WindowedMagnification 只能应用到 0~31层级，那么就先创建一个名为 WindowedMagnification:0:31 的DisplayArea，后面的32~35层级只能递补应用第二个 Feature HideDisplayCutout，因此会创建平级的名为 HideDisplayCutout:32:35 的 DisplayArea；</li><li>第二个 Feature HideDisplayCutout 只能应用 0~31层级的 0~16 层级，因此创建 HideDisplayCutout:0:16 挂到 WindowedMagnification:0:31 下；</li><li>第17层级往下找只能递补应用第四个 Feature OneHanded，因此创建 OneHanded:17:17 挂到 WindowedMagnification:0:31 下，同理第18层级可以应用 Feature HideDisplayCutout，创建 HideDisplayCutout:18:18 同样挂到 WindowedMagnification:0:31 下。</li><li>注意第24~25层，WindowedMagnification 往下没有可以应用的 Feature，这时会增补一个 Leaf:24:25</li></ul></blockquote><p>系统默认树状结构：<br><img src="'+n+'" alt="Default Container"></p><p>打开了屏幕录制悬浮窗的树状结构：<br><img src="'+o+'" alt="Recorder Container"></p><p>在这棵树中，上下结构控制了 Feature 可以对应的窗口，左右体现了 Z 轴位置上下。越靠右位置越高。</p><h2 id="参考文献或资料" tabindex="-1">参考文献或资料 <a class="header-anchor" href="#参考文献或资料" aria-label="Permalink to &quot;参考文献或资料&quot;">​</a></h2><ol><li>窗口容器管理</li><li><a href="https://blog.csdn.net/qq_34211365/article/details/122349862" target="_blank" rel="noreferrer">Android12 窗口组织方式（对比Android10）</a></li><li><a href="https://blog.csdn.net/jieliaoyuan8279/article/details/123157937" target="_blank" rel="noreferrer">安卓12窗口层次: DisplayArea树</a></li></ol>',15)]))}const _=a(d,[["render",s]]);export{g as __pageData,_ as default};
