import{_ as e,c as o,o as r,ag as d}from"./chunks/framework.DPDPlp3K.js";const u=JSON.parse('{"title":"Hadoop","description":"","frontmatter":{},"headers":[],"relativePath":"hadoop/index.md","filePath":"hadoop/index.md"}'),n={name:"hadoop/index.md"};function t(p,a,i,l,c,s){return r(),o("div",null,a[0]||(a[0]=[d('<h1 id="hadoop" tabindex="-1">Hadoop <a class="header-anchor" href="#hadoop" aria-label="Permalink to &quot;Hadoop&quot;">​</a></h1><p>Hadoop 是一个由 Apache 基金会开发的分布式系统基础架构。它主要解决海量数据的存储和分析计算问题。</p><p>优势：</p><ol><li>高可靠性<br> 底层维护多个数据副本，即使某个计算单元火存储单元出现故障也不会导致数据丢失。</li><li>高扩展性<br> 在集群间分配任务数据，可方便的扩展数以千计的节点。</li><li>高效性<br> 在 MapReduce 的思想下，Hadoop 是并行工作的，以加快任务处理速度。</li><li>高容错性<br> 能够自动将失败的任务重新分配。</li></ol><h2 id="组成" tabindex="-1">组成 <a class="header-anchor" href="#组成" aria-label="Permalink to &quot;组成&quot;">​</a></h2><p>Hadoop 1.x: Common（辅助工具）、HDFS（数据存储）、MapReduce（计算 + 资源调度）<br> Hadoop 2.x: Common（辅助工具）、HDFS（数据存储）、Yarn（资源调度）、MapReduce（计算）<br> Hadoop 3.x: Common（辅助工具）、HDFS（数据存储）、Yarn（资源调度）、MapReduce（计算）</p><h2 id="hdfs" tabindex="-1">HDFS <a class="header-anchor" href="#hdfs" aria-label="Permalink to &quot;HDFS&quot;">​</a></h2><p>Hadoop Distributed File System，是一个分布式文件系统。</p><p>NameNode (nn): 存储文件的元数据。例如文件名、文件目录结构、文件属性（生成时间、副本数、文件权限）、每个文件的块列表和块所在的 DataNode 等信息。<br> Secondary NameNode (2nn): 每隔一段时间对 NameNode 元数据进行备份。<br> DataNode (dn): 在本地文件系统存储文件块数据以及块数据的校验和。</p><h2 id="yarn" tabindex="-1">Yarn <a class="header-anchor" href="#yarn" aria-label="Permalink to &quot;Yarn&quot;">​</a></h2><p>Yet Another Resource Negotiator，是 Hadoop 的资源管理器。</p><p>ResourceManager (RM): 管理整个集群的资源（内存，CPU 等）。<br> NodeManager (NM): 管理单个节点服务器的资源。<br> ApplicationMaster (AM): 管理单个任务。<br> Container: 容器。其中封装了任务运行所需要的资源。</p><p>当客户提交作业时，会在对应的 NodeManager 中生成对应的 ApplicationMaster. ApplicationMaster 向 ResourceManager 申请运行任务所需要的资源，封装成 Container 保存在具体的 NodeManager 管理的节点中。对于同一个作业，ApplicationMaster 可以将任务分配到不同的 NodeManager 管理的节点中执行。对于同一个 NodeManager 管理的节点，其中可以运行多个 Container.</p><h2 id="mapreduce" tabindex="-1">MapReduce <a class="header-anchor" href="#mapreduce" aria-label="Permalink to &quot;MapReduce&quot;">​</a></h2><p>MapReduce 将计算过程分为两个阶段：Map 阶段和 Reduce 阶段。<br> Map 阶段并行处理输入数据；Reduce 阶段对 Map 阶段的结果进行汇总。</p>',15)]))}const m=e(n,[["render",t]]);export{u as __pageData,m as default};
