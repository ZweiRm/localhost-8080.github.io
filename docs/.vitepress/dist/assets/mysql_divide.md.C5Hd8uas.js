import{_ as e,c as a,o as r,ag as l}from"./chunks/framework.DPDPlp3K.js";const x=JSON.parse('{"title":"分库分表","description":"","frontmatter":{"prev":{"text":"锁","link":"mysql/lock"},"next":{"text":"参考文献或资料","link":"mysql/references"}},"headers":[],"relativePath":"mysql/divide.md","filePath":"mysql/divide.md"}'),n={name:"mysql/divide.md"};function d(i,t,s,o,c,_){return r(),a("div",null,t[0]||(t[0]=[l('<h1 id="分库分表" tabindex="-1">分库分表 <a class="header-anchor" href="#分库分表" aria-label="Permalink to &quot;分库分表&quot;">​</a></h1><p>通过将单个数据库拆分成多个、单个表拆分成多个的方法来提升数据库的性能，增加其可用性。<br> 当单个库数据量大时，会造成查询 QPS 增高，可以通过拆库的方式分担连接压力。同时拆分数据库也可以提升可用性实现高可用。<br> 当单个表数据量大时，数据库本身的手段无法优化性能，可以通过拆表的方式争取性能。</p><table tabindex="0"><thead><tr><th style="text-align:center;">方案</th><th style="text-align:center;">解决问题</th></tr></thead><tbody><tr><td style="text-align:center;">只分库</td><td style="text-align:center;">数据库读写 QPS 高，连接数不足</td></tr><tr><td style="text-align:center;">只分表</td><td style="text-align:center;">单表数据量过大，性能遇到瓶颈</td></tr><tr><td style="text-align:center;">分库分表</td><td style="text-align:center;">连接数不足，性能瓶颈</td></tr></tbody></table><h2 id="拆分方案" tabindex="-1">拆分方案 <a class="header-anchor" href="#拆分方案" aria-label="Permalink to &quot;拆分方案&quot;">​</a></h2><p>对于拆表拆库，可以按查询数量和连接数量计算求出大概数目。切分时有水平和垂直两种切分方式：<br> 水平切分：按业务维度横线切分； 垂直切分：把不同字段切分到不同的表中。</p>',5)]))}const m=e(n,[["render",d]]);export{x as __pageData,m as default};
