import{_ as i,c as a,o as n,ag as l}from"./chunks/framework.DPDPlp3K.js";const e="/img/updateREADME.png",p="/img/gitIgnore.png",t="/img/newSite.png",h="/img/buildOpt.png",k="/img/githubPages.png",y=JSON.parse('{"title":"搭建一个基于 VuePress 的博客/技术文档网站","description":"","frontmatter":{},"headers":[],"relativePath":"hello-world/building-a-vuepress-powered-blog.md","filePath":"hello-world/building-a-vuepress-powered-blog.md"}'),r={name:"hello-world/building-a-vuepress-powered-blog.md"};function d(o,s,E,g,c,u){return n(),a("div",null,s[0]||(s[0]=[l('<h1 id="搭建一个基于-vuepress-的博客-技术文档网站" tabindex="-1">搭建一个基于 VuePress 的博客/技术文档网站 <a class="header-anchor" href="#搭建一个基于-vuepress-的博客-技术文档网站" aria-label="Permalink to &quot;搭建一个基于 VuePress 的博客/技术文档网站&quot;">​</a></h1><h2 id="什么是-vuepress" tabindex="-1">什么是 VuePress? <a class="header-anchor" href="#什么是-vuepress" aria-label="Permalink to &quot;什么是 VuePress?&quot;">​</a></h2><p>VuePress 是一款基于 Vue 的静态网站生成器。它可以将你编写的 Markdown 文档转化为已经渲染好的 HTML 静态页面。这些页面有着良好的 SEO 优化，可以轻松的支持搜索引擎收录；同时页面被浏览时由 Vue 接管而形成单页应用，其他页面按浏览按需加载。</p><h2 id="为什么选-vuepress" tabindex="-1">为什么选 VuePress? <a class="header-anchor" href="#为什么选-vuepress" aria-label="Permalink to &quot;为什么选 VuePress?&quot;">​</a></h2><p>最重要的一点是：VuePress 对 Vue 技术有着很好的支持。这也就意味着除了其他静态网站生成器的功能，你可以在文档中使用 Vue 的动态组件，这对 Vue 程序员来说十分友好。关于 Vue 组件，你可以参考这个链接：<a href="https://vuepress.vuejs.org/zh/guide/using-vue.html" target="_blank" rel="noreferrer">在 Markdown 中使用 Vue</a>。<br> 其次是 VuePress 的默认主题，它的设计初衷是为了提供给编写产品文档的一个解决方案。也就是说，VuePress 生成的静态网页应用的风格看上去是技术文档，而不是传统博客。这更契合程序员的日常阅读习惯，同时可以让我们编写文章时操作简便且富有条理。当然，VuePress 也有官方和第三方主题，可以实现 Hexo 等技术的博客风格，可以按需安装。<br> VuePress 也拥有者丰富的插件库，当你需要评论功能、用 $\\LaTeX$ 输入一些公式等，都能找到相关的插件来支持自己的需求。<br> 这些是表层上的一些优势。关于 VuePress 和其他类似技术在底层实现和性能方面的对比可以在<a href="https://vuepress.vuejs.org/zh/guide/#%E4%B8%BA%E4%BB%80%E4%B9%88%E4%B8%8D%E6%98%AF" target="_blank" rel="noreferrer">官方文档</a>中进行阅读。</p><h2 id="技术架构" tabindex="-1">技术架构 <a class="header-anchor" href="#技术架构" aria-label="Permalink to &quot;技术架构&quot;">​</a></h2><p>VuePress 的部署方案是多种多样的，这篇文章主要讲 VuePress + GitHub Pages 和 VuePress + Netlify 两种部署方案。其中 Netlify 是持续集成的。两种方案都不需要额外的服务器。</p><p>我们需要用到的技术：Git, VuePress, Markdown<br> 我们需要用到的工具：GitHub, Netlify (可选)</p><h2 id="开始前的建议" tabindex="-1">开始前的建议 <a class="header-anchor" href="#开始前的建议" aria-label="Permalink to &quot;开始前的建议&quot;">​</a></h2><p>在我们正式开始前，我推荐：预先掌握 Git 的基础知识、Markdown 的简单语法和 GitHub 的基本使用方法、大致阅读 VuePress 官方文档。</p><h2 id="搭建" tabindex="-1">搭建 <a class="header-anchor" href="#搭建" aria-label="Permalink to &quot;搭建&quot;">​</a></h2><h3 id="i-git-和-github" tabindex="-1">I. Git 和 GitHub <a class="header-anchor" href="#i-git-和-github" aria-label="Permalink to &quot;I. Git 和 GitHub&quot;">​</a></h3><ol><li><p>新建 Repository<br> 假如你还没有 GitHub 账户，注册一个，然后新建 Repository。<br> 仓库名称填写你希望取的域名加上 &quot;.github.io&quot;，然后填写对这个仓库的大概描述，勾选 “Initialize this repository with a README”。</p><div align="center">![New Repository](/img/newRepository.png)</div></li><li><p>完善 Repository</p><ul><li><p>完善 <code>README.md</code><br> 在 Repository 页面完善项目信息，点击 <code>README.md</code> 文件的编辑按钮进入编辑界面，使用 Markdown 语法编写对该项目更详细的描述。完成后点击 <code>Commit changes</code> 按钮来提交本次修改。<br><img src="'+e+'" alt="Update README"></p></li><li><p>编写 <code>.gitignore</code><br> 很多文件我们不需要同步到 GitHub 仓库里，使用<code>.gitignore</code>文件来标识出哪些文件或目录不需要同步。<br> 在仓库首页点击<code>Creat new file</code>按钮进入编辑界面。输入新建的文件名：<code>.gitignore</code>，并填写内容：&quot;node_modules&quot;。（根据你使用的 IDE 不同，也许你需要添加&quot;.vs&quot; 或者 &quot;.idea&quot; 等内容来避免同步 IDE 独特的项目信息，请根据需求自行添加。）<br> 完成后点击 <code>Commit changes</code> 按钮来提交本次修改。<br><img src="'+p+`" alt=".gitignore"></p></li></ul></li><li><p>安装和配置 Git</p><ul><li><p>安装并部署你的 Git<br> 下载并安装相关的程序，运行并配置你的账户。你可以根据廖雪峰老师的这个教程来安装。<a href="https://www.liaoxuefeng.com/wiki/896043488029600/896067074338496" target="_blank" rel="noreferrer">廖雪峰的官方网站-安装Git</a></p></li><li><p>初始化本地仓库<br> 在本机上适合的位置创建一个文件夹，命名和 GitHub 创建的仓库名称一致。这个文件夹将作为我们本次项目的文件夹。<br> 使用 Git Bash 或者其他命令行（控制台/终端）程序访问到该文件夹，输入命令来把文件夹初始化为 git 仓库。</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> init</span></span></code></pre></div></li><li><p>建立本地和远程仓库的连接<br> 生成本地 SSH Key，并提交 GitHub。使用命令关联远程仓库。<br> 具体请参考：<a href="https://www.liaoxuefeng.com/wiki/896043488029600/896954117292416" target="_blank" rel="noreferrer">廖雪峰的官方网站-远程仓库</a></p></li><li><p>拉取文件到本地</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pull</span></span></code></pre></div></li></ul></li></ol><h3 id="ii-安装-vuepress" tabindex="-1">II. 安装 VuePress <a class="header-anchor" href="#ii-安装-vuepress" aria-label="Permalink to &quot;II. 安装 VuePress&quot;">​</a></h3><ol><li><p>安装 Node.js<br> 下载并安装 <a href="https://nodejs.org/zh-cn/" target="_blank" rel="noreferrer">Node.js</a>.</p></li><li><p>安装 Yarn<br> 使用命令行程序全局安装包管理器 Yarn.</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -g</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> yarn</span></span></code></pre></div></li><li><p>安装 VuePress<br> 使用命令行程序访问到之前创建的项目目录。以本地依赖形式安装。后创建 /docs 目录用来后续存放需要编写的文章。</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 将 VuePress 作为一个本地依赖安装</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">yarn</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -D</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> vuepress</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 新建一个 docs 目录</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mkdir</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> docs</span></span></code></pre></div></li></ol><h3 id="iii-配置-vuepress" tabindex="-1">III. 配置 VuePress <a class="header-anchor" href="#iii-配置-vuepress" aria-label="Permalink to &quot;III. 配置 VuePress&quot;">​</a></h3><ol><li><p>编写脚本 修改<code>package.json</code>文件，添加一些脚本：</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;scripts&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;docs:dev&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;vuepress dev docs&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;docs:build&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;vuepress build docs&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="warning custom-block"><p class="custom-block-title">值得注意的是</p><p>因为是追加内容，所以需要在本原来的最后一项后加上逗号。例如：</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">   &quot;devDependencies&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">     &quot;vuepress&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;^1.3.1&quot;</span></span>
<span class="line highlighted"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   },</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">   &quot;scripts&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">     &quot;docs:dev&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;vuepress dev docs&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">     &quot;docs:build&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;vuepress build docs&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></div></li><li><p>创建必要的文件和目录</p><ul><li><p>在 /docs 目录中创建目录：/.vuepress</p></li><li><p>在 /.vuepress 目录中创建目录： /public</p></li><li><p>在 /public 目录中创建目录： /img</p></li><li><p>在 /img 目录中放入你喜欢的图片当做首页 logo，这里假设图片名为<code>logo.png</code></p></li><li><p>退回到 /docs 目录，创建 <code>README.md</code>文件，它将生成为站点首页<br> 参考这个示例编写：</p><div class="language-markdown vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">markdown</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-light-font-weight:bold;--shiki-dark:#79B8FF;--shiki-dark-font-weight:bold;">---</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">home: true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">heroImage: /img/logo.png</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">actionText: Hello, world! →</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">actionLink: /tittle-tattle/</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">meta:</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name: keywords</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  content: 技术 软件 计算机 Java Web 软件工程 笔记</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">features:</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> title: 全面</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  details: 笔记涵盖从计算机科学、软件工程、到各种具体实用技术等多维度内容。</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> title: 简洁</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  details: 笔记力图以简洁的文字和画面表现出各知识的条理关系。</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> title: 实用</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  details: 这不是百科全书，但在全面的基础上尽量展示最可能用到的部分。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">footer: Copyright © 2018-2020 ahza.xin | localhost-8080.io</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-light-font-weight:bold;--shiki-dark:#79B8FF;--shiki-dark-font-weight:bold;">---</span></span></code></pre></div><ul><li><code>home</code> 标识当前页面为站点首页</li><li><code>heroImage</code> 选定首页大图（Logo）</li><li><code>actionText</code> 指定默认按钮文字</li><li><code>actionLink</code> 指定默认按钮跳转的页面</li><li><code>meta</code> 可以指定在 html 的 <code>&lt;meta&gt;</code> 中增添的信息，这里增添了关于 &quot;keywords&quot; 的内容</li><li><code>features</code> 是默认的三个特性展示，通过设置 title 和 details 来完善内容</li><li><code>footer</code> 展示页脚信息</li></ul><p>首页效果可以参考 VuePress 官方文档的首页。</p></li></ul></li><li><p>配置文件<br> 在 /docs/.vuepress/ 目录下创建文件：<code>config.js</code> 并编写。<br> 参考示例：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  title: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;本地煮鸡:8080&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  description: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;一个博客, 大概会记录一些技术笔记&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  head: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;link&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, { rel: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;icon&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, href: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/img/favicon.ico&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  plugins: {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &#39;@vuepress/pwa&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      serviceWorker: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      updatePopup: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        message: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;有文章更新了&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        buttonText: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;刷新&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &#39;@vuepress/back-to-top&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &#39;@vuepress/register-components&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      componentsDir: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/components/&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &#39;@vuepress/google-analytics&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      &#39;ga&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;UA-**********-*&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  themeConfig: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    repo: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;ZweiRm/localhost-8080.github.io&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    repoLabel: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;查看源码&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    docsDir: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;docs&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    editLinks: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    editLinkText: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;帮助我改善此页面！&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    lastUpdated: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;上次更新&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    nav: [{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      text: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;主页&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      link: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        text: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;博文&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        items: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          { text: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Java&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, link: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/java/&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          { text: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Kotlin&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, link: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/kotlin/&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      { text: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;关于&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, link: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/about/&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      { text: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Github&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, link: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;https://www.github.com/ZweiRm&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    sidebar: {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      &#39;/java/&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &#39;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &#39;grammar&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &#39;object-oriented&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &#39;application-programming-interface&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      ],</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      &#39;/kotlin/&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">          &#39;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    sidebarDepth: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ul><li><p><code>title</code><br> 网站的标题。</p></li><li><p><code>description</code><br> 网站的描述，它会被渲染在 html 的 <code>&lt;meta&gt;</code> 中。</p></li><li><p><code>head</code><br> 这里设置的值会被渲染在 html 的 <code>&lt;head&gt;</code> 中，示例中设置了网站的 favicon（即浏览器标签里网站的小图标）。</p></li><li><p><code>plugins</code><br> 设置并启用插件，这里设置了官网插件：pwa, back-to-top, register-components 和 google-analytics.<br> 具体设置及使用方法参照：<a href="https://vuepress.vuejs.org/zh/plugin/" target="_blank" rel="noreferrer">插件 | VuePress</a>。</p></li><li><p><code>themeConfig</code><br> 配置默认主体。在这个示例中，配置了 Git 仓库和编辑链接、最后更新时间、导航栏、侧边栏（多层嵌套式）。具体设置及使用方法参照：<a href="https://vuepress.vuejs.org/zh/theme/default-theme-config.html" target="_blank" rel="noreferrer">默认主题配置 | VuePress</a>。</p><div class="warning custom-block"><p class="custom-block-title">注意</p><ul><li><p>关于侧边栏<br> 侧边栏的配置和你的 /docs 目录息息相关，二者应当是相互对应的。例如：</p><p>在这个示例配置文件中，<code>sidebar</code> 配置了一些文章，它们表达的意思是：Java 项下有文章《README》（即空字符串）、《语法》、《面向对象》、《应用程序编程接口概述》；在 Kotlin 项下有文章《README》。它们所对应的目录结构将在下一小节中展示。</p><p>由于这里对每篇文章手动设置了侧边栏，所以后面每次当我们需要撰写新的文章时都需要通过调整这个配置来显示正确的侧边栏。</p><p>文章分类目录为英文时，为了避免不必要的烦恼推荐写为小写英文，它们将会被映射为 url （即单引号中的内容，如<code>&#39;/deep-learning/&#39;</code>）。</p><p>在实际所生成的侧边栏（即通过命令进入开发模式或者生成静态文件后所显示的）中，显示内容为具体文档的一级标题而不是侧边栏设置中配置的字符串。例如：当 <code>config.js</code> 中侧边栏配置了 <code>&#39;面向对象&#39;</code>，而在 <code>面向对象.md</code> 文档中的一级标题为 <code># Object-Oriented</code> 时，实际生成页面中的侧边栏所显示的内容为 &quot;Objec-Oriented&quot;.</p><p>值得注意的是，这里推荐使用英文来命名每一篇 Markdown 文档。因为它将被映射为 url 中的一部分, 而中文需要被转码以后才能作为 url，所以这会使得整个 url 变得异常地长。</p></li><li><p>关于导航栏<br> 一般读者需要通过导航栏来访问具体类目中的文章。在这个示例配置文件中，配置了普通链接，如：<code>主页</code>，它所对应的链接是 <code>/</code>；嵌套链接，如：<code>博文</code>，它还包含了 <code>Java</code> 和 <code>Kotlin</code> 子项。</p></li></ul></div></li></ul><p>这里只介绍有用且相对必要的配置，其他配置项及配置项的详细信息请参照：<a href="https://vuepress.vuejs.org/zh/config/" target="_blank" rel="noreferrer">配置 | VuePress</a>。</p><div class="tip custom-block"><p class="custom-block-title">从 0.x 迁移</p><p>假如你按照其他 0.x 版本的 VuePress 安装过了，并渴望使用新的 1.x 版本 VuePress，请参照文章 <a href="https://vuepress.vuejs.org/zh/miscellaneous/migration-guide.html" target="_blank" rel="noreferrer">从 VuePress 0.x 迁移 | VuePress</a> 来配置。</p></div></li><li><p>目录结构<br> 到此，你已经可以通过使用命令行程序运行命令来进入开发模式进行文章的撰写了：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">yarn</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> docs:dev</span></span></code></pre></div><p>我们此时的目录结构为：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>· (whatever-you-like.github.io)</span></span>
<span class="line"><span>├── docs</span></span>
<span class="line"><span>│   ├── .vuepress</span></span>
<span class="line"><span>│   │   ├── public</span></span>
<span class="line"><span>│   │   │   └── img</span></span>
<span class="line"><span>|   |   ├── config.js</span></span>
<span class="line"><span>|   |   └── dist (使用页面生成命令后，静态页面将会生成在这里，这个目录也会自动生成)</span></span>
<span class="line"><span>|   ├── java</span></span>
<span class="line"><span>|   |   ├── README.md</span></span>
<span class="line"><span>|   |   ├── grammar.md</span></span>
<span class="line"><span>|   |   ├── object-oriented.md</span></span>
<span class="line"><span>|   |   └── application-programming-interface.md</span></span>
<span class="line"><span>|   └── kotlin</span></span>
<span class="line"><span>|       └── README.md</span></span>
<span class="line"><span>├── node_modules</span></span>
<span class="line"><span>├── package.json</span></span>
<span class="line"><span>├── yarn.lock</span></span>
<span class="line"><span>├── README.md</span></span>
<span class="line"><span>├── .gitignore</span></span>
<span class="line"><span>└── .git</span></span></code></pre></div><p>在开发模式下，你可以在 /docs 目录下通过新建 <code>.md</code> 文件来新建一篇文章，通过新建一个目录来新建一个分类。完成后同步修改 .vuepress/config.js 中相关导航栏和侧边栏配置。</p><p>当你在编写一篇文章时，每当保存了 <code>.md</code> 文件，结果会自动更新在浏览器页面中。</p><p>当我们完成文章的编写后，我们需要生成静态网页并部署到服务器中，实现互联网访问我们的网站。这里提供两种方法，一个是拥有持续集成功能的 Netlify 方案，一个是手动操作的 GitHub Pages 方案，我们将分为两节描述它们。</p></li></ol><h2 id="部署-netlify" tabindex="-1">部署 - Netlify <a class="header-anchor" href="#部署-netlify" aria-label="Permalink to &quot;部署 - Netlify&quot;">​</a></h2><p>Netlify 提供了一种十分方便的持续集成体验。也就是说，每当你 push 你的新文章到 GitHub 后，Netlify 可以自动帮你生成静态页面文件并部署。但它的缺点也十分明显，由于一些特殊的网络原因，由 Netlify 部署的网站访问速度会极其缓慢甚至无法加载。</p><p>当我们注册好 Netlify 后，对其进行一些简单的配置：</p><ol><li><p>同步我们的代码到 GitHub<br> 首先通过命令把我们之前写过的所有内容同步到 GitHub 上的远程仓库。</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -A</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> commit</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -m</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;deploy&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 将&lt;USERNAME&gt;/&lt;USERNAME&gt;.github.io.git 修改为你的仓库</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> push</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> git@github.com:</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">USERNAM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">E</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">USERNAM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">E</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.github.io.git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> master</span></span></code></pre></div></li><li><p>创建新网站</p><ul><li>点击<code>New site from Git</code>按钮创建新网站。点击 GitHub 按钮连接我们的项目仓库。<br><img src="`+t+'" alt="Create a new site"></li><li>选择我们的远程仓库</li><li>填写配置信息：Build command, Publish directory<br><img src="'+h+`" alt="Build Options"></li><li>点击 <code>Deploy site</code> 按钮</li></ul></li></ol><p>Netlify 还有一些其他的设置，比如域名配置、DNS 配置等，你可以根据需求自行阅读相关说明并进行设置。</p><h2 id="部署-github-pages" tabindex="-1">部署 - GitHub Pages <a class="header-anchor" href="#部署-github-pages" aria-label="Permalink to &quot;部署 - GitHub Pages&quot;">​</a></h2><p>我们可以使用 GitHub 自带的 GitHub Pages 来实现部署，它使用 GitHub 的服务器，一般情况下不会出现复杂的网络问题。</p><ol><li><p>生成静态网页文件<br> 使用命令来生成文档：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">yarn</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> docs:build</span></span></code></pre></div><p>将生成在 whatever-you-like.github.io/docs/.vuepress/dist 中的所有文件复制并粘贴到项目文档的根目录（即 whatever-you-like.github.io）中。</p></li><li><p>同步我们的代码到 GitHub<br> 通过命令把我们之前写过的所有内容同步到 GitHub 上的远程仓库。</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -A</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 引号中的字符串可以根据实际情况进行修改</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> commit</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -m</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;deploy&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 将&lt;USERNAME&gt;/&lt;USERNAME&gt;.github.io.git 修改为你的仓库</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> push</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> git@github.com:</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">USERNAM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">E</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">USERNAM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">E</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.github.io.git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> master</span></span></code></pre></div></li><li><p>设置 GitHub Pages<br> 进入 GitHub 中，点击我们的项目仓库并点击设置按钮。找到 GitHub Pages 选项，修改设置：<code>Source</code> 项选中：master branch，勾选 <code>Enforce HTTPS</code>.<br><img src="`+k+`" alt="GitHub Pages"><br> 如果你拥有自己注册的域名并希望使用在这个网站上，可以将它填写在 <code>Custom domain</code> 中。</p></li></ol><div class="warning custom-block"><p class="custom-block-title">注意</p><p>当你使用本方法来部署你的网页，每当你希望更新你的网站页面时，你都需要手动进行以下操作：</p><ol><li><p>使用命令来生成静态页面：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">yarn</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> docs:build</span></span></code></pre></div></li><li><p>将生成在 whatever-you-like.github.io/docs/.vuepress/dist 中的所有文件复制并粘贴到项目文档的根目录（即 whatever-you-like.github.io）中</p></li><li><p>使用命令来提交你的代码到 GitHub 远程仓库:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -A</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 引号中的字符串可以根据实际情况进行修改</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> commit</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -m</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;deploy&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 将&lt;USERNAME&gt;/&lt;USERNAME&gt;.github.io.git 修改为你的仓库</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> push</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> git@github.com:</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">USERNAM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">E</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">USERNAM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">E</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.github.io.git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> master</span></span></code></pre></div></li></ol><p>当然你也可以在本地配置 Jenkins 等持续集成方案来实现自动部署，在这篇文章中不再赘述。</p></div><h2 id="你可能会遇到的问题" tabindex="-1">你可能会遇到的问题 <a class="header-anchor" href="#你可能会遇到的问题" aria-label="Permalink to &quot;你可能会遇到的问题&quot;">​</a></h2><ol><li><p><strong>Q: 为什么我在两篇文章之间设置了链接，但点击无法访问到？</strong><br> A: 当编写多篇文章之间的链接时，格式为<code>[链接文字](./文章名.html#章节名)</code>。即比文章内链接多了两项：<code>./文章名.html</code>。特别需要注意的是文章名后有 &quot;.html&quot; 的。</p></li><li><p><strong>Q: 如何解决每次手动输入 Git 命令的麻烦？</strong><br> A: 推荐使用 IDE 来编写你的文章，比如使用 Visual Studio Code 或者 IntelliJ IDEA 等 IDE. 它们很好的支持了版本控制软件 Git，可以通过相对可视化的操作来简化你在 Git 方面的操作，这会让你日常书写体验变得更好。</p></li><li><p><strong>Q: 如何修改一部分样式而不使用其他主题或者自己编写主题？</strong><br> A: 以修改 <code>code</code> 样式字体为例：</p><ol><li>在<code>/.vuepess</code>文件夹下新建文件夹<code>/styles</code>.</li><li>在<code>/styles</code>文件夹下新建文件<code>index.styl</code>.</li><li>编辑<code>index.styl</code>，使用 css 语法或者 stylus 语法编写样式。 例如：<div class="language-stylus vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">stylus</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">code</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">kbd</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.line-number</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  font-family</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;JetBrains Mono&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, source-code-pro, Menlo, Monaco, Consolas, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Courier New&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">monospace</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@font-face</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">   font-family</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;JetBrains Mono&quot;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">   src</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> url</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/font/JetBrainsMono-Regular.woff&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div></li></ol><div class="tip custom-block"><p class="custom-block-title">此时的<code>/.vuepress</code>目录结构为：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>  .vuepress</span></span>
<span class="line"><span>  ├── public</span></span>
<span class="line"><span>  |   ├── font (用于存放字体文件，这体现在\`.styl\`文件的\`src url(&quot;...&quot;)\`项里)</span></span>
<span class="line"><span>  │   └── img</span></span>
<span class="line"><span>  ├── config.js</span></span>
<span class="line"><span>  └── dist</span></span></code></pre></div></div></li><li><p><strong>Q: 我修改了侧边栏配置，而且确定正确修改了对应的 Markdown 文档的名称，dev 模式也能正确看到文章。但为什么使用 <code>build</code> 命令生成网页时不断报错？</strong><br> A: 请检查 Markdown 文档中 front-matter 的 <code>prev</code> 和 <code>next</code> 项是否也正确修改。</p></li><li><p><strong>Q: 为什么我的侧边栏不显示？</strong><br> A: 请认真检查是否正确配置侧边栏相关的内容，如文件夹命名、文档命名、congfig.js 中相关配置项是否正确（如是否漏写两边任意的<code>/</code>）。</p></li><li><p><strong>Q: 当我试图启动 VuePress 时提示项目系统文件 &quot;<code>isDebug; SyntaxError: Unexpected token ;</code>&quot; 错误。</strong><br> A: 请尝试更新您的 Node.js 到更新的版本。此问题<strong>也会出现在 Netlify 部署中</strong>。对于 Netlify, 请在设置中增添环境变量：<code>NODE_VERSION</code> 为合适的版本。</p></li></ol><h2 id="参考文献或资料" tabindex="-1">参考文献或资料 <a class="header-anchor" href="#参考文献或资料" aria-label="Permalink to &quot;参考文献或资料&quot;">​</a></h2><p>[1] Evan You.<a href="https://vuepress.vuejs.org/" target="_blank" rel="noreferrer">VuePress</a><br> [2] 廖雪峰.<a href="https://www.liaoxuefeng.com/wiki/896043488029600" target="_blank" rel="noreferrer">廖雪峰的官方网站-Git教程</a><br> [3] destiny0904.<a href="https://www.jianshu.com/p/6fa4bfa449ed" target="_blank" rel="noreferrer">VuePress 入门</a></p>`,30)]))}const b=i(r,[["render",d]]);export{y as __pageData,b as default};
