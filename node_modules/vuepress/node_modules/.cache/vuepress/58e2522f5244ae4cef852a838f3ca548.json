{"remainingRequest":"C:\\Users\\momg\\Documents\\Workspace\\Github\\localhost-8080.github.io\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Users\\momg\\Documents\\Workspace\\Github\\localhost-8080.github.io\\node_modules\\cache-loader\\dist\\cjs.js??ref--1-0!C:\\Users\\momg\\Documents\\Workspace\\Github\\localhost-8080.github.io\\node_modules\\vue-loader\\lib\\index.js??ref--1-1!C:\\Users\\momg\\Documents\\Workspace\\Github\\localhost-8080.github.io\\node_modules\\vuepress\\lib\\webpack\\markdownLoader.js??ref--1-2!C:\\Users\\momg\\Documents\\Workspace\\Github\\localhost-8080.github.io\\docs\\java\\README.md?vue&type=template&id=e6682e70&","dependencies":[{"path":"C:\\Users\\momg\\Documents\\Workspace\\Github\\localhost-8080.github.io\\docs\\java\\README.md","mtime":1554878054638},{"path":"C:\\Users\\momg\\Documents\\WORKSPACE\\Github\\localhost-8080.github.io\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1546868327989},{"path":"C:\\Users\\momg\\Documents\\Workspace\\Github\\localhost-8080.github.io\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1558414119184},{"path":"C:\\Users\\momg\\Documents\\Workspace\\Github\\localhost-8080.github.io\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1546868327989},{"path":"C:\\Users\\momg\\Documents\\Workspace\\Github\\localhost-8080.github.io\\node_modules\\vue-loader\\lib\\index.js","mtime":1558414119184},{"path":"C:\\Users\\momg\\Documents\\Workspace\\Github\\localhost-8080.github.io\\node_modules\\vuepress\\lib\\webpack\\markdownLoader.js","mtime":1558414126042}],"contextDependencies":[],"result":["var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _vm._m(0)\n}\nvar staticRenderFns = [\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"div\", { staticClass: \"content\" }, [\n      _c(\"h1\", { attrs: { id: \"基础\" } }, [\n        _c(\n          \"a\",\n          {\n            staticClass: \"header-anchor\",\n            attrs: { href: \"#基础\", \"aria-hidden\": \"true\" }\n          },\n          [_vm._v(\"#\")]\n        ),\n        _vm._v(\" 基础\")\n      ]),\n      _vm._v(\" \"),\n      _c(\"h2\", { attrs: { id: \"关于-java\" } }, [\n        _c(\n          \"a\",\n          {\n            staticClass: \"header-anchor\",\n            attrs: { href: \"#关于-java\", \"aria-hidden\": \"true\" }\n          },\n          [_vm._v(\"#\")]\n        ),\n        _vm._v(\" 关于 Java\")\n      ]),\n      _vm._v(\" \"),\n      _c(\"ul\", [\n        _c(\"li\", [\n          _c(\"p\", [\n            _vm._v(\"1995 年 Sun 公司正式推出的一款编程语言\"),\n            _c(\"br\"),\n            _vm._v(\"\\n吸收了 C++ 的优点，去掉了其中难以理解的部分\")\n          ])\n        ]),\n        _vm._v(\" \"),\n        _c(\"li\", [\n          _c(\"p\", [\n            _vm._v(\"起初它的名字为 Oak\"),\n            _c(\"br\"),\n            _vm._v(\"\\nGreen Project 引导下开发了 Oak 语言，并在实用机器运行\"),\n            _c(\"br\"),\n            _vm._v('\\nSunWorld 大会正式以\"Java\"的名字发布了 1.0 版本'),\n            _c(\"br\"),\n            _vm._v('\\n提出了 Java 的口号 \"Write once, run anywhere.\"')\n          ])\n        ]),\n        _vm._v(\" \"),\n        _c(\"li\", [\n          _c(\"p\", [_vm._v(\"版本变化\")]),\n          _vm._v(\" \"),\n          _c(\"ul\", [\n            _c(\"li\", [\n              _vm._v(\"Beta [1995, \"),\n              _c(\"strong\", [_vm._v(\"JDK Beta\")]),\n              _vm._v(\"]\")\n            ]),\n            _vm._v(\" \"),\n            _c(\"li\", [\n              _vm._v(\"1.0 [1996, \"),\n              _c(\"strong\", [_vm._v(\"JDK 1.0\")]),\n              _vm._v(\"] (JVM, Applet, AWT...)\")\n            ]),\n            _vm._v(\" \"),\n            _c(\"li\", [\n              _vm._v(\"1.1 [1997, \"),\n              _c(\"strong\", [_vm._v(\"JDK 1.1\")]),\n              _vm._v(\"] (JDBC, JavaBean, 内部类...)\")\n            ]),\n            _vm._v(\" \"),\n            _c(\"li\", [\n              _vm._v(\"1.2 [1998, \"),\n              _c(\"strong\", [_vm._v(\"J2SE 1.2\")]),\n              _vm._v(\", ...] (分解为 J2SE, J2EE, J2ME)\")\n            ]),\n            _vm._v(\" \"),\n            _c(\"li\", [\n              _vm._v(\"1.3 [2000, \"),\n              _c(\"strong\", [_vm._v(\"J2SE 1.3\")]),\n              _vm._v(\", ...] (数学运算, Timer, ...)\")\n            ]),\n            _vm._v(\" \"),\n            _c(\"li\", [\n              _vm._v(\"1.4 [2002, \"),\n              _c(\"strong\", [_vm._v(\"J2SE 1.4\")]),\n              _vm._v(\", ...] (正则, 日志, XML解析器, ...) 走向成熟\")\n            ]),\n            _vm._v(\" \"),\n            _c(\"li\", [\n              _vm._v(\"5.0 [2004, \"),\n              _c(\"strong\", [_vm._v(\"J2SE 5.0\")]),\n              _vm._v(\", ...] (泛型, 自动装箱, 枚举, 便利循环, ...) 面向易用\")\n            ]),\n            _vm._v(\" \"),\n            _c(\"li\", [\n              _vm._v(\"6.0 [2006, \"),\n              _c(\"strong\", [_vm._v(\"Java SE 6.0\")]),\n              _vm._v(\", ...] (动态语言, 垃圾回收, 类加载, ...)\")\n            ]),\n            _vm._v(\" \"),\n            _c(\"li\", [_vm._v(\"Sun 衰落，被 Oracle 收购\")]),\n            _vm._v(\" \"),\n            _c(\"li\", [\n              _vm._v(\"7.0 [2011, \"),\n              _c(\"strong\", [_vm._v(\"Java SE 7\")]),\n              _vm._v(\", ...] (G1 收集器, 类加载框架, ...)\")\n            ]),\n            _vm._v(\" \"),\n            _c(\"li\", [\n              _vm._v(\"8.0 [2014, \"),\n              _c(\"strong\", [_vm._v(\"Java SE 8 (LTS)\")]),\n              _vm._v(\", ...] (Lambda 表达式, 默认方法, ...)\")\n            ]),\n            _vm._v(\" \"),\n            _c(\"li\", [\n              _vm._v(\"9.0 [2017, \"),\n              _c(\"strong\", [_vm._v(\"Java SE 9\")]),\n              _vm._v(\", ...] (模块系统, REPL 交互式编程, ...)\")\n            ]),\n            _vm._v(\" \"),\n            _c(\"li\", [\n              _vm._v(\"10.0 [2018, \"),\n              _c(\"strong\", [_vm._v(\"Java SE 10\")]),\n              _vm._v(\", ...] (局部类型推测, 改进的 GC, ...)\")\n            ]),\n            _vm._v(\" \"),\n            _c(\"li\", [\n              _vm._v(\"11.0 [2018, \"),\n              _c(\"strong\", [_vm._v(\"Java SE 11 (LTS)\")]),\n              _vm._v(\", ...] (基于嵌套的访问控制, 标准 Http 客户端, ...)\")\n            ]),\n            _vm._v(\" \"),\n            _c(\"li\", [\n              _vm._v(\"12.0 [2019, \"),\n              _c(\"strong\", [_vm._v(\"Java SE 12\")]),\n              _vm._v(\", ...] (增强的 Switch, Constants API, ...)\")\n            ])\n          ])\n        ]),\n        _vm._v(\" \"),\n        _c(\"li\", [\n          _c(\"p\", [_vm._v(\"技术结构\")]),\n          _vm._v(\" \"),\n          _c(\"ul\", [\n            _c(\"li\", [_vm._v(\"Java SE: 标准版\")]),\n            _vm._v(\" \"),\n            _c(\"li\", [_vm._v(\"Java EE: 企业版\")]),\n            _vm._v(\" \"),\n            _c(\"li\", [_vm._v(\"Java ME: 移动版\")])\n          ])\n        ]),\n        _vm._v(\" \"),\n        _c(\"li\", [\n          _c(\"p\", [\n            _vm._v(\"跨平台性\"),\n            _c(\"br\"),\n            _vm._v(\"\\nJava 是一款拥有跨平台性的语言。这种特性的实现方式是\"),\n            _c(\"span\", { attrs: { id: \"JVM\" } }),\n            _vm._v(\"JVM (Java Virtual Machine).\"),\n            _c(\"br\"),\n            _vm._v(\n              \"\\nJava 针对每种操作系统开发了对应的 Java 虚拟机，Java 程序在编写完成后并不直接在计算机中运行，而是先提交给对应操作系统的 JVM 进行“翻译”。JVM 将 Java 代码“翻译”成当前操作系统可以“读懂”的语言后才运行。\"\n            ),\n            _c(\"br\"),\n            _vm._v(\"\\n所以 Java 语言的跨平台性得益于 JVM，但 \"),\n            _c(\"strong\", [_vm._v(\"JVM 本身不具有跨平台性\")]),\n            _vm._v(\"。\")\n          ])\n        ])\n      ]),\n      _vm._v(\" \"),\n      _c(\"h2\", { attrs: { id: \"jvm-jre-和-jdk\" } }, [\n        _c(\n          \"a\",\n          {\n            staticClass: \"header-anchor\",\n            attrs: { href: \"#jvm-jre-和-jdk\", \"aria-hidden\": \"true\" }\n          },\n          [_vm._v(\"#\")]\n        ),\n        _vm._v(\" JVM, JRE 和 JDK\")\n      ]),\n      _vm._v(\" \"),\n      _c(\"ul\", [\n        _c(\"li\", [\n          _c(\"p\", [\n            _c(\"a\", { attrs: { href: \"#JVM\" } }, [\n              _vm._v(\"JVM (Java Virtual Machine)\")\n            ]),\n            _vm._v(\", \"),\n            _c(\"strong\", [_vm._v(\"Java 虚拟机\")]),\n            _vm._v(\"，是 Java 可以跨平台的前提。\")\n          ])\n        ]),\n        _vm._v(\" \"),\n        _c(\"li\", [\n          _c(\"p\", [\n            _vm._v(\"JRE (Java Runtime Environment), \"),\n            _c(\"strong\", [_vm._v(\"Java 运行时环境\")]),\n            _vm._v(\"，包括 JVM、Java 平台核心类和基础 Java 平台库。\")\n          ])\n        ]),\n        _vm._v(\" \"),\n        _c(\"li\", [\n          _c(\"p\", [\n            _vm._v(\"JDK (Java Development Kit), \"),\n            _c(\"strong\", [_vm._v(\"Java 开发工具包\")]),\n            _vm._v(\"，包括 JRE 和一些开发工具.\")\n          ])\n        ])\n      ]),\n      _vm._v(\" \"),\n      _c(\"h2\", { attrs: { id: \"第一个-java-程序\" } }, [\n        _c(\n          \"a\",\n          {\n            staticClass: \"header-anchor\",\n            attrs: { href: \"#第一个-java-程序\", \"aria-hidden\": \"true\" }\n          },\n          [_vm._v(\"#\")]\n        ),\n        _vm._v(\" 第一个 Java 程序\")\n      ]),\n      _vm._v(\" \"),\n      _c(\"div\", { staticClass: \"language-java extra-class\" }, [\n        _c(\"pre\", { pre: true, attrs: { class: \"language-java\" } }, [\n          _c(\"code\", [\n            _c(\"span\", { pre: true, attrs: { class: \"token keyword\" } }, [\n              _vm._v(\"class\")\n            ]),\n            _vm._v(\" \"),\n            _c(\"span\", { pre: true, attrs: { class: \"token class-name\" } }, [\n              _vm._v(\"Demo\")\n            ]),\n            _vm._v(\" \"),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\"{\")\n            ]),\n            _vm._v(\"\\n    \"),\n            _c(\"span\", { pre: true, attrs: { class: \"token keyword\" } }, [\n              _vm._v(\"public\")\n            ]),\n            _vm._v(\" \"),\n            _c(\"span\", { pre: true, attrs: { class: \"token keyword\" } }, [\n              _vm._v(\"static\")\n            ]),\n            _vm._v(\" \"),\n            _c(\"span\", { pre: true, attrs: { class: \"token keyword\" } }, [\n              _vm._v(\"void\")\n            ]),\n            _vm._v(\" \"),\n            _c(\"span\", { pre: true, attrs: { class: \"token function\" } }, [\n              _vm._v(\"main\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\"(\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token class-name\" } }, [\n              _vm._v(\"String\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\"[\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\"]\")\n            ]),\n            _vm._v(\" args\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\")\")\n            ]),\n            _vm._v(\" \"),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\"{\")\n            ]),\n            _vm._v(\"\\n        \"),\n            _c(\"span\", { pre: true, attrs: { class: \"token class-name\" } }, [\n              _vm._v(\"System\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\".\")\n            ]),\n            _vm._v(\"out\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\".\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token function\" } }, [\n              _vm._v(\"println\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\"(\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token string\" } }, [\n              _vm._v('\"Hello, world!\"')\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\")\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\";\")\n            ]),\n            _vm._v(\"\\n    \"),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\"}\")\n            ]),\n            _vm._v(\"\\n\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\"}\")\n            ]),\n            _vm._v(\"\\n\")\n          ])\n        ])\n      ]),\n      _c(\"div\", { staticClass: \"warning custom-block\" }, [\n        _c(\"p\", { staticClass: \"custom-block-title\" }, [_vm._v(\"注意\")]),\n        _vm._v(\" \"),\n        _c(\"ul\", [\n          _c(\"li\", [\n            _vm._v(\"Java 程序必须写到 \"),\n            _c(\"code\", [_vm._v(\".java\")]),\n            _vm._v(\" 文件中\")\n          ]),\n          _vm._v(\" \"),\n          _c(\"li\", [\n            _c(\"code\", [_vm._v(\".class\")]),\n            _vm._v(\" 文件名对应类名。每一个类在编译后会生成一个对应的 \"),\n            _c(\"code\", [_vm._v(\".class\")]),\n            _vm._v(\" 文件\")\n          ]),\n          _vm._v(\" \"),\n          _c(\"li\", [\n            _vm._v(\"当一个类用 \"),\n            _c(\"code\", [_vm._v(\"public\")]),\n            _vm._v(\" 修饰时，这个类被称为\"),\n            _c(\"strong\", [_vm._v(\"公共类\")]),\n            _vm._v(\"。公共类要求和 Java 文件名完全一致\")\n          ])\n        ])\n      ]),\n      _vm._v(\" \"),\n      _c(\"h2\", { attrs: { id: \"命令行下的操作\" } }, [\n        _c(\n          \"a\",\n          {\n            staticClass: \"header-anchor\",\n            attrs: { href: \"#命令行下的操作\", \"aria-hidden\": \"true\" }\n          },\n          [_vm._v(\"#\")]\n        ),\n        _vm._v(\" 命令行下的操作\")\n      ]),\n      _vm._v(\" \"),\n      _c(\"p\", [\n        _vm._v(\"编译当前 Java 文件使用命令\"),\n        _c(\"code\", [_vm._v(\"javac\")]),\n        _vm._v(\"，完整命令：\"),\n        _c(\"br\"),\n        _vm._v(\" \"),\n        _c(\"strong\", [_vm._v(\"Input\")])\n      ]),\n      _vm._v(\" \"),\n      _c(\"div\", { staticClass: \"language- extra-class\" }, [\n        _c(\"pre\", { pre: true, attrs: { class: \"language-text\" } }, [\n          _c(\"code\", [\n            _vm._v(\"javac -d 编译完成后存放路径 要编译的.java文件\\n\")\n          ])\n        ])\n      ]),\n      _c(\"br\"),\n      _vm._v(\" \"),\n      _c(\"p\", [\n        _vm._v(\"存在类依赖时使用\"),\n        _c(\"code\", [_vm._v(\"java -cp\")]),\n        _vm._v(\"来命令指定依赖路径，完整命令：\"),\n        _c(\"br\"),\n        _vm._v(\" \"),\n        _c(\"strong\", [_vm._v(\"Input\")])\n      ]),\n      _vm._v(\" \"),\n      _c(\"div\", { staticClass: \"language- extra-class\" }, [\n        _c(\"pre\", { pre: true, attrs: { class: \"language-text\" } }, [\n          _c(\"code\", [\n            _vm._v(\"java -cp .class文件的存放路径 .class文件的文件名\\n\")\n          ])\n        ])\n      ]),\n      _c(\"br\"),\n      _vm._v(\" \"),\n      _c(\"p\", [\n        _vm._v(\"生成 JavaDoc使用命令\"),\n        _c(\"code\", [_vm._v(\"javadoc -d\")]),\n        _vm._v(\"，完整命令：\"),\n        _c(\"br\"),\n        _vm._v(\" \"),\n        _c(\"strong\", [_vm._v(\"Input\")])\n      ]),\n      _vm._v(\" \"),\n      _c(\"div\", { staticClass: \"language- extra-class\" }, [\n        _c(\"pre\", { pre: true, attrs: { class: \"language-text\" } }, [\n          _c(\"code\", [_vm._v(\"javadoc -d 文档生成路径 编译的.java文件\\n\")])\n        ])\n      ]),\n      _c(\"h2\", { attrs: { id: \"内存管理概论\" } }, [\n        _c(\n          \"a\",\n          {\n            staticClass: \"header-anchor\",\n            attrs: { href: \"#内存管理概论\", \"aria-hidden\": \"true\" }\n          },\n          [_vm._v(\"#\")]\n        ),\n        _vm._v(\" 内存管理概论\")\n      ]),\n      _vm._v(\" \"),\n      _c(\"h3\", { attrs: { id: \"内存分区\" } }, [\n        _c(\n          \"a\",\n          {\n            staticClass: \"header-anchor\",\n            attrs: { href: \"#内存分区\", \"aria-hidden\": \"true\" }\n          },\n          [_vm._v(\"#\")]\n        ),\n        _vm._v(\" 内存分区\")\n      ]),\n      _vm._v(\" \"),\n      _c(\"p\", [\n        _c(\"img\", {\n          attrs: {\n            src: \"/img/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86.jpg\",\n            alt: \"内存分区\"\n          }\n        })\n      ]),\n      _vm._v(\" \"),\n      _c(\"ul\", [\n        _c(\"li\", [\n          _c(\"p\", [\n            _vm._v(\"寄存器\"),\n            _c(\"br\"),\n            _vm._v(\"\\n负责程序计数和任务调度\")\n          ])\n        ]),\n        _vm._v(\" \"),\n        _c(\"li\", [\n          _c(\"p\", [_vm._v(\"本地方法栈\"), _c(\"br\"), _vm._v(\"\\n存储本地方法\")])\n        ]),\n        _vm._v(\" \"),\n        _c(\"li\", [\n          _c(\"p\", [\n            _vm._v(\"栈内存\"),\n            _c(\"br\"),\n            _vm._v(\"\\n执行代码块，存储局部变量\")\n          ])\n        ]),\n        _vm._v(\" \"),\n        _c(\"li\", [\n          _c(\"p\", [\n            _vm._v(\"堆内存\"),\n            _c(\"br\"),\n            _vm._v(\"\\n存储对象（对象生命周期结束后被\"),\n            _c(\"code\", [_vm._v(\"GC\")]),\n            _vm._v(\"回收）\")\n          ])\n        ]),\n        _vm._v(\" \"),\n        _c(\"li\", [\n          _c(\"p\", [\n            _vm._v(\"方法区\"),\n            _c(\"br\"),\n            _vm._v(\"\\n存储类的信息，一旦存入不再移除\"),\n            _c(\"br\"),\n            _vm._v(\"\\n方法区溢出会报\"),\n            _c(\"code\", [_vm._v(\"OutOfMemoryError\")]),\n            _vm._v(\"错误\"),\n            _c(\"br\"),\n            _vm._v(\"\\n其中：\")\n          ]),\n          _vm._v(\" \"),\n          _c(\"ul\", [\n            _c(\"li\", [\n              _c(\"p\", [\n                _vm._v(\"静态区\"),\n                _c(\"br\"),\n                _vm._v(\"\\n存储静态属性和静态方法\"),\n                _c(\"br\"),\n                _vm._v(\"\\n静态属性存储在此区后自动赋默认值\")\n              ])\n            ]),\n            _vm._v(\" \"),\n            _c(\"li\", [\n              _c(\"p\", [\n                _vm._v(\"静态常量池\"),\n                _c(\"br\"),\n                _vm._v(\"\\n存储类成员属性和成员方法信息\")\n              ])\n            ]),\n            _vm._v(\" \"),\n            _c(\"li\", [\n              _c(\"p\", [\n                _vm._v(\"运行时常量池\"),\n                _c(\"br\"),\n                _vm._v(\"\\n存储计算机常量和被\"),\n                _c(\"code\", [_vm._v(\"final\")]),\n                _vm._v(\"修饰的常量副本\")\n              ])\n            ])\n          ])\n        ])\n      ]),\n      _vm._v(\" \"),\n      _c(\"h3\", { attrs: { id: \"垃圾分代回收机制\" } }, [\n        _c(\n          \"a\",\n          {\n            staticClass: \"header-anchor\",\n            attrs: { href: \"#垃圾分代回收机制\", \"aria-hidden\": \"true\" }\n          },\n          [_vm._v(\"#\")]\n        ),\n        _vm._v(\" 垃圾分代回收机制\")\n      ]),\n      _vm._v(\" \"),\n      _c(\"p\", [\n        _vm._v(\n          \"对象在堆内存中存储。当对象在使用完成后，会在某个不定的时刻被垃圾回收器\"\n        ),\n        _c(\"code\", [_vm._v(\"GC\")]),\n        _vm._v(\"解析。\"),\n        _c(\"br\"),\n        _vm._v(\"\\n值得注意的是：\"),\n        _c(\"strong\", [_vm._v(\"垃圾回收过程无法手动控制\")]),\n        _vm._v(\"。\")\n      ]),\n      _vm._v(\" \"),\n      _c(\"ul\", [\n        _c(\"li\", [\n          _c(\"p\", [\n            _vm._v(\"堆内存分为\"),\n            _c(\"strong\", [_vm._v(\"新生代区\")]),\n            _vm._v(\"和\"),\n            _c(\"strong\", [_vm._v(\"老年代区\")]),\n            _vm._v(\"。\")\n          ])\n        ]),\n        _vm._v(\" \"),\n        _c(\"li\", [\n          _c(\"p\", [\n            _vm._v(\"新生代区分为\"),\n            _c(\"strong\", [_vm._v(\"伊甸园区\")]),\n            _vm._v(\"和\"),\n            _c(\"strong\", [_vm._v(\"幸存区\")]),\n            _vm._v(\"。\")\n          ])\n        ]),\n        _vm._v(\" \"),\n        _c(\"li\", [\n          _c(\"p\", [\n            _vm._v(\n              \"一个新创建的对象会被生成在伊甸园区，若在伊甸园区的对象经过一次回收过程仍然存活，则被移动到幸存区。\"\n            )\n          ])\n        ]),\n        _vm._v(\" \"),\n        _c(\"li\", [\n          _c(\"p\", [\n            _vm._v(\n              \"幸存区的回收扫描频率略低于伊甸园区。在幸存区经过多次扫描，若对象仍然存活，则被移动到老年代区。\"\n            )\n          ])\n        ]),\n        _vm._v(\" \"),\n        _c(\"li\", [\n          _c(\"p\", [_vm._v(\"老年代区的回收扫描频率会远远低于新生代区。\")])\n        ]),\n        _vm._v(\" \"),\n        _c(\"li\", [\n          _c(\"p\", [\n            _vm._v(\"当老年代区中的对象被回收时，会导致程序卡顿甚至崩溃。\")\n          ])\n        ]),\n        _vm._v(\" \"),\n        _c(\"li\", [\n          _c(\"p\", [\n            _vm._v(\"发生在新生代区的垃圾回收称为\"),\n            _c(\"strong\", [_vm._v(\"初代回收 (Minor GC)\")]),\n            _vm._v(\".\")\n          ])\n        ]),\n        _vm._v(\" \"),\n        _c(\"li\", [\n          _c(\"p\", [\n            _vm._v(\"发生在老年代区的垃圾回收称为\"),\n            _c(\"strong\", [_vm._v(\"完全回收 (Full GC)\")]),\n            _vm._v(\".\")\n          ])\n        ])\n      ])\n    ])\n  }\n]\nrender._withStripped = true\n\nexport { render, staticRenderFns }"]}