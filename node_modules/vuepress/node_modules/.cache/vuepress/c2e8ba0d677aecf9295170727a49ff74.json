{"remainingRequest":"C:\\Users\\momg\\Documents\\Workspace\\Github\\localhost-8080.github.io\\node_modules\\vue-loader\\lib\\index.js??ref--1-1!C:\\Users\\momg\\Documents\\Workspace\\Github\\localhost-8080.github.io\\node_modules\\vuepress\\lib\\webpack\\markdownLoader.js??ref--1-2!C:\\Users\\momg\\Documents\\Workspace\\Github\\localhost-8080.github.io\\docs\\java\\面向对象.md?vue&type=template&id=14d2c542&","dependencies":[{"path":"C:\\Users\\momg\\Documents\\Workspace\\Github\\localhost-8080.github.io\\docs\\java\\面向对象.md","mtime":1554879283860},{"path":"C:\\Users\\momg\\Documents\\WORKSPACE\\Github\\localhost-8080.github.io\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1546868327989},{"path":"C:\\Users\\momg\\Documents\\Workspace\\Github\\localhost-8080.github.io\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1558414119184},{"path":"C:\\Users\\momg\\Documents\\Workspace\\Github\\localhost-8080.github.io\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1546868327989},{"path":"C:\\Users\\momg\\Documents\\Workspace\\Github\\localhost-8080.github.io\\node_modules\\vue-loader\\lib\\index.js","mtime":1558414119184},{"path":"C:\\Users\\momg\\Documents\\Workspace\\Github\\localhost-8080.github.io\\node_modules\\vuepress\\lib\\webpack\\markdownLoader.js","mtime":1558414126042}],"contextDependencies":[],"result":["\n<div class=\"content\"><h1 id=\"面向对象\"><a class=\"header-anchor\" href=\"#面向对象\" aria-hidden=\"true\">#</a> 面向对象</h1>\n<h2 id=\"概述\"><a class=\"header-anchor\" href=\"#概述\" aria-hidden=\"true\">#</a> 概述</h2>\n<h3 id=\"面向过程\"><a class=\"header-anchor\" href=\"#面向过程\" aria-hidden=\"true\">#</a> 面向过程</h3>\n<p>面向过程注重过程，强调完成这个过程的具体动作。<br>\n其设计理念是<router-link to=\"./语法.html/#顺序结构\">自顶向下，逐步求精</router-link>的。</p>\n<h3 id=\"面向对象-2\"><a class=\"header-anchor\" href=\"#面向对象-2\" aria-hidden=\"true\">#</a> 面向对象</h3>\n<p>面向对象 (Object-Oriented) 注重对象，当我们拥有这个对象时，我们就拥有了这个对象所具有的一切功能。<br>\n面向对象技术最大的三个特征是：<strong>封装</strong>，<strong>继承</strong>和<strong>多态</strong>。</p>\n<h2 id=\"类和对象\"><a class=\"header-anchor\" href=\"#类和对象\" aria-hidden=\"true\">#</a> 类和对象</h2>\n<h3 id=\"类\"><a class=\"header-anchor\" href=\"#类\" aria-hidden=\"true\">#</a> 类</h3>\n<p>类 (Class) 是 Java 程序设计语言的基础。<br>\n类似于显示生活中“种类”的概念，Java 中的类也是一种对某类事物进行抽象和归并。<br>\n我们对某类事物进行抽象分析，去粗取精，由表及里，判断出这类事物最本质的特征，并用 Java 中预定的手法进行表述，就形成了一个类。<br>\n一个类包含两大内容：<strong>属性</strong>和<strong>方法</strong>（也称“<strong>成员变量</strong>”和“<strong>成员方法</strong>”）。</p>\n<div class=\"tip custom-block\"><p class=\"custom-block-title\">成员变量和局部变量的区别</p>\n<ol>\n<li>\n<p>定义位置不同：</p>\n<ul>\n<li>\n<p>成员变量是定义在类内方法外</p>\n</li>\n<li>\n<p>局部变量是定义在方法或者语句内部</p>\n</li>\n</ul>\n</li>\n<li>\n<p>作用域不同：</p>\n<ul>\n<li>\n<p>成员变量作用域整个类</p>\n</li>\n<li>\n<p>局部变量只能在定义的方法或者语句内部使用</p>\n</li>\n</ul>\n</li>\n<li>\n<p>内部存储位置不同：</p>\n<ul>\n<li>\n<p>成员变量存在堆内存中，并且在堆内存中自动的赋予默认值</p>\n</li>\n<li>\n<p>局部变量是存储在栈内存中，不会自动给值</p>\n</li>\n</ul>\n</li>\n<li>\n<p>生命周期不同：</p>\n<ul>\n<li>\n<p>成员变量是随着对象的创建而加载到堆内存中，随着对象的回收而释放;</p>\n</li>\n<li>\n<p>局部变量在方法或者语句执行的时候才会创建，随着方法或者语句的结束而立即移除栈内存</p>\n</li>\n</ul>\n</li>\n</ol>\n</div>\n<h3 id=\"对象\"><a class=\"header-anchor\" href=\"#对象\" aria-hidden=\"true\">#</a> 对象</h3>\n<p>对象 (Object) 是对类的实例化。<br>\n我们可以通过某类的具体对象来进行具体操作。<br>\n使用<code>new</code>关键字可以创建新的对象，使用<code>.</code>运算符获取并使用该对象所具有的方法。<br>\n对象在程序中传递时，传递的是引用地址而不是数据本身。</p>\n<h3 id=\"this\"><a class=\"header-anchor\" href=\"#this\" aria-hidden=\"true\">#</a> <code>this</code></h3>\n<ul>\n<li>\n<p><code>this</code>关键字</p>\n<ul>\n<li>\n<p><code>this</code>关键字可以表述一个对当前对象自身的引用。</p>\n</li>\n<li>\n<p>在本类中使用<code>this</code>可以调用本类的<strong>非静态方法</strong>和<strong>非静态属性</strong>。</p>\n</li>\n</ul>\n</li>\n<li>\n<p><code>this()</code>语句</p>\n<ul>\n<li>\n<p>表示在本类的构造方法中调用<strong>本类</strong>的其他的对应形式的构造函数。</p>\n</li>\n<li>\n<p>必须放在构造函数的第一行。</p>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"super\"><a class=\"header-anchor\" href=\"#super\" aria-hidden=\"true\">#</a> <code>super</code></h3>\n<ul>\n<li>\n<p><code>super</code>关键字</p>\n<ul>\n<li>\n<p><code>super</code>关键字用以表示对父类对象的引用。</p>\n</li>\n<li>\n<p>表示在子类中调用父类中的方法和属性。</p>\n</li>\n</ul>\n</li>\n<li>\n<p><code>super()</code>语句</p>\n<ul>\n<li>\n<p>表示子类的构造方法中，调用父类中对应形式的构造方法。</p>\n</li>\n<li>\n<p>必须写在子类构造函数的第一行。</p>\n</li>\n<li>\n<p>每一个子类的构造函数都直接或间接的含有<code>super()</code>语句。</p>\n</li>\n<li>\n<p>如果父类中没有提供无参构造，那么此时子类的构造函数中必须手动添加一个<code>super()</code>语句。</p>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"方法\"><a class=\"header-anchor\" href=\"#方法\" aria-hidden=\"true\">#</a> 方法</h2>\n<p>方法 (Method) , 也称为函数。<br>\n为实现代码复用，需要将代码进行封装。这种封装的形式就是方法。<br>\n方法在定义好之后，必须明确返回值类型。若方法有明确的返回值类型，还要确保方法有返回值。</p>\n<p><strong>作用</strong>：</p>\n<ul>\n<li>\n<p>提高代码复用性。</p>\n</li>\n<li>\n<p>使代码结构更加清晰。</p>\n</li>\n<li>\n<p>便于模块化开发。</p>\n</li>\n</ul>\n<p><strong>方法签名</strong>：一个方法由其修饰符、返回值类型、方法名和形式参数唯一确定，这一组数据称为方法签名。</p>\n<h3 id=\"构造方法\"><a class=\"header-anchor\" href=\"#构造方法\" aria-hidden=\"true\">#</a> 构造方法</h3>\n<p>与类同名且没有返回值类型。<br>\n可以被重载。<br>\n构造函数中可以存在<code>return</code>语句，用于规避不合理的数据。<br>\n<strong>作用</strong>：用于创建对象（标识对象创建的开始和结束）</p>\n<h3 id=\"方法的使用\"><a class=\"header-anchor\" href=\"#方法的使用\" aria-hidden=\"true\">#</a> 方法的使用</h3>\n<ul>\n<li>\n<p>方法递归<br>\n<strong>核心</strong>：方法调用自己本身</p>\n<div class=\"warning custom-block\"><p class=\"custom-block-title\">注意</p>\n<p>需要控制好结束条件，若递归层数太深，则出现栈溢出错误。</p>\n</div>\n</li>\n<li>\n<p>方法重载 (Method Overload)<br>\n详见<a href=\"#%E5%A4%9A%E6%80%81\">多态</a>。</p>\n</li>\n<li>\n<p>方法覆盖 (Method Override)<br>\n详见<a href=\"#%E5%A4%9A%E6%80%81\">多态</a>。</p>\n</li>\n</ul>\n<div class=\"warning custom-block\"><p class=\"custom-block-title\">注意</p>\n<p>在传递参数的时候，对于基本类型而言，传递的实际值；对于引用类型而言，传递的是地址。<br>\n例如在传递数组对象时，只要地址不发生改变，方法中的一切变化会作用于原数组。</p>\n</div>\n<h2 id=\"代码块\"><a class=\"header-anchor\" href=\"#代码块\" aria-hidden=\"true\">#</a> 代码块</h2>\n<h3 id=\"构造代码块\"><a class=\"header-anchor\" href=\"#构造代码块\" aria-hidden=\"true\">#</a> 构造代码块</h3>\n<ul>\n<li>\n<p>定义在类内。</p>\n</li>\n<li>\n<p>也称“初始化代码块”，在创建对象时执行构造方法之前先执行。</p>\n</li>\n<li>\n<p>用于完成一些初始化的操作。</p>\n</li>\n</ul>\n<h3 id=\"局部代码块\"><a class=\"header-anchor\" href=\"#局部代码块\" aria-hidden=\"true\">#</a> 局部代码块</h3>\n<ul>\n<li>\n<p>定义在方法或代码块中。</p>\n</li>\n<li>\n<p>限制变量的生命周期和使用范围。</p>\n</li>\n<li>\n<p>可以提高内存的利用率。</p>\n</li>\n</ul>\n<h2 id=\"包\"><a class=\"header-anchor\" href=\"#包\" aria-hidden=\"true\">#</a> 包</h2>\n<p>包是类的容器，提供了解决命名空间冲突的方案。</p>\n<h3 id=\"包的声明\"><a class=\"header-anchor\" href=\"#包的声明\" aria-hidden=\"true\">#</a> 包的声明</h3>\n<ul>\n<li>\n<p>使用<code>package</code>关键字声明定义一个包。</p>\n</li>\n<li>\n<p>一个<code>.java</code>文件只允许存在一个<code>package</code>语句。</p>\n</li>\n<li>\n<p>包的声明必须放在<code>.java</code>文件的首行。</p>\n</li>\n</ul>\n<h3 id=\"包的导入\"><a class=\"header-anchor\" href=\"#包的导入\" aria-hidden=\"true\">#</a> 包的导入</h3>\n<ul>\n<li>\n<p>使用<code>import</code>关键字来导入别的包。</p>\n</li>\n<li>\n<p><code>*</code>为通配符，表示导入该包下所有类（不包括子包中的类）。</p>\n</li>\n</ul>\n<h3 id=\"jdk-常用包\"><a class=\"header-anchor\" href=\"#jdk-常用包\" aria-hidden=\"true\">#</a> JDK 常用包</h3>\n<ul>\n<li>\n<p><code>java.lang</code>：核心包，在程序启动时自动加载到方法区，不需要手动导入</p>\n</li>\n<li>\n<p><code>java.util</code>：工具包，存放简化操作的工具类</p>\n</li>\n<li>\n<p><code>java.io</code>：数据传输</p>\n</li>\n<li>\n<p><code>java.net</code>：网络传输</p>\n</li>\n<li>\n<p><code>java.math</code>：数学运算</p>\n</li>\n<li>\n<p><code>java.sql</code>：数据库相关</p>\n</li>\n<li>\n<p><code>java.awt</code>：图形用户界面</p>\n</li>\n<li>\n<p><code>java.security</code>：数据安全</p>\n</li>\n<li>\n<p><code>javax.xxx</code>：扩展</p>\n</li>\n<li>\n<p><code>org.xxx</code>：第三方厂商、开源社区提供的包</p>\n</li>\n</ul>\n<div class=\"warning custom-block\"><p class=\"custom-block-title\">注意</p>\n<ul>\n<li>\n<p>包名不能以<code>java</code>、<code>javax</code>或者<code>org</code>开头。</p>\n</li>\n<li>\n<p>同包，或<code>lang</code>包下的类不使用<code>import</code>语句导入</p>\n</li>\n</ul>\n</div>\n<h2 id=\"封装\"><a class=\"header-anchor\" href=\"#封装\" aria-hidden=\"true\">#</a> 封装</h2>\n<p>将一个事物的相关信息聚集在一个逻辑单元内部的机制就是封装。</p>\n<p><strong>形式</strong>：方法、属性私有化（类的封装）、内部类等。</p>\n<p><strong>优点</strong>：提高复用性和安全性，使代码结构更加紧密。</p>\n<h2 id=\"继承\"><a class=\"header-anchor\" href=\"#继承\" aria-hidden=\"true\">#</a> 继承</h2>\n<p>对于两个类 A 和 B 来说，它们之间的关系是：B 由 A 派生而来（对于 B 类来说，它拥有 A 类的所有属性和方法），则可以说 B 类继承自 A 类。</p>\n<h3 id=\"形式\"><a class=\"header-anchor\" href=\"#形式\" aria-hidden=\"true\">#</a> 形式</h3>\n<p>使用<code>extends</code>关键字实现继承。<br>\nJava 仅支持单继承（一个子类只能有一个父类）。</p>\n<h3 id=\"单继承与多继承\"><a class=\"header-anchor\" href=\"#单继承与多继承\" aria-hidden=\"true\">#</a> 单继承与多继承</h3>\n<ul>\n<li>\n<p>单继承<br>\n子类只能有一个父类的继承形式。</p>\n<p><strong>优点</strong>：</p>\n<ul>\n<li>\n<p>可以提高代码的复用性</p>\n</li>\n<li>\n<p>可以避免方法调用的混乱，提高了方法调用的安全性</p>\n</li>\n</ul>\n</li>\n<li>\n<p>多继承<br>\n子类可以拥有多个父类的继承形式。</p>\n<p><strong>优点</strong>：</p>\n<ul>\n<li>代码的复用性上要优于单继承</li>\n</ul>\n</li>\n<li>\n<p>举例</p>\n<ul>\n<li>\n<p><code>iPhone 类</code>仅继承自<code>智能设备类</code>。（单继承）</p>\n<p><img src=\"/img/%E5%8D%95%E7%BB%A7%E6%89%BF.jpg\" alt=\"单继承\"></p>\n</li>\n<li>\n<p><code>Apple Watch 类</code>同时继承自<code>时钟类</code>和<code>只能设备类</code>。（多继承）</p>\n<p><img src=\"/img/%E5%A4%9A%E7%BB%A7%E6%89%BF.jpg\" alt=\"多继承\"></p>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"直接继承与间接继承\"><a class=\"header-anchor\" href=\"#直接继承与间接继承\" aria-hidden=\"true\">#</a> 直接继承与间接继承</h3>\n<ul>\n<li>\n<p>直接继承<br>\nB 类直接派生于 A 类，称直接继承。</p>\n</li>\n<li>\n<p>间接继承\nB 类直接派生于 A类，C 类直接派生于 B 类。则称 C 类间接继承于 A 类。<br>\n<img src=\"/img/%E9%97%B4%E6%8E%A5%E7%BB%A7%E6%89%BF.jpg\" alt=\"间接继承\"></p>\n</li>\n</ul>\n<div class=\"tip custom-block\"><p class=\"custom-block-title\">特别地</p>\n<p>子类继承自父类时，父类中这些内容子类不可见：</p>\n<ul>\n<li>\n<p><code>private</code></p>\n</li>\n<li>\n<p>代码块</p>\n</li>\n<li>\n<p>构造方法</p>\n</li>\n</ul>\n</div>\n<h2 id=\"多态\"><a class=\"header-anchor\" href=\"#多态\" aria-hidden=\"true\">#</a> 多态</h2>\n<ul>\n<li>\n<p>当众多对象接收到同一个消息后，可以产生不同的响应效果，这种现象称为多态。</p>\n</li>\n<li>\n<p>多态性依托于继承性。</p>\n</li>\n<li>\n<p>多态主要针对的是对象具有的行为，而不是属性。</p>\n</li>\n<li>\n<p>可以提高代码的灵活性，配合反射实现解耦。</p>\n</li>\n</ul>\n<h3 id=\"编译时多态\"><a class=\"header-anchor\" href=\"#编译时多态\" aria-hidden=\"true\">#</a> 编译时多态</h3>\n<p>方法重载 (Method Overload)<br>\n是<strong>行为多态</strong>。<br>\n发生在同一个类中，方法名一致而参数列表不同。和修饰符、返回值类型、异常无关。</p>\n<h3 id=\"运行时多态\"><a class=\"header-anchor\" href=\"#运行时多态\" aria-hidden=\"true\">#</a> 运行时多态</h3>\n<ul>\n<li>\n<p>向上造型</p>\n<ul>\n<li>\n<p>是<strong>对象多态</strong>。</p>\n</li>\n<li>\n<p>父类引用指向子类对象。<br>\n代码高亮标出。</p>\n<p><strong>Input</strong></p>\n<!--beforebegin--><div class=\"language-java extra-class\"><!--afterbegin--><div class=\"highlight-lines\"><br><br><br><br><br><br><br><br><br><br><div class=\"highlighted\">&nbsp;</div><br><br><br><br><br></div><pre v-pre class=\"language-java\"><code><span class=\"token keyword\">class</span> <span class=\"token class-name\">Super</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Sub</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Super</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">App</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> args<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">Super</span> <span class=\"token keyword\">super</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Sub</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 向上造型</span>\n\n    <span class=\"token class-name\">Sub</span> sub <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Sub</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 向下造型</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre><!--beforeend--></div><!--afterend--><div class=\"danger custom-block\"><p class=\"custom-block-title\">注意</p>\n<p>向下造型是不允许的，上面的例子会通过编译器检测，但运行后会抛出异常：<br>\n<strong>Output</strong></p>\n<!--beforebegin--><div class=\"language- extra-class\"><!--afterbegin--><pre v-pre class=\"language-text\"><code>java.lang.ClassCastException: class Super cannot be cast to class Sub\n</code></pre>\n<!--beforeend--></div><!--afterend--></div>\n</li>\n<li>\n<p>使用向上造型时，编译期<strong>只检查两个类之间的关系</strong>而<strong>不检查具体用哪个类创建对象</strong></p>\n</li>\n<li>\n<p>对象方法看父类，方法内容看子类。</p>\n</li>\n</ul>\n</li>\n<li>\n<p>方法覆盖 (Method Override)</p>\n<ul>\n<li>\n<p>又称方法重写，是<strong>行为多态</strong>。</p>\n</li>\n<li>\n<p>发生在父子类中，双方拥有方法签名完全一致的非静态方法。</p>\n</li>\n<li>\n<p>调用方法的时候，调用的是重写后的方法。</p>\n</li>\n</ul>\n<div class=\"warning custom-block\"><p class=\"custom-block-title\">注意</p>\n<ol>\n<li>\n<p>子类重写的方法<strong>权限修饰符需大于等于父类</strong>。</p>\n</li>\n<li>\n<p>关于返回值类型</p>\n<ul>\n<li>\n<p>若<strong>父类方法返回值类型是引用数据类型</strong>，则子类重写的方法的返回值类型是父类方法返回值类型的子类或其本身。</p>\n</li>\n<li>\n<p>若<strong>父类方法返回值类型是基本数据类型</strong>，则子类重写的方法返回值类型必须和父类方法相同。</p>\n</li>\n</ul>\n</li>\n<li>\n<p>子类抛出的异常需为父类异常的子类。</p>\n</li>\n</ol>\n</div>\n<p><strong>Input</strong></p>\n<!--beforebegin--><div class=\"language-java extra-class\"><!--afterbegin--><pre v-pre class=\"language-java\"><code><span class=\"token keyword\">class</span> <span class=\"token class-name\">A</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/**\n  * 方法 mA\n  * @return void\n  */</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">mA</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">B</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">A</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/**\n  * 方法 mB\n  * @return void\n  */</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">mB</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/**\n  * 方法 m\n  * @return B\n  */</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">C</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">B</span> <span class=\"token function\">m</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">D</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">C</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/**\n  * 方法 m\n  * @return A\n  */</span>\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">A</span> <span class=\"token function\">m</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 用C类声明，用D类创建对象</span>\n  <span class=\"token comment\">// 则对象c拥有返回值类型为B的方法m()</span>\n  <span class=\"token class-name\">C</span> c <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">D</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 用B类声明一个变量b，来接收方法的返回值</span>\n  <span class=\"token comment\">// 方法调用的是D类中的m()</span>\n  <span class=\"token comment\">// 由于D类中m()的返回值类型是A，故最终是用子类接收父类对象</span>\n  <span class=\"token class-name\">B</span> b <span class=\"token operator\">=</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">m</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 对象b无法调用B类中的mB()</span>\n  <span class=\"token comment\">// b.mB();</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--></li>\n</ul>\n<h2 id=\"权限修饰符\"><a class=\"header-anchor\" href=\"#权限修饰符\" aria-hidden=\"true\">#</a> 权限修饰符</h2>\n<ul>\n<li>Java 提供了<code>public</code>, <code>protected</code>, <code>默认</code>, <code>private</code>四种访问修饰符。</li>\n<li>通过访问修饰符来提高程序的安全性和可维护性。</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">修饰符</th>\n<th style=\"text-align:center\">本类中</th>\n<th style=\"text-align:center\">同包类中 (本包)</th>\n<th style=\"text-align:center\">子类中</th>\n<th style=\"text-align:center\">其他包中 (不同包中的所有类)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><code>public</code></td>\n<td style=\"text-align:center\">可以</td>\n<td style=\"text-align:center\">可以</td>\n<td style=\"text-align:center\">可以</td>\n<td style=\"text-align:center\">可以</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>protected</code></td>\n<td style=\"text-align:center\">可以</td>\n<td style=\"text-align:center\">可以</td>\n<td style=\"text-align:center\">可以</td>\n<td style=\"text-align:center\">不可以</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>默认</code></td>\n<td style=\"text-align:center\">可以</td>\n<td style=\"text-align:center\">可以</td>\n<td style=\"text-align:center\">同包可以</td>\n<td style=\"text-align:center\">不可以</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>private</code></td>\n<td style=\"text-align:center\">可以</td>\n<td style=\"text-align:center\">不可以</td>\n<td style=\"text-align:center\">不可以</td>\n<td style=\"text-align:center\">不可以</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"非权限修饰符\"><a class=\"header-anchor\" href=\"#非权限修饰符\" aria-hidden=\"true\">#</a> 非权限修饰符</h2>\n<h3 id=\"静态\"><a class=\"header-anchor\" href=\"#静态\" aria-hidden=\"true\">#</a> 静态</h3>\n<ul>\n<li>\n<p>Java 中使用<code>static</code>关键字来标识静态。</p>\n</li>\n<li>\n<p>可以使用静态来修饰变量、方法、内部类和代码块。</p>\n</li>\n</ul>\n<h4 id=\"静态变量\"><a class=\"header-anchor\" href=\"#静态变量\" aria-hidden=\"true\">#</a> 静态变量</h4>\n<ul>\n<li>\n<p>也称为<strong>类变量</strong>。</p>\n</li>\n<li>\n<p>随着类的加载而被加载到方法区中，在其内部自动赋<router-link to=\"./语法.html/#基本数据类型\">默认值</router-link>。</p>\n</li>\n<li>\n<p>静态变量优先于对象而存在，故静态变量可以不通过对象，直接通过类来调用（通过对象调用也是可以被理解的）。</p>\n</li>\n<li>\n<p>该类所产生的所有对象实际上保存该静态变量在静态区中的地址。</p>\n</li>\n<li>\n<p>静态变量被该类的所有对象所共享。</p>\n</li>\n</ul>\n<p><img src=\"/img/%E9%9D%99%E6%80%81%E5%86%85%E5%AD%98.png\" alt=\"静态内存\"></p>\n<p><strong>路标 -&gt;</strong> <router-link to=\"./#内存分区\">Java 内存分区</router-link>。</p>\n<div class=\"warning custom-block\"><p class=\"custom-block-title\">注意</p>\n<ul>\n<li>\n<p>静态变量<strong>不能</strong>定义在构造代码块中</p>\n</li>\n<li>\n<p>在构造代码块中<strong>可以</strong>对静态变量赋值</p>\n</li>\n</ul>\n<p><strong>Input</strong></p>\n<!--beforebegin--><div class=\"language-java extra-class\"><!--afterbegin--><pre v-pre class=\"language-java\"><code><span class=\"token keyword\">class</span> <span class=\"token class-name\">OneClass</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> iSta<span class=\"token punctuation\">;</span>\n\n  <span class=\"token punctuation\">{</span>\n    iSta <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<!--beforeend--></div><!--afterend--></div>\n<h4 id=\"静态方法\"><a class=\"header-anchor\" href=\"#静态方法\" aria-hidden=\"true\">#</a> 静态方法</h4>\n<ul>\n<li>\n<p>也称为<strong>类方法</strong>。</p>\n</li>\n<li>\n<p>在类加载的时候加载到方法区中的静态区。只存储在静态区，方法被调用时在栈内存中执行。</p>\n</li>\n<li>\n<p>静态方法<strong>先于对象而存在</strong>，静态方法可通过类名或对象调用，不能直接使用本类中的非静态方法和非静态属性。</p>\n</li>\n</ul>\n<div class=\"warning custom-block\"><p class=\"custom-block-title\">注意</p>\n<ul>\n<li>\n<p>静态方法中<strong>不能</strong>定义静态变量</p>\n</li>\n<li>\n<p>静态方法中<strong>不能</strong>直接调用类中的非静态方法</p>\n</li>\n<li>\n<p><code>main()</code>中<strong>不能</strong>使用<code>this</code>或<code>super</code></p>\n</li>\n<li>\n<p>静态方法<strong>不能</strong>重写</p>\n</li>\n<li>\n<p>父子类中<strong>可以</strong>存在方法签名一致的静态方法\n父子类中存在方法签名完全一致的方法，两者或均被<code>static</code>修饰或都不被<code>static</code>修饰</p>\n</li>\n<li>\n<p>静态方法<strong>可以</strong>被继承</p>\n</li>\n<li>\n<p>类只加载一次，只在第一次使用时加载到方法去，加载之后不再移除</p>\n</li>\n</ul>\n</div>\n<h4 id=\"静态代码块\"><a class=\"header-anchor\" href=\"#静态代码块\" aria-hidden=\"true\">#</a> 静态代码块</h4>\n<ul>\n<li>\n<p>类被第一次真正使用（创建对象/调用方法）时执行一次</p>\n</li>\n<li>\n<p>先父后子，先静后动</p>\n</li>\n</ul>\n<p><strong>Input</strong></p>\n<!--beforebegin--><div class=\"language-java extra-class\"><!--afterbegin--><pre v-pre class=\"language-java\"><code><span class=\"token keyword\">class</span> <span class=\"token class-name\">OneClass</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Warning: Variable 'i' initializer '5' is redundan</span>\n\n  <span class=\"token keyword\">static</span> <span class=\"token punctuation\">{</span>\n    i <span class=\"token operator\">=</span> <span class=\"token number\">7</span><span class=\"token punctuation\">;</span>\n    i <span class=\"token operator\">+=</span> <span class=\"token number\">7</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token class-name\">Class</span> <span class=\"token class-name\">AnotherClass</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">static</span> <span class=\"token punctuation\">{</span>\n    i <span class=\"token operator\">=</span> <span class=\"token number\">7</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Warning: The value 7 assigned to 'i' is never used </span>\n    i <span class=\"token operator\">+=</span> <span class=\"token number\">7</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Error: Illegal forward reference</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><ul>\n<li>\n<p>在<code>OneClass</code>中<br>\n首先编译<code>int i</code>，后续针对<code>i</code>的操作有效。</p>\n</li>\n<li>\n<p>在<code>AnotherClass</code>中<br>\n编译到<code>i = 7;</code>时检查之前代码中是否定义过变量<code>i</code>，若上文不存在该变量则将其暂时标记为一个成员变量。<br>\n此时这个变量<code>i</code>不真实存在，后续对<code>i</code>的操作无效。<br>\n直到找到与标记名称<code>i</code>一致的成员变量时，才会将标记的<code>i</code>真正赋值。</p>\n</li>\n</ul>\n<h3 id=\"最终\"><a class=\"header-anchor\" href=\"#最终\" aria-hidden=\"true\">#</a> 最终</h3>\n<p><code>final</code>关键字可以用来修饰数据（成员变量），方法（成员方法）和类。</p>\n<h4 id=\"常量\"><a class=\"header-anchor\" href=\"#常量\" aria-hidden=\"true\">#</a> 常量</h4>\n<p>当<code>final</code>修饰数据时，这个数据称为常量。<strong>定义后不可修改</strong>。</p>\n<div class=\"warning custom-block\"><p class=\"custom-block-title\">注意</p>\n<ul>\n<li>\n<p>成员常量<strong>需要在对象创建完成前进行赋初值，且只能赋值一次</strong>。</p>\n</li>\n<li>\n<p>若常量类型为<strong>基本数据类型，其实际值不可变</strong>；若常量类型为<strong>引用数据类型，其地址不可变</strong>。</p>\n</li>\n<li>\n<p>若常量是静态常量，<strong>需要在类加载之前进行赋值</strong>。</p>\n</li>\n</ul>\n</div>\n<h4 id=\"最终方法\"><a class=\"header-anchor\" href=\"#最终方法\" aria-hidden=\"true\">#</a> 最终方法</h4>\n<p>当<code>final</code>修饰方法时，这个方法称为最终方法。</p>\n<div class=\"warning custom-block\"><p class=\"custom-block-title\">注意</p>\n<p>最终方法<strong>不能被重写，可以被重载，可以被继承</strong>。</p>\n</div>\n<h4 id=\"最终类\"><a class=\"header-anchor\" href=\"#最终类\" aria-hidden=\"true\">#</a> 最终类</h4>\n<p>当<code>final</code>修饰类时，这个类称为最终类。</p>\n<div class=\"warning custom-block\"><p class=\"custom-block-title\">注意</p>\n<ul>\n<li>\n<p>最终类<strong>不能被继承</strong>。</p>\n</li>\n<li>\n<p>最终类<strong>不能拥有匿名内部类</strong>。</p>\n</li>\n</ul>\n</div>\n<h3 id=\"抽象\"><a class=\"header-anchor\" href=\"#抽象\" aria-hidden=\"true\">#</a> 抽象</h3>\n<h4 id=\"抽象方法\"><a class=\"header-anchor\" href=\"#抽象方法\" aria-hidden=\"true\">#</a> 抽象方法</h4>\n<ul>\n<li>\n<p>当需要子类存在一些名称一致但细节不同的方法时，可以在父类中事先声明出这些方法。</p>\n</li>\n<li>\n<p>此时的声明行为无需为其编写方法体，使用这种方式构成的方法称为<strong>抽象方法</strong>，使用关键字<code>abstract</code>修饰。</p>\n</li>\n</ul>\n<div class=\"warning custom-block\"><p class=\"custom-block-title\">注意</p>\n<ul>\n<li>\n<p>抽象方法所在类<strong>必须是抽象类</strong></p>\n</li>\n<li>\n<p>抽象方法<strong>必须被重写</strong>，子类继承抽象类后<strong>必须重写其中的抽象方法</strong></p>\n</li>\n<li>\n<p><strong>抽象方法之间可以重载</strong>（重载只关注方法名和参数列表）</p>\n</li>\n<li>\n<p>抽象方法的<strong>权限是<code>默认</code>，要求子类必须同包</strong></p>\n</li>\n</ul>\n</div>\n<div class=\"danger custom-block\"><p class=\"custom-block-title\">注意</p>\n<ul>\n<li>\n<p>抽象方法<strong>不能使用<code>static</code>修饰</strong>（静态方法隶属于类）</p>\n</li>\n<li>\n<p>抽象方法<strong>不能使用<code>final</code>修饰</strong>（最终方法无法被重写，不符合抽象方法的规则）</p>\n</li>\n<li>\n<p>抽象方法<strong>不能使用<code>private</code>修饰</strong>（造成子类不可见，进而无法重载）</p>\n</li>\n<li>\n<p><strong>最终类不能是抽象类</strong>（最终类无法被继承，进而其方法也无法被重载）</p>\n</li>\n</ul>\n</div>\n<h4 id=\"抽象类\"><a class=\"header-anchor\" href=\"#抽象类\" aria-hidden=\"true\">#</a> 抽象类</h4>\n<p>被<code>abstract</code>修饰的类称为抽象类。</p>\n<div class=\"warning custom-block\"><p class=\"custom-block-title\">注意</p>\n<ul>\n<li>\n<p>抽象类<strong>不能创建对象</strong></p>\n</li>\n<li>\n<p>抽象类中<strong>存在构造方法</strong></p>\n</li>\n<li>\n<p>抽象类中<strong>可以存在非抽象方法和属性</strong></p>\n</li>\n</ul>\n</div>\n<h2 id=\"接口\"><a class=\"header-anchor\" href=\"#接口\" aria-hidden=\"true\">#</a> 接口</h2>\n<ul>\n<li>\n<p>类似于类的引用类型。</p>\n</li>\n<li>\n<p>使用关键字<code>interface</code>表示</p>\n</li>\n<li>\n<p>接口中方法默认且只能为抽象方法<Badge type=\"error\" text=\"< Java SE 7.0\"/></p>\n<ul>\n<li>在接口中，使用<code>default</code>关键字修饰的方法可以拥有方法体<Badge text=\"Java SE 8.0 +\"/></li>\n</ul>\n</li>\n<li>\n<p>接口中的数据都为公共的静态常量（被<code>final</code>, <code>static</code>和<code>public</code>修饰的成员变量）</p>\n</li>\n</ul>\n<h3 id=\"接口的实现\"><a class=\"header-anchor\" href=\"#接口的实现\" aria-hidden=\"true\">#</a> 接口的实现</h3>\n<ul>\n<li>\n<p>和抽象类类似，接口也可以有具体化的实现，称为实现(implements)。</p>\n</li>\n<li>\n<p>使用关键字<code>implements</code>来使一个类变为目标接口的实现类。</p>\n<ul>\n<li>\n<p>当类成为某接口（们）的实现类后，要求实现接口中定义的所有抽象方法。</p>\n</li>\n<li>\n<p>一个类可以实现多个接口，不过可能会造成方法混乱。</p>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"接口的多重继承\"><a class=\"header-anchor\" href=\"#接口的多重继承\" aria-hidden=\"true\">#</a> 接口的多重继承</h3>\n<p><strong>接口可以多重继承</strong>，使用<code>extends</code>关键字来继承其他接口。</p>\n<div class=\"tip custom-block\"><p class=\"custom-block-title\">特别地</p>\n<p>对于引用数据类型的强制转换有：</p>\n<blockquote>\n<ul>\n<li>在进行强制类型转换时，编译器会检查两个类之间是否存在继承关系\n<ul>\n<li>\n<p>若存在继承关系，则编译时会通过，但运行时不一定</p>\n</li>\n<li>\n<p>若不存在继承关系，编译时会报错</p>\n</li>\n</ul>\n</li>\n</ul>\n<p>→ 详见<router-link to=\"./语法.html/#引用类型的强制类型转换\">引用类型的强制类型转换</router-link></p>\n</blockquote>\n<p>由于接口之间可以多继承，接口和类之间可以多实现，所以会形成复杂的图状结构。在这样的结构中寻找根是很困难的，为提高效率，Java 在编译时会<strong>放弃检查类于接口是否存在实现关系</strong>。</p>\n</div>\n<div class=\"warning custom-block\"><p class=\"custom-block-title\">注意</p>\n<ul>\n<li>\n<p>接口<strong>不能被实例化</strong>。</p>\n</li>\n<li>\n<p>接口中<strong>不允许定义构造方法</strong>，<strong>编译完成后会产生<code>.class</code>文件</strong>，但<strong>接口不是类</strong>。</p>\n</li>\n<li>\n<p>接口<strong>默认只能被<code>public</code>修</strong>饰，且实现接口的类中的<strong>具体实现方法也只能被<code>public</code>所修饰</strong>。</p>\n</li>\n<li>\n<p>接口中的<strong>方法默认被<code>public</code>和<code>abstract</code>修饰</strong>。</p>\n</li>\n<li>\n<p>接口<strong>可作为模板</strong>，用于反射中来实现解耦。</p>\n</li>\n</ul>\n</div>\n<h2 id=\"内部类\"><a class=\"header-anchor\" href=\"#内部类\" aria-hidden=\"true\">#</a> 内部类</h2>\n<p>定义在类或者接口内部的类称为内部类。</p>\n<h3 id=\"方法内部类\"><a class=\"header-anchor\" href=\"#方法内部类\" aria-hidden=\"true\">#</a> 方法内部类</h3>\n<ul>\n<li>\n<p>定义在方法中的类。</p>\n</li>\n<li>\n<p>只能在<strong>定义它的方法中使用</strong>。</p>\n</li>\n<li>\n<p>方法内部类中<strong>不能定义静态属性和静态方法</strong>，但<strong>静态常量是允许定义的</strong>。</p>\n</li>\n<li>\n<p>方法内部类<strong>可以使用外部类中的一些属性和方法</strong>。<strong>但如果使用的是当前方法的数据时，要求这个数据为常量</strong>。</p>\n</li>\n</ul>\n<h3 id=\"成员内部类\"><a class=\"header-anchor\" href=\"#成员内部类\" aria-hidden=\"true\">#</a> 成员内部类</h3>\n<p>定义在类的内部，方法外部的类。</p>\n<h3 id=\"静态内部类\"><a class=\"header-anchor\" href=\"#静态内部类\" aria-hidden=\"true\">#</a> 静态内部类</h3>\n<p>使用<code>static</code>关键字修饰的内部类。</p>\n<h3 id=\"匿名内部类\"><a class=\"header-anchor\" href=\"#匿名内部类\" aria-hidden=\"true\">#</a> 匿名内部类</h3>\n<ul>\n<li>\n<p>类体定义和对象创建写在一起的形式，没有名称，只使用一次。</p>\n</li>\n<li>\n<p>本质上是继承了对应的类或是实现了对应的接口（只要一个类允许被继承，那么它就可以拥有匿名内部类的形式）。</p>\n</li>\n<li>\n<p>若匿名内部类定义在方法中，则其使用规则同方法内部类一致。</p>\n</li>\n<li>\n<p>若匿名内部类定义在类中，则其使用规则同成员内部类一致。</p>\n</li>\n</ul>\n<h3 id=\"内部接口\"><a class=\"header-anchor\" href=\"#内部接口\" aria-hidden=\"true\">#</a> 内部接口</h3>\n<ul>\n<li>\n<p>定义在类或接口中的接口。</p>\n</li>\n<li>\n<p>类中定义的接口，接口中定义的类，接口中定义的接口，默认都用<code>static</code>修饰。</p>\n</li>\n</ul>\n</div>\n",null]}