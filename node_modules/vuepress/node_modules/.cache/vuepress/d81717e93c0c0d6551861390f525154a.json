{"remainingRequest":"C:\\Users\\momg\\Documents\\WORKSPACE\\Github\\localhost-8080.github.io\\node_modules\\babel-loader\\lib\\index.js??ref--3-1!C:\\Users\\momg\\Documents\\WORKSPACE\\Github\\localhost-8080.github.io\\node_modules\\vuepress\\lib\\app\\SWUpdateEvent.js","dependencies":[{"path":"C:\\Users\\momg\\Documents\\WORKSPACE\\Github\\localhost-8080.github.io\\node_modules\\vuepress\\lib\\app\\SWUpdateEvent.js","mtime":1558414126042},{"path":"C:\\Users\\momg\\Documents\\WORKSPACE\\Github\\localhost-8080.github.io\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1546868327989},{"path":"C:\\Users\\momg\\Documents\\WORKSPACE\\Github\\localhost-8080.github.io\\node_modules\\babel-loader\\lib\\index.js","mtime":1546868327989}],"contextDependencies":[],"result":["import \"core-js/modules/es6.object.define-property\";\nimport _classCallCheck from \"C:\\\\Users\\\\momg\\\\Documents\\\\WORKSPACE\\\\Github\\\\localhost-8080.github.io\\\\node_modules\\\\@babel\\\\runtime/helpers/builtin/es6/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\momg\\\\Documents\\\\WORKSPACE\\\\Github\\\\localhost-8080.github.io\\\\node_modules\\\\@babel\\\\runtime/helpers/builtin/es6/createClass\";\n\nvar SWUpdateEvent =\n/*#__PURE__*/\nfunction () {\n  function SWUpdateEvent(registration) {\n    _classCallCheck(this, SWUpdateEvent);\n\n    Object.defineProperty(this, 'registration', {\n      value: registration,\n      configurable: true,\n      writable: true\n    });\n  }\n  /**\n   * Check if the new service worker exists or not.\n   */\n\n\n  _createClass(SWUpdateEvent, [{\n    key: \"update\",\n    value: function update() {\n      return this.registration.update();\n    }\n    /**\n     * Activate new service worker to work 'location.reload()' with new data.\n     */\n\n  }, {\n    key: \"skipWaiting\",\n    value: function skipWaiting() {\n      var worker = this.registration.waiting;\n\n      if (!worker) {\n        return Promise.resolve();\n      }\n\n      console.log('[vuepress:sw] Doing worker.skipWaiting().');\n      return new Promise(function (resolve, reject) {\n        var channel = new MessageChannel();\n\n        channel.port1.onmessage = function (event) {\n          console.log('[vuepress:sw] Done worker.skipWaiting().');\n\n          if (event.data.error) {\n            reject(event.data.error);\n          } else {\n            resolve(event.data);\n          }\n        };\n\n        worker.postMessage({\n          type: 'skip-waiting'\n        }, [channel.port2]);\n      });\n    }\n  }]);\n\n  return SWUpdateEvent;\n}();\n\nexport { SWUpdateEvent as default };",{"version":3,"sources":["node_modules\\vuepress\\lib\\app\\SWUpdateEvent.js"],"names":["SWUpdateEvent","registration","Object","defineProperty","value","configurable","writable","update","worker","waiting","Promise","resolve","console","log","reject","channel","MessageChannel","port1","onmessage","event","data","error","postMessage","type","port2"],"mappings":";;;;IAAqBA,a;;;AACnB,yBAAaC,YAAb,EAA2B;AAAA;;AACzBC,WAAOC,cAAP,CAAsB,IAAtB,EAA4B,cAA5B,EAA4C;AAC1CC,aAAOH,YADmC;AAE1CI,oBAAc,IAF4B;AAG1CC,gBAAU;AAHgC,KAA5C;AAKD;AAED;;;;;;;6BAGU;AACR,aAAO,KAAKL,YAAL,CAAkBM,MAAlB,EAAP;AACD;AAED;;;;;;kCAGe;AACb,UAAMC,SAAS,KAAKP,YAAL,CAAkBQ,OAAjC;;AACA,UAAI,CAACD,MAAL,EAAa;AACX,eAAOE,QAAQC,OAAR,EAAP;AACD;;AAEDC,cAAQC,GAAR,CAAY,2CAAZ;AACA,aAAO,IAAIH,OAAJ,CAAY,UAACC,OAAD,EAAUG,MAAV,EAAqB;AACtC,YAAMC,UAAU,IAAIC,cAAJ,EAAhB;;AAEAD,gBAAQE,KAAR,CAAcC,SAAd,GAA0B,UAACC,KAAD,EAAW;AACnCP,kBAAQC,GAAR,CAAY,0CAAZ;;AACA,cAAIM,MAAMC,IAAN,CAAWC,KAAf,EAAsB;AACpBP,mBAAOK,MAAMC,IAAN,CAAWC,KAAlB;AACD,WAFD,MAEO;AACLV,oBAAQQ,MAAMC,IAAd;AACD;AACF,SAPD;;AASAZ,eAAOc,WAAP,CAAmB;AAAEC,gBAAM;AAAR,SAAnB,EAA6C,CAACR,QAAQS,KAAT,CAA7C;AACD,OAbM,CAAP;AAcD;;;;;;SAxCkBxB,a","sourceRoot":"C:\\Users\\momg\\Documents\\Workspace\\Github\\localhost-8080.github.io","sourcesContent":["export default class SWUpdateEvent {\n  constructor (registration) {\n    Object.defineProperty(this, 'registration', {\n      value: registration,\n      configurable: true,\n      writable: true\n    })\n  }\n\n  /**\n   * Check if the new service worker exists or not.\n   */\n  update () {\n    return this.registration.update()\n  }\n\n  /**\n   * Activate new service worker to work 'location.reload()' with new data.\n   */\n  skipWaiting () {\n    const worker = this.registration.waiting\n    if (!worker) {\n      return Promise.resolve()\n    }\n\n    console.log('[vuepress:sw] Doing worker.skipWaiting().')\n    return new Promise((resolve, reject) => {\n      const channel = new MessageChannel()\n\n      channel.port1.onmessage = (event) => {\n        console.log('[vuepress:sw] Done worker.skipWaiting().')\n        if (event.data.error) {\n          reject(event.data.error)\n        } else {\n          resolve(event.data)\n        }\n      }\n\n      worker.postMessage({ type: 'skip-waiting' }, [channel.port2])\n    })\n  }\n}\n\n"]}]}