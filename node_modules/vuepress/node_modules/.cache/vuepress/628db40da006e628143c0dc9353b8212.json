{"remainingRequest":"C:\\Users\\momg\\Documents\\WORKSPACE\\Github\\localhost-8080.github.io\\node_modules\\babel-loader\\lib\\index.js??ref--3-1!C:\\Users\\momg\\Documents\\WORKSPACE\\Github\\localhost-8080.github.io\\node_modules\\vuepress\\lib\\app\\root-mixins\\updateMeta.js","dependencies":[{"path":"C:\\Users\\momg\\Documents\\WORKSPACE\\Github\\localhost-8080.github.io\\node_modules\\vuepress\\lib\\app\\root-mixins\\updateMeta.js","mtime":1558414126042},{"path":"C:\\Users\\momg\\Documents\\WORKSPACE\\Github\\localhost-8080.github.io\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1546868327989},{"path":"C:\\Users\\momg\\Documents\\WORKSPACE\\Github\\localhost-8080.github.io\\node_modules\\babel-loader\\lib\\index.js","mtime":1546868327989}],"contextDependencies":[],"result":["import \"core-js/modules/es6.object.keys\";\nimport \"core-js/modules/es6.array.map\";\nimport _toConsumableArray from \"C:\\\\Users\\\\momg\\\\Documents\\\\WORKSPACE\\\\Github\\\\localhost-8080.github.io\\\\node_modules\\\\@babel\\\\runtime/helpers/builtin/es6/toConsumableArray\";\nimport \"core-js/modules/es6.array.for-each\";\nimport \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/es6.array.filter\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.array.iterator\";\nimport \"core-js/modules/es6.string.iterator\";\nimport \"core-js/modules/es6.set\";\nexport default {\n  created: function created() {\n    if (this.$ssrContext) {\n      this.$ssrContext.title = this.$title;\n      this.$ssrContext.lang = this.$lang;\n      this.$ssrContext.description = this.$page.description || this.$description;\n    }\n  },\n  mounted: function mounted() {\n    var _this = this;\n\n    // update title / meta tags\n    this.currentMetaTags = new Set();\n\n    var updateMeta = function updateMeta() {\n      document.title = _this.$title;\n      document.documentElement.lang = _this.$lang;\n      var userMeta = _this.$page.frontmatter.meta || [];\n      var meta = userMeta.slice(0);\n      var useGlobalDescription = userMeta.filter(function (m) {\n        return m.name === 'description';\n      }).length === 0; // #665 Avoid duplicate description meta at runtime.\n\n      if (useGlobalDescription) {\n        meta.push({\n          name: 'description',\n          content: _this.$description\n        });\n      } // Including description meta coming from SSR.\n\n\n      var descriptionMetas = document.querySelectorAll('meta[name=\"description\"]');\n\n      if (descriptionMetas.length) {\n        descriptionMetas.forEach(function (m) {\n          return _this.currentMetaTags.add(m);\n        });\n      }\n\n      _this.currentMetaTags = new Set(updateMetaTags(meta, _this.currentMetaTags));\n    };\n\n    this.$watch('$page', updateMeta);\n    updateMeta();\n  },\n  beforeDestroy: function beforeDestroy() {\n    updateMetaTags(null, this.currentMetaTags);\n  }\n};\n\nfunction updateMetaTags(meta, current) {\n  if (current) {\n    _toConsumableArray(current).forEach(function (c) {\n      document.head.removeChild(c);\n    });\n  }\n\n  if (meta) {\n    return meta.map(function (m) {\n      var tag = document.createElement('meta');\n      Object.keys(m).forEach(function (key) {\n        tag.setAttribute(key, m[key]);\n      });\n      document.head.appendChild(tag);\n      return tag;\n    });\n  }\n}",{"version":3,"sources":["node_modules\\vuepress\\lib\\app\\root-mixins\\updateMeta.js"],"names":["created","$ssrContext","title","$title","lang","$lang","description","$page","$description","mounted","currentMetaTags","Set","updateMeta","document","documentElement","userMeta","frontmatter","meta","slice","useGlobalDescription","filter","m","name","length","push","content","descriptionMetas","querySelectorAll","forEach","add","updateMetaTags","$watch","beforeDestroy","current","head","removeChild","c","map","tag","createElement","Object","keys","setAttribute","key","appendChild"],"mappings":";;;;;;;;;;AAAA,eAAe;AACbA,SADa,qBACF;AACT,QAAI,KAAKC,WAAT,EAAsB;AACpB,WAAKA,WAAL,CAAiBC,KAAjB,GAAyB,KAAKC,MAA9B;AACA,WAAKF,WAAL,CAAiBG,IAAjB,GAAwB,KAAKC,KAA7B;AACA,WAAKJ,WAAL,CAAiBK,WAAjB,GAA+B,KAAKC,KAAL,CAAWD,WAAX,IAA0B,KAAKE,YAA9D;AACD;AACF,GAPY;AASbC,SATa,qBASF;AAAA;;AACT;AACA,SAAKC,eAAL,GAAuB,IAAIC,GAAJ,EAAvB;;AAEA,QAAMC,aAAa,SAAbA,UAAa,GAAM;AACvBC,eAASX,KAAT,GAAiB,MAAKC,MAAtB;AACAU,eAASC,eAAT,CAAyBV,IAAzB,GAAgC,MAAKC,KAArC;AACA,UAAMU,WAAW,MAAKR,KAAL,CAAWS,WAAX,CAAuBC,IAAvB,IAA+B,EAAhD;AACA,UAAMA,OAAOF,SAASG,KAAT,CAAe,CAAf,CAAb;AACA,UAAMC,uBAAuBJ,SAASK,MAAT,CAAgB;AAAA,eAAKC,EAAEC,IAAF,KAAW,aAAhB;AAAA,OAAhB,EAA+CC,MAA/C,KAA0D,CAAvF,CALuB,CAOvB;;AACA,UAAIJ,oBAAJ,EAA0B;AACxBF,aAAKO,IAAL,CAAU;AAAEF,gBAAM,aAAR;AAAuBG,mBAAS,MAAKjB;AAArC,SAAV;AACD,OAVsB,CAYvB;;;AACA,UAAMkB,mBAAmBb,SAASc,gBAAT,CAA0B,0BAA1B,CAAzB;;AACA,UAAID,iBAAiBH,MAArB,EAA6B;AAC3BG,yBAAiBE,OAAjB,CAAyB;AAAA,iBAAK,MAAKlB,eAAL,CAAqBmB,GAArB,CAAyBR,CAAzB,CAAL;AAAA,SAAzB;AACD;;AAED,YAAKX,eAAL,GAAuB,IAAIC,GAAJ,CAAQmB,eAAeb,IAAf,EAAqB,MAAKP,eAA1B,CAAR,CAAvB;AACD,KAnBD;;AAoBA,SAAKqB,MAAL,CAAY,OAAZ,EAAqBnB,UAArB;AACAA;AACD,GAnCY;AAqCboB,eArCa,2BAqCI;AACfF,mBAAe,IAAf,EAAqB,KAAKpB,eAA1B;AACD;AAvCY,CAAf;;AA0CA,SAASoB,cAAT,CAAyBb,IAAzB,EAA+BgB,OAA/B,EAAwC;AACtC,MAAIA,OAAJ,EAAa;AACX,uBAAIA,OAAJ,EAAaL,OAAb,CAAqB,aAAK;AACxBf,eAASqB,IAAT,CAAcC,WAAd,CAA0BC,CAA1B;AACD,KAFD;AAGD;;AACD,MAAInB,IAAJ,EAAU;AACR,WAAOA,KAAKoB,GAAL,CAAS,aAAK;AACnB,UAAMC,MAAMzB,SAAS0B,aAAT,CAAuB,MAAvB,CAAZ;AACAC,aAAOC,IAAP,CAAYpB,CAAZ,EAAeO,OAAf,CAAuB,eAAO;AAC5BU,YAAII,YAAJ,CAAiBC,GAAjB,EAAsBtB,EAAEsB,GAAF,CAAtB;AACD,OAFD;AAGA9B,eAASqB,IAAT,CAAcU,WAAd,CAA0BN,GAA1B;AACA,aAAOA,GAAP;AACD,KAPM,CAAP;AAQD;AACF","sourceRoot":"C:\\Users\\momg\\Documents\\Workspace\\Github\\localhost-8080.github.io","sourcesContent":["export default {\n  created () {\n    if (this.$ssrContext) {\n      this.$ssrContext.title = this.$title\n      this.$ssrContext.lang = this.$lang\n      this.$ssrContext.description = this.$page.description || this.$description\n    }\n  },\n\n  mounted () {\n    // update title / meta tags\n    this.currentMetaTags = new Set()\n\n    const updateMeta = () => {\n      document.title = this.$title\n      document.documentElement.lang = this.$lang\n      const userMeta = this.$page.frontmatter.meta || []\n      const meta = userMeta.slice(0)\n      const useGlobalDescription = userMeta.filter(m => m.name === 'description').length === 0\n\n      // #665 Avoid duplicate description meta at runtime.\n      if (useGlobalDescription) {\n        meta.push({ name: 'description', content: this.$description })\n      }\n\n      // Including description meta coming from SSR.\n      const descriptionMetas = document.querySelectorAll('meta[name=\"description\"]')\n      if (descriptionMetas.length) {\n        descriptionMetas.forEach(m => this.currentMetaTags.add(m))\n      }\n\n      this.currentMetaTags = new Set(updateMetaTags(meta, this.currentMetaTags))\n    }\n    this.$watch('$page', updateMeta)\n    updateMeta()\n  },\n\n  beforeDestroy () {\n    updateMetaTags(null, this.currentMetaTags)\n  }\n}\n\nfunction updateMetaTags (meta, current) {\n  if (current) {\n    [...current].forEach(c => {\n      document.head.removeChild(c)\n    })\n  }\n  if (meta) {\n    return meta.map(m => {\n      const tag = document.createElement('meta')\n      Object.keys(m).forEach(key => {\n        tag.setAttribute(key, m[key])\n      })\n      document.head.appendChild(tag)\n      return tag\n    })\n  }\n}\n"]}]}