{"remainingRequest":"C:\\Users\\momg\\Documents\\WORKSPACE\\Github\\localhost-8080.github.io\\node_modules\\babel-loader\\lib\\index.js??ref--3-1!C:\\Users\\momg\\Documents\\WORKSPACE\\Github\\localhost-8080.github.io\\node_modules\\vuepress\\lib\\app\\clientEntry.js","dependencies":[{"path":"C:\\Users\\momg\\Documents\\WORKSPACE\\Github\\localhost-8080.github.io\\node_modules\\vuepress\\lib\\app\\clientEntry.js","mtime":1558414126042},{"path":"C:\\Users\\momg\\Documents\\WORKSPACE\\Github\\localhost-8080.github.io\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1546868327989},{"path":"C:\\Users\\momg\\Documents\\WORKSPACE\\Github\\localhost-8080.github.io\\node_modules\\babel-loader\\lib\\index.js","mtime":1546868327989}],"contextDependencies":[],"result":["import \"core-js/modules/es6.promise\";\n\n/* global BASE_URL, GA_ID, ga, SW_ENABLED, VUEPRESS_VERSION, LAST_COMMIT_HASH*/\nimport { createApp } from './app';\nimport SWUpdateEvent from './SWUpdateEvent';\nimport { register } from 'register-service-worker';\n\nvar _createApp = createApp(),\n    app = _createApp.app,\n    router = _createApp.router;\n\nwindow.__VUEPRESS_VERSION__ = {\n  version: VUEPRESS_VERSION,\n  hash: LAST_COMMIT_HASH // Google analytics integration\n\n};\n\nif (process.env.NODE_ENV === 'production' && GA_ID) {\n  (function (i, s, o, g, r, a, m) {\n    i['GoogleAnalyticsObject'] = r;\n\n    i[r] = i[r] || function () {\n      (i[r].q = i[r].q || []).push(arguments);\n    };\n\n    i[r].l = 1 * new Date();\n    a = s.createElement(o);\n    m = s.getElementsByTagName(o)[0];\n    a.async = 1;\n    a.src = g;\n    m.parentNode.insertBefore(a, m);\n  })(window, document, 'script', 'https://www.google-analytics.com/analytics.js', 'ga');\n\n  ga('create', GA_ID, 'auto');\n  ga('send', 'pageview');\n  router.afterEach(function (to) {\n    ga('set', 'page', app.$withBase(to.fullPath));\n    ga('send', 'pageview');\n  });\n}\n\nrouter.onReady(function () {\n  app.$mount('#app'); // Register service worker\n\n  if (process.env.NODE_ENV === 'production' && SW_ENABLED && window.location.protocol === 'https:') {\n    register(\"\".concat(BASE_URL, \"service-worker.js\"), {\n      ready: function ready() {\n        console.log('[vuepress:sw] Service worker is active.');\n        app.$refs.layout.$emit('sw-ready');\n      },\n      cached: function cached(registration) {\n        console.log('[vuepress:sw] Content has been cached for offline use.');\n        app.$refs.layout.$emit('sw-cached', new SWUpdateEvent(registration));\n      },\n      updated: function updated(registration) {\n        console.log('[vuepress:sw] Content updated.');\n        app.$refs.layout.$emit('sw-updated', new SWUpdateEvent(registration));\n      },\n      offline: function offline() {\n        console.log('[vuepress:sw] No internet connection found. App is running in offline mode.');\n        app.$refs.layout.$emit('sw-offline');\n      },\n      error: function error(err) {\n        console.error('[vuepress:sw] Error during service worker registration:', err);\n        app.$refs.layout.$emit('sw-error', err);\n\n        if (GA_ID) {\n          ga('send', 'exception', {\n            exDescription: err.message,\n            exFatal: false\n          });\n        }\n      }\n    });\n  }\n});",{"version":3,"sources":["node_modules\\vuepress\\lib\\app\\clientEntry.js"],"names":["createApp","SWUpdateEvent","register","app","router","window","__VUEPRESS_VERSION__","version","VUEPRESS_VERSION","hash","LAST_COMMIT_HASH","process","env","NODE_ENV","GA_ID","i","s","o","g","r","a","m","q","push","arguments","l","Date","createElement","getElementsByTagName","async","src","parentNode","insertBefore","document","ga","afterEach","to","$withBase","fullPath","onReady","$mount","SW_ENABLED","location","protocol","BASE_URL","ready","console","log","$refs","layout","$emit","cached","registration","updated","offline","error","err","exDescription","message","exFatal"],"mappings":"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","sourceRoot":"C:\\Users\\momg\\Documents\\Workspace\\Github\\localhost-8080.github.io","sourcesContent":["/* global BASE_URL, GA_ID, ga, SW_ENABLED, VUEPRESS_VERSION, LAST_COMMIT_HASH*/\n\nimport { createApp } from './app'\nimport SWUpdateEvent from './SWUpdateEvent'\nimport { register } from 'register-service-worker'\n\nconst { app, router } = createApp()\n\nwindow.__VUEPRESS_VERSION__ = {\n  version: VUEPRESS_VERSION,\n  hash: LAST_COMMIT_HASH\n}\n\n// Google analytics integration\nif (process.env.NODE_ENV === 'production' && GA_ID) {\n  (function (i, s, o, g, r, a, m) {\n    i['GoogleAnalyticsObject'] = r\n    i[r] = i[r] || function () {\n      (i[r].q = i[r].q || []).push(arguments)\n    }\n    i[r].l = 1 * new Date()\n    a = s.createElement(o)\n    m = s.getElementsByTagName(o)[0]\n    a.async = 1\n    a.src = g\n    m.parentNode.insertBefore(a, m)\n  })(window, document, 'script', 'https://www.google-analytics.com/analytics.js', 'ga')\n\n  ga('create', GA_ID, 'auto')\n  ga('send', 'pageview')\n\n  router.afterEach(function (to) {\n    ga('set', 'page', app.$withBase(to.fullPath))\n    ga('send', 'pageview')\n  })\n}\n\nrouter.onReady(() => {\n  app.$mount('#app')\n\n  // Register service worker\n  if (process.env.NODE_ENV === 'production' &&\n    SW_ENABLED &&\n    window.location.protocol === 'https:') {\n    register(`${BASE_URL}service-worker.js`, {\n      ready () {\n        console.log('[vuepress:sw] Service worker is active.')\n        app.$refs.layout.$emit('sw-ready')\n      },\n      cached (registration) {\n        console.log('[vuepress:sw] Content has been cached for offline use.')\n        app.$refs.layout.$emit('sw-cached', new SWUpdateEvent(registration))\n      },\n      updated (registration) {\n        console.log('[vuepress:sw] Content updated.')\n        app.$refs.layout.$emit('sw-updated', new SWUpdateEvent(registration))\n      },\n      offline () {\n        console.log('[vuepress:sw] No internet connection found. App is running in offline mode.')\n        app.$refs.layout.$emit('sw-offline')\n      },\n      error (err) {\n        console.error('[vuepress:sw] Error during service worker registration:', err)\n        app.$refs.layout.$emit('sw-error', err)\n        if (GA_ID) {\n          ga('send', 'exception', {\n            exDescription: err.message,\n            exFatal: false\n          })\n        }\n      }\n    })\n  }\n})\n"]}]}