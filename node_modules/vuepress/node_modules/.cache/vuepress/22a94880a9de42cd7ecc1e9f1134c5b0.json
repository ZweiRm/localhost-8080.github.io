{"remainingRequest":"C:\\Users\\momg\\Documents\\Workspace\\Github\\localhost-8080.github.io\\node_modules\\vue-loader\\lib\\index.js??ref--1-1!C:\\Users\\momg\\Documents\\Workspace\\Github\\localhost-8080.github.io\\node_modules\\vuepress\\lib\\webpack\\markdownLoader.js??ref--1-2!C:\\Users\\momg\\Documents\\Workspace\\Github\\localhost-8080.github.io\\docs\\java\\应用程序编程接口.md?vue&type=template&id=f7c6146a&","dependencies":[{"path":"C:\\Users\\momg\\Documents\\Workspace\\Github\\localhost-8080.github.io\\docs\\java\\应用程序编程接口.md","mtime":1558435100715},{"path":"C:\\Users\\momg\\Documents\\WORKSPACE\\Github\\localhost-8080.github.io\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1546868327989},{"path":"C:\\Users\\momg\\Documents\\Workspace\\Github\\localhost-8080.github.io\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1558414119184},{"path":"C:\\Users\\momg\\Documents\\Workspace\\Github\\localhost-8080.github.io\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1546868327989},{"path":"C:\\Users\\momg\\Documents\\Workspace\\Github\\localhost-8080.github.io\\node_modules\\vue-loader\\lib\\index.js","mtime":1558414119184},{"path":"C:\\Users\\momg\\Documents\\Workspace\\Github\\localhost-8080.github.io\\node_modules\\vuepress\\lib\\webpack\\markdownLoader.js","mtime":1558414126042}],"contextDependencies":[],"result":["\n<div class=\"content\"><h1 id=\"应用程序编程接口\"><a class=\"header-anchor\" href=\"#应用程序编程接口\" aria-hidden=\"true\">#</a> 应用程序编程接口</h1>\n<h2 id=\"概述\"><a class=\"header-anchor\" href=\"#概述\" aria-hidden=\"true\">#</a> 概述</h2>\n<p>应用程序编程接口 (Application Programming Interface, <strong>API</strong>) 是预先定义的一套代码，用于程序员直接调用来实现其具体需求。</p>\n<h2 id=\"语言基础类库-package-java-lang\"><a class=\"header-anchor\" href=\"#语言基础类库-package-java-lang\" aria-hidden=\"true\">#</a> 语言基础类库 (Package <code>java.lang</code>)</h2>\n<h3 id=\"object类\"><a class=\"header-anchor\" href=\"#object类\" aria-hidden=\"true\">#</a> <code>Object</code>类</h3>\n<h4 id=\"基本信息\"><a class=\"header-anchor\" href=\"#基本信息\" aria-hidden=\"true\">#</a> 基本信息</h4>\n<p><strong>Package</strong> java.lang<br>\n<code>public class Object</code></p>\n<ul>\n<li>\n<p><code>Object</code>类是所有类的父类。在 Java 中处于顶级父类的地位，是类层级结构的根类。</p>\n</li>\n<li>\n<p>任何类对象都可以用<code>Object</code>类的对象来接收。</p>\n</li>\n</ul>\n<h4 id=\"重要方法\"><a class=\"header-anchor\" href=\"#重要方法\" aria-hidden=\"true\">#</a> 重要方法</h4>\n<ol>\n<li>\n<p><code>clone()</code></p>\n<ul>\n<li>\n<p>克隆一个对象。</p>\n</li>\n<li>\n<p>当一个对象要被克隆时，<strong>它所对应的类必须实现<code>Cloneable</code>接口</strong>。</p>\n</li>\n<li>\n<p>克隆完成后会产生一个新的对象。<strong>新对象和原对象的地址不同，但属性值相同</strong>。</p>\n</li>\n<li>\n<p><code>Cloneable</code>接口<br>\n其中没有任何属性和方法，仅用于标识此类产生的对象可以被克隆。</p>\n</li>\n</ul>\n</li>\n<li>\n<p><code>finalize()</code></p>\n<ul>\n<li>\n<p>通知<code>GC</code>回收当前对象。</p>\n</li>\n<li>\n<p>即使<code>GC</code>已经开始运行，也只回收当前对象而不回收其他对象。</p>\n</li>\n<li>\n<p><code>System.gc()</code>通知<code>GC</code>回收所有可以回收的对象。</p>\n</li>\n</ul>\n</li>\n<li>\n<p><code>getClass()</code><br>\n获取对象的运行时类对象（如，后续可用于反射）。</p>\n</li>\n<li>\n<p><code>hashCode()</code><br>\n获取该对象的哈希码值，在一定范围内可以认为是唯一的。哈希码为一串 32 位的二进制数据。</p>\n</li>\n<li>\n<p><code>toString()</code><br>\n打印对象。实际调用对象本身的<code>toString()</code>。</p>\n</li>\n<li>\n<p><code>equals(Object obj)</code><br>\n比较两个对象是否相等。默认比较对象的地址，但对于<code>File</code>，<code>String</code>，<code>Date</code>和包装类来说，它们比较地是对象值。</p>\n<div class=\"tip custom-block\"><p class=\"custom-block-title\">特别地</p>\n<p>当手动重写<code>equals()</code>时，思路为:</p>\n<ol>\n<li>判断地址是否一致(<code>if (this == obj)</code>)</li>\n<li>判断参数是否为空(<code>if (obj == null)</code>)</li>\n<li>判断类型是否一致(<code>if (this.getClass() != obj.getClass())</code>)</li>\n<li>判断属性值是否一致</li>\n</ol>\n</div>\n</li>\n</ol>\n<blockquote>\n<hr>\n</blockquote>\n<h3 id=\"system类\"><a class=\"header-anchor\" href=\"#system类\" aria-hidden=\"true\">#</a> <code>System</code>类</h3>\n<h3 id=\"异常\"><a class=\"header-anchor\" href=\"#异常\" aria-hidden=\"true\">#</a> 异常</h3>\n<h3 id=\"线程\"><a class=\"header-anchor\" href=\"#线程\" aria-hidden=\"true\">#</a> 线程</h3>\n<h3 id=\"string类\"><a class=\"header-anchor\" href=\"#string类\" aria-hidden=\"true\">#</a> <code>String</code>类</h3>\n<h4 id=\"基本信息-2\"><a class=\"header-anchor\" href=\"#基本信息-2\" aria-hidden=\"true\">#</a> 基本信息</h4>\n<p><strong>Package</strong> java.lang<br>\n<code>public final class String</code></p>\n<ul>\n<li>\n<p><code>String</code>类是一个最终类，表示字符串。</p>\n</li>\n<li>\n<p>所有字符串都是<code>String</code>类的实例。</p>\n</li>\n<li>\n<p>字符串是常量，创建后不可更改，但可以被共享。</p>\n</li>\n</ul>\n<h4 id=\"重要方法-2\"><a class=\"header-anchor\" href=\"#重要方法-2\" aria-hidden=\"true\">#</a> 重要方法</h4>\n<ol>\n<li>\n<p><code>chatAt()</code><br>\n获取字符串指定下标字符。</p>\n</li>\n<li>\n<p><code>length()</code><br>\n获取字符串长度。</p>\n</li>\n<li>\n<p><code>toCharArray()</code><br>\n将字符串转化为字符数组。</p>\n</li>\n<li>\n<p>其他不改变原串的方法</p>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>描述</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>compareTo(String another)</code></td>\n<td>判断两个字符串大小，根据返回值政府来确定</td>\n<td></td>\n</tr>\n<tr>\n<td><code>concat(String str)</code></td>\n<td>拼接字符串，不该面原字符串</td>\n<td></td>\n</tr>\n<tr>\n<td><code>contains(String str)</code></td>\n<td>是否包含该子串</td>\n<td></td>\n</tr>\n<tr>\n<td><code>equals(Object o)</code></td>\n<td>是否相等</td>\n<td></td>\n</tr>\n<tr>\n<td><code>getBytes()</code></td>\n<td>将字符串转化为字节数组</td>\n<td>通过<code>String</code>的构造方法将字节数组转化为字符串</td>\n</tr>\n<tr>\n<td><code>indexOf(int ch, int index)</code></td>\n<td>指定下标开始寻找指定字符第一次出现的位置</td>\n<td></td>\n</tr>\n<tr>\n<td><code>valueOf()</code></td>\n<td>将传入值转换为字符串</td>\n<td>传入对象则会调用对象的<code>toString()</code>；<br>传入字符数组对象，则打印其内容</td>\n</tr>\n<tr>\n<td><code>replaceAll(String reg, String str)</code></td>\n<td>替换指定内容</td>\n<td></td>\n</tr>\n<tr>\n<td><code>matches(String reg)</code></td>\n<td>是否匹配指定规则</td>\n<td></td>\n</tr>\n<tr>\n<td><code>split(String reg)</code></td>\n<td>按指定规则切割字符串</td>\n<td>作为切割的符号会被消除；<br>若两个切割符号相连，则会被分出一个空字符串<code>&quot;&quot;</code></td>\n</tr>\n</tbody>\n</table>\n</li>\n</ol>\n<div class=\"tip custom-block\"><p class=\"custom-block-title\">特别地</p>\n<ul>\n<li>\n<p>拼接字符串可以使用运算符&quot;<code>+</code>&quot;，本质上 Java 编译器会调用<code>StringBuffer</code>（或类似技术）来实现这个拼接操作。</p>\n</li>\n<li>\n<p>拼接多个字符串建议使用<code>StringBuilder</code>类，少量字符串使用<code>+</code>运算符</p>\n</li>\n<li>\n<p><code>StringBuilder</code>和<code>StringBuffer</code>使用方法完全一致</p>\n<ul>\n<li>\n<p><code>StringBuilder</code>线程不安全</p>\n</li>\n<li>\n<p><code>StringBuffer</code>线程安全</p>\n</li>\n</ul>\n</li>\n<li>\n<p>故代码：<br>\n<strong>Input</strong></p>\n<!--beforebegin--><div class=\"language-java extra-class\"><!--afterbegin--><pre v-pre class=\"language-java\"><code><span class=\"token class-name\">String</span> s <span class=\"token operator\">=</span> <span class=\"token string\">\"a\"</span><span class=\"token punctuation\">;</span>\ns <span class=\"token operator\">+=</span> <span class=\"token string\">\"b\"</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>实际上的执行效果是：</p>\n<!--beforebegin--><div class=\"language-java extra-class\"><!--afterbegin--><pre v-pre class=\"language-java\"><code><span class=\"token class-name\">String</span> s <span class=\"token operator\">=</span> <span class=\"token string\">\"a\"</span><span class=\"token punctuation\">;</span>\ns <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuilder</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"b\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>在最后的<code>toString()</code>中生成了新的字符串对象，类似于（真实过程更加复杂）：</p>\n<!--beforebegin--><div class=\"language-java extra-class\"><!--afterbegin--><pre v-pre class=\"language-java\"><code>s <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"ab\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--></li>\n</ul>\n<p><strong>分析代码</strong><br>\n<strong>Input</strong></p>\n<!--beforebegin--><div class=\"language-java extra-class\"><!--afterbegin--><pre v-pre class=\"language-java\"><code><span class=\"token class-name\">String</span> s1 <span class=\"token operator\">=</span> <span class=\"token string\">\"ab\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">String</span> s2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ab\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">String</span> s4 <span class=\"token operator\">=</span> <span class=\"token string\">\"a\"</span><span class=\"token punctuation\">;</span>\ns4 <span class=\"token operator\">+=</span> <span class=\"token string\">\"b\"</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><ol>\n<li>\n<p>第一句</p>\n<!--beforebegin--><div class=\"language-java extra-class\"><!--afterbegin--><pre v-pre class=\"language-java\"><code><span class=\"token class-name\">String</span> s1 <span class=\"token operator\">=</span> <span class=\"token string\">\"ab\"</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>内存图：<br>\n<img src=\"/img/String_01.jpg\" alt=\"String s1 = &quot;ab&quot;;\"></p>\n</li>\n<li>\n<p>第二句</p>\n<!--beforebegin--><div class=\"language-java extra-class\"><!--afterbegin--><pre v-pre class=\"language-java\"><code><span class=\"token class-name\">String</span> s2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ab\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>内存图：<br>\n<img src=\"/img/String_02.jpg\" alt=\"String s2 = new String(&quot;ab&quot;);\"></p>\n</li>\n<li>\n<p>第三句</p>\n<!--beforebegin--><div class=\"language-java extra-class\"><!--afterbegin--><pre v-pre class=\"language-java\"><code><span class=\"token class-name\">String</span> s4 <span class=\"token operator\">=</span> <span class=\"token string\">\"a\"</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>内存图：<br>\n<img src=\"/img/String_03.jpg\" alt=\"String s4 = &quot;a&quot;;\"></p>\n</li>\n<li>\n<p>第四句</p>\n<!--beforebegin--><div class=\"language-java extra-class\"><!--afterbegin--><pre v-pre class=\"language-java\"><code>s4 <span class=\"token operator\">+=</span> <span class=\"token string\">\"b\"</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>由<code>StringBuilder</code>实现<code>+=</code>操作，具体步骤为：</p>\n<ol>\n<li>\n<p>生成<code>StringBuilder</code>对象</p>\n<!--beforebegin--><div class=\"language-java extra-class\"><!--afterbegin--><pre v-pre class=\"language-java\"><code><span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuilder</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>内存图：<br>\n<img src=\"/img/String_04.jpg\" alt=\"new StringBuilder(&quot;a&quot;)\"></p>\n</li>\n<li>\n<p><code>StringBuilder</code>对象取<code>append()</code>方法拼接字符串</p>\n<!--beforebegin--><div class=\"language-java extra-class\"><!--afterbegin--><pre v-pre class=\"language-java\"><code><span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuilder</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"b\"</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>内存图：\n<img src=\"/img/String_05.jpg\" alt=\"new StringBuilder(&quot;a&quot;).append(&quot;b&quot;)\"><br>\n堆内存<code>0x3f4c</code>断开与常量&quot;a&quot;(<code>0x45fa</code>)的链接，转而链接常量&quot;ab&quot;(<code>0x003d</code>)。</p>\n</li>\n<li>\n<p>调用<code>toString()</code>生成新的<code>String</code>对象</p>\n<!--beforebegin--><div class=\"language-java extra-class\"><!--afterbegin--><pre v-pre class=\"language-java\"><code><span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuilder</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"b\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>内存图：<br>\n<img src=\"/img/String_06.jpg\" alt=\"new StringBuilder(&quot;a&quot;).append(&quot;b&quot;).toString()\"></p>\n</li>\n<li>\n<p>将新生成的<code>String</code>对象的管理权交给<code>s4</code>（赋值）</p>\n<!--beforebegin--><div class=\"language-java extra-class\"><!--afterbegin--><pre v-pre class=\"language-java\"><code>s4 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuilder</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"b\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>内存图：<br>\n<img src=\"/img/String_07.jpg\" alt=\"s4 = new StringBuilder(&quot;a&quot;).append(&quot;b&quot;).toString();\">\n栈内存内<code>s4</code>断开与常量&quot;a&quot;(<code>0x45fa</code>)的链接，转而链接堆内存<code>0x7bce</code>。</p>\n</li>\n<li>\n<p>结束操作，最终结果<br>\n内存图：<br>\n<img src=\"/img/String_08.jpg\" alt=\"完成\"></p>\n</li>\n</ol>\n</li>\n</ol>\n</div>\n<div class=\"tip custom-block\"><p class=\"custom-block-title\">关于编码</p>\n<p>按照某些规律将字符映射成字节。这个记录规则就是编码表</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>内容</th>\n<th>特点</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>ASCII</td>\n<td>0 至 127</td>\n<td>不完全</td>\n</tr>\n<tr>\n<td>西欧码表 ISO-8859-1</td>\n<td>西欧字符</td>\n<td>一个字母占 1 字节</td>\n</tr>\n<tr>\n<td>GB2312</td>\n<td>常见基本简体汉字和部分常用繁体汉字</td>\n<td>一个字符占 2 字节</td>\n</tr>\n<tr>\n<td>UTF-8</td>\n<td>常见语言的常见字符</td>\n<td>一个字符占 3 字节</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>→ <a href=\"#scanner%E7%B1%BB\">关于<code>Scanner</code>类</a></p>\n<h4 id=\"正则表达式\"><a class=\"header-anchor\" href=\"#正则表达式\" aria-hidden=\"true\">#</a> 正则表达式</h4>\n<p>正则表达式本质上是<strong>指定匹配</strong>或<strong>筛选规则</strong>的一系列表达式。</p>\n<p><strong>规则</strong></p>\n<ul>\n<li>\n<p>元字符与限定符：正则表达式中含有表达特殊意义的字符，这些字符成为元字符；在正则表达式中，需要表示元字符出现次数等逻辑规则时，使用限定符来表示。</p>\n</li>\n<li>\n<p>在 Java 中，由于使用<code>\\</code>转义且某些元字符中本身包含<code>\\</code>，故在使用时需要写作<code>\\\\</code>。如：表示任意一个数字的正则表达式在 Java 中写作<code>\\\\d</code>。</p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>元字符/限定符</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>.</code></td>\n<td>任意字符</td>\n</tr>\n<tr>\n<td><code>\\d</code></td>\n<td>0至9任意一个数字</td>\n</tr>\n<tr>\n<td><code>\\D</code></td>\n<td>任意一个非数字</td>\n</tr>\n<tr>\n<td><code>\\s</code></td>\n<td>空格类字符，如<code>\\t</code>, <code>\\n</code>, <code>\\x0B</code>, <code>\\f</code>, <code>\\r</code></td>\n</tr>\n<tr>\n<td><code>\\S</code></td>\n<td>任意一个非空格类字符</td>\n</tr>\n<tr>\n<td><code>\\w</code></td>\n<td>除<code>$</code>外的可用于标识符的字符（字母(a-zA-Z)、数字(0-9)、下划线(_)）</td>\n</tr>\n<tr>\n<td><code>\\W</code></td>\n<td>任意一个不能用于标识符的字符</td>\n</tr>\n<tr>\n<td><code>^</code></td>\n<td>串开头</td>\n</tr>\n<tr>\n<td><code>$</code></td>\n<td>串结尾</td>\n</tr>\n<tr>\n<td><code>|</code></td>\n<td>或</td>\n</tr>\n<tr>\n<td><code>+</code></td>\n<td>出现1次或多次</td>\n</tr>\n<tr>\n<td><code>?</code></td>\n<td>出现0次或1次</td>\n</tr>\n<tr>\n<td><code>*</code></td>\n<td>出现0次或多次</td>\n</tr>\n<tr>\n<td><code>{n}</code></td>\n<td>出现n次</td>\n</tr>\n<tr>\n<td><code>{n,}</code></td>\n<td>出现至少n次</td>\n</tr>\n<tr>\n<td><code>{n,m}</code></td>\n<td>出现n至m次</td>\n</tr>\n<tr>\n<td><code>()</code></td>\n<td>捕获组</td>\n</tr>\n<tr>\n<td><code>[]</code></td>\n<td>单个字符</td>\n</tr>\n<tr>\n<td><code>\\n</code></td>\n<td>编号为n的捕获组</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p><strong>这里：{n,m|n,m∈N<sub>+</sub>}</strong></p>\n</blockquote>\n<p><strong>捕获组</strong></p>\n<ul>\n<li>\n<p>起编号作用</p>\n</li>\n<li>\n<p>从左括号出现的位置开始计算</p>\n</li>\n</ul>\n<p>例如：<code>(A((BC(D))E))F)</code></p>\n<table>\n<thead>\n<tr>\n<th>捕获组</th>\n<th>内容</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>\\\\1</code></td>\n<td><code>A((BC(D))E)</code></td>\n</tr>\n<tr>\n<td><code>\\\\2</code></td>\n<td><code>(BC(D))E</code></td>\n</tr>\n<tr>\n<td><code>\\\\3</code></td>\n<td><code>BC(D)</code></td>\n</tr>\n<tr>\n<td><code>\\\\4</code></td>\n<td><code>D</code></td>\n</tr>\n<tr>\n<td><code>\\\\5</code></td>\n<td><code>F</code></td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<hr>\n</blockquote>\n<h3 id=\"包装类\"><a class=\"header-anchor\" href=\"#包装类\" aria-hidden=\"true\">#</a> 包装类</h3>\n<p>对于每种基本数据类型, Java 都提供了与其对应的类。这些类称为包装类。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">基本数据类型</th>\n<th style=\"text-align:left\"><code>byte</code></th>\n<th><code>short</code></th>\n<th><code>int</code></th>\n<th><code>long</code></th>\n<th><code>float</code></th>\n<th><code>double</code></th>\n<th><code>char</code></th>\n<th><code>boolean</code></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">包装类</td>\n<td style=\"text-align:left\"><code>Byte</code></td>\n<td><code>Short</code></td>\n<td><code>Integer</code></td>\n<td><code>Long</code></td>\n<td><code>Float</code></td>\n<td><code>Double</code></td>\n<td><code>Character</code></td>\n<td><code>Boolean</code></td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p><code>int</code>和<code>char</code>所对应的包装类为单词的全拼。</p>\n</blockquote>\n<h4 id=\"装箱\"><a class=\"header-anchor\" href=\"#装箱\" aria-hidden=\"true\">#</a> 装箱</h4>\n<p>将<strong>基本数据类型转换为对应的引用数据类型对象</strong>的操作。</p>\n<h4 id=\"自动装箱\"><a class=\"header-anchor\" href=\"#自动装箱\" aria-hidden=\"true\">#</a> 自动装箱 <Badge text=\"Java SE 5.0+\"/></h4>\n<p>将一个<strong>基本数据类型变量直接赋值给对应的引用数据类型对象</strong>。本质上调用了对应的<code>valueOf()</code>。</p>\n<p>例如：</p>\n<!--beforebegin--><div class=\"language-java extra-class\"><!--afterbegin--><pre v-pre class=\"language-java\"><code><span class=\"token class-name\">Integer</span> integer <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>相当于：</p>\n<!--beforebegin--><div class=\"language-java extra-class\"><!--afterbegin--><pre v-pre class=\"language-java\"><code><span class=\"token class-name\">Integer</span> integer <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><div class=\"warning custom-block\"><p class=\"custom-block-title\">注意</p>\n<p>所有相同类型地包装类对象之间值的比较，应当全部使用equals()。</p>\n<p>在值范围在 -128 到 127内的赋值，Integer对象会在IntegerCache.cache中产生，会服用已有对象。此时使用==比较是安全的。<br>\n但在范围之外的所有数据会在堆中产生，不会复用已有对象。<br>\n故推荐全部使用equals()来规避风险。</p>\n</div>\n<h4 id=\"自动拆箱\"><a class=\"header-anchor\" href=\"#自动拆箱\" aria-hidden=\"true\">#</a> 自动拆箱 <Badge text=\"Java SE 5.0+\"/></h4>\n<p>将一个引用数据类型对象直接赋值给对应基本数据类型变量。本质上调用了对象的<code>xxxValue()</code>。</p>\n<p>例如：</p>\n<!--beforebegin--><div class=\"language-java extra-class\"><!--afterbegin--><pre v-pre class=\"language-java\"><code><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> integer<span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>相当于：</p>\n<!--beforebegin--><div class=\"language-java extra-class\"><!--afterbegin--><pre v-pre class=\"language-java\"><code><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> integer<span class=\"token punctuation\">.</span><span class=\"token function\">intValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>当发生基本数据类型和包装类运算时，会发生自动拆箱。</p>\n<div class=\"tip custom-block\"><p class=\"custom-block-title\">关于哈希码</p>\n<ul>\n<li>\n<p>整数的哈希码是其本身，但小数的哈希码需要经过计算才能得到。</p>\n</li>\n<li>\n<p>字符的哈希码是其对应的编码。</p>\n</li>\n<li>\n<p>布尔类型的哈希码为特殊值，如<code>true</code>的哈希码为<code>1231</code>；<code>false</code>为<code>1237</code>。</p>\n</li>\n<li>\n<p>八种基本数据类型的哈希码都为固定值。</p>\n</li>\n</ul>\n</div>\n<blockquote>\n<hr>\n</blockquote>\n<h3 id=\"math类\"><a class=\"header-anchor\" href=\"#math类\" aria-hidden=\"true\">#</a> <code>Math</code>类</h3>\n<p><code>Math</code>类是一个最终类，其构造函数是私有的。</p>\n<p>该类提供了一系列静态方法，这些方法实现了基本的数学运算，如三角函数、绝对值、平方根等。</p>\n<h4 id=\"strictfp关键字\"><a class=\"header-anchor\" href=\"#strictfp关键字\" aria-hidden=\"true\">#</a> <code>strictfp</code>关键字</h4>\n<p>精确浮点(strict float point)，用于修饰类、接口和方法。</p>\n<p>被修饰的代码在执行中以80位二进制数来运算小数，结果会保留为64位。</p>\n<div class=\"tip custom-block\"><p class=\"custom-block-title\">特别的</p>\n<p>当适用精确运算时，Java 提供了<code>BigDecimal</code>类。</p>\n<p>这个类中对基础运算（如加、减、乘、除）提供了方法支持，故，不能使用运算符（如<code>+</code>、<code>-</code>、<code>*</code>、<code>/</code>）来进行运算。</p>\n</div>\n<blockquote>\n<hr>\n</blockquote>\n<h3 id=\"枚举\"><a class=\"header-anchor\" href=\"#枚举\" aria-hidden=\"true\">#</a> 枚举</h3>\n<h2 id=\"工具类库-package-java-util\"><a class=\"header-anchor\" href=\"#工具类库-package-java-util\" aria-hidden=\"true\">#</a> 工具类库 (Package <code>java.util</code>)</h2>\n<h3 id=\"date类-calendar类\"><a class=\"header-anchor\" href=\"#date类-calendar类\" aria-hidden=\"true\">#</a> <code>Date</code>类, <code>Calendar</code>类</h3>\n<h3 id=\"juc-package-java-util-concurrent\"><a class=\"header-anchor\" href=\"#juc-package-java-util-concurrent\" aria-hidden=\"true\">#</a> JUC (Package <code>java.util.concurrent</code>)</h3>\n<h3 id=\"集合\"><a class=\"header-anchor\" href=\"#集合\" aria-hidden=\"true\">#</a> 集合</h3>\n<h3 id=\"iterator接口\"><a class=\"header-anchor\" href=\"#iterator接口\" aria-hidden=\"true\">#</a> <code>Iterator</code>接口</h3>\n<h3 id=\"collections类\"><a class=\"header-anchor\" href=\"#collections类\" aria-hidden=\"true\">#</a> <code>Collections</code>类</h3>\n<h3 id=\"map接口\"><a class=\"header-anchor\" href=\"#map接口\" aria-hidden=\"true\">#</a> <code>Map</code>接口</h3>\n<h3 id=\"properties类\"><a class=\"header-anchor\" href=\"#properties类\" aria-hidden=\"true\">#</a> <code>Properties</code>类</h3>\n<h3 id=\"scanner类\"><a class=\"header-anchor\" href=\"#scanner类\" aria-hidden=\"true\">#</a> <code>Scanner</code>类</h3>\n<h2 id=\"输入-输出类库-package-java-io\"><a class=\"header-anchor\" href=\"#输入-输出类库-package-java-io\" aria-hidden=\"true\">#</a> 输入/输出类库 (Package <code>java.io</code>)</h2>\n<h3 id=\"file类\"><a class=\"header-anchor\" href=\"#file类\" aria-hidden=\"true\">#</a> <code>File</code>类</h3>\n<h3 id=\"i-o-stream\"><a class=\"header-anchor\" href=\"#i-o-stream\" aria-hidden=\"true\">#</a> I/O Stream</h3>\n<h2 id=\"网络类库-package-java-net\"><a class=\"header-anchor\" href=\"#网络类库-package-java-net\" aria-hidden=\"true\">#</a> 网络类库 (Package <code>java.net</code>)</h2>\n<h3 id=\"socket类\"><a class=\"header-anchor\" href=\"#socket类\" aria-hidden=\"true\">#</a> <code>Socket</code>类</h3>\n<h2 id=\"其他特性\"><a class=\"header-anchor\" href=\"#其他特性\" aria-hidden=\"true\">#</a> 其他特性</h2>\n<h3 id=\"断言\"><a class=\"header-anchor\" href=\"#断言\" aria-hidden=\"true\">#</a> 断言</h3>\n<h3 id=\"泛型-参数化类型\"><a class=\"header-anchor\" href=\"#泛型-参数化类型\" aria-hidden=\"true\">#</a> 泛型, 参数化类型</h3>\n</div>\n",null]}