{"remainingRequest":"C:\\Users\\momg\\Documents\\Workspace\\Github\\localhost-8080.github.io\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Users\\momg\\Documents\\Workspace\\Github\\localhost-8080.github.io\\node_modules\\cache-loader\\dist\\cjs.js??ref--1-0!C:\\Users\\momg\\Documents\\Workspace\\Github\\localhost-8080.github.io\\node_modules\\vue-loader\\lib\\index.js??ref--1-1!C:\\Users\\momg\\Documents\\Workspace\\Github\\localhost-8080.github.io\\node_modules\\vuepress\\lib\\webpack\\markdownLoader.js??ref--1-2!C:\\Users\\momg\\Documents\\Workspace\\Github\\localhost-8080.github.io\\docs\\java\\面向对象.md?vue&type=template&id=14d2c542&","dependencies":[{"path":"C:\\Users\\momg\\Documents\\Workspace\\Github\\localhost-8080.github.io\\docs\\java\\面向对象.md","mtime":1554879283860},{"path":"C:\\Users\\momg\\Documents\\WORKSPACE\\Github\\localhost-8080.github.io\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1546868327989},{"path":"C:\\Users\\momg\\Documents\\Workspace\\Github\\localhost-8080.github.io\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1558414119184},{"path":"C:\\Users\\momg\\Documents\\Workspace\\Github\\localhost-8080.github.io\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1546868327989},{"path":"C:\\Users\\momg\\Documents\\Workspace\\Github\\localhost-8080.github.io\\node_modules\\vue-loader\\lib\\index.js","mtime":1558414119184},{"path":"C:\\Users\\momg\\Documents\\Workspace\\Github\\localhost-8080.github.io\\node_modules\\vuepress\\lib\\webpack\\markdownLoader.js","mtime":1558414126042}],"contextDependencies":[],"result":["var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\"div\", { staticClass: \"content\" }, [\n    _vm._m(0),\n    _vm._v(\" \"),\n    _vm._m(1),\n    _vm._v(\" \"),\n    _vm._m(2),\n    _vm._v(\" \"),\n    _c(\n      \"p\",\n      [\n        _vm._v(\"面向过程注重过程，强调完成这个过程的具体动作。\"),\n        _c(\"br\"),\n        _vm._v(\"\\n其设计理念是\"),\n        _c(\"router-link\", { attrs: { to: \"./语法.html/#顺序结构\" } }, [\n          _vm._v(\"自顶向下，逐步求精\")\n        ]),\n        _vm._v(\"的。\")\n      ],\n      1\n    ),\n    _vm._v(\" \"),\n    _vm._m(3),\n    _vm._v(\" \"),\n    _vm._m(4),\n    _vm._v(\" \"),\n    _vm._m(5),\n    _vm._v(\" \"),\n    _vm._m(6),\n    _vm._v(\" \"),\n    _vm._m(7),\n    _vm._v(\" \"),\n    _vm._m(8),\n    _vm._v(\" \"),\n    _vm._m(9),\n    _vm._v(\" \"),\n    _vm._m(10),\n    _vm._v(\" \"),\n    _vm._m(11),\n    _vm._v(\" \"),\n    _vm._m(12),\n    _vm._v(\" \"),\n    _vm._m(13),\n    _vm._v(\" \"),\n    _vm._m(14),\n    _vm._v(\" \"),\n    _vm._m(15),\n    _vm._v(\" \"),\n    _vm._m(16),\n    _vm._v(\" \"),\n    _vm._m(17),\n    _vm._v(\" \"),\n    _vm._m(18),\n    _vm._v(\" \"),\n    _vm._m(19),\n    _vm._v(\" \"),\n    _vm._m(20),\n    _vm._v(\" \"),\n    _vm._m(21),\n    _vm._v(\" \"),\n    _vm._m(22),\n    _vm._v(\" \"),\n    _vm._m(23),\n    _vm._v(\" \"),\n    _vm._m(24),\n    _vm._v(\" \"),\n    _vm._m(25),\n    _vm._v(\" \"),\n    _vm._m(26),\n    _vm._v(\" \"),\n    _vm._m(27),\n    _vm._v(\" \"),\n    _vm._m(28),\n    _vm._v(\" \"),\n    _vm._m(29),\n    _vm._v(\" \"),\n    _vm._m(30),\n    _vm._v(\" \"),\n    _c(\"p\", [_vm._v(\"包是类的容器，提供了解决命名空间冲突的方案。\")]),\n    _vm._v(\" \"),\n    _vm._m(31),\n    _vm._v(\" \"),\n    _vm._m(32),\n    _vm._v(\" \"),\n    _vm._m(33),\n    _vm._v(\" \"),\n    _vm._m(34),\n    _vm._v(\" \"),\n    _vm._m(35),\n    _vm._v(\" \"),\n    _vm._m(36),\n    _vm._v(\" \"),\n    _vm._m(37),\n    _vm._v(\" \"),\n    _vm._m(38),\n    _vm._v(\" \"),\n    _c(\"p\", [\n      _vm._v(\"将一个事物的相关信息聚集在一个逻辑单元内部的机制就是封装。\")\n    ]),\n    _vm._v(\" \"),\n    _vm._m(39),\n    _vm._v(\" \"),\n    _vm._m(40),\n    _vm._v(\" \"),\n    _vm._m(41),\n    _vm._v(\" \"),\n    _c(\"p\", [\n      _vm._v(\n        \"对于两个类 A 和 B 来说，它们之间的关系是：B 由 A 派生而来（对于 B 类来说，它拥有 A 类的所有属性和方法），则可以说 B 类继承自 A 类。\"\n      )\n    ]),\n    _vm._v(\" \"),\n    _vm._m(42),\n    _vm._v(\" \"),\n    _vm._m(43),\n    _vm._v(\" \"),\n    _vm._m(44),\n    _vm._v(\" \"),\n    _vm._m(45),\n    _vm._v(\" \"),\n    _vm._m(46),\n    _vm._v(\" \"),\n    _vm._m(47),\n    _vm._v(\" \"),\n    _vm._m(48),\n    _vm._v(\" \"),\n    _vm._m(49),\n    _vm._v(\" \"),\n    _vm._m(50),\n    _vm._v(\" \"),\n    _vm._m(51),\n    _vm._v(\" \"),\n    _vm._m(52),\n    _vm._v(\" \"),\n    _vm._m(53),\n    _vm._v(\" \"),\n    _vm._m(54),\n    _vm._v(\" \"),\n    _vm._m(55),\n    _vm._v(\" \"),\n    _vm._m(56),\n    _vm._v(\" \"),\n    _vm._m(57),\n    _vm._v(\" \"),\n    _vm._m(58),\n    _vm._v(\" \"),\n    _vm._m(59),\n    _vm._v(\" \"),\n    _vm._m(60),\n    _vm._v(\" \"),\n    _vm._m(61),\n    _vm._v(\" \"),\n    _c(\"ul\", [\n      _vm._m(62),\n      _vm._v(\" \"),\n      _c(\"li\", [\n        _c(\n          \"p\",\n          [\n            _vm._v(\"随着类的加载而被加载到方法区中，在其内部自动赋\"),\n            _c(\"router-link\", { attrs: { to: \"./语法.html/#基本数据类型\" } }, [\n              _vm._v(\"默认值\")\n            ]),\n            _vm._v(\"。\")\n          ],\n          1\n        )\n      ]),\n      _vm._v(\" \"),\n      _vm._m(63),\n      _vm._v(\" \"),\n      _vm._m(64),\n      _vm._v(\" \"),\n      _vm._m(65)\n    ]),\n    _vm._v(\" \"),\n    _vm._m(66),\n    _vm._v(\" \"),\n    _c(\n      \"p\",\n      [\n        _c(\"strong\", [_vm._v(\"路标 ->\")]),\n        _vm._v(\" \"),\n        _c(\"router-link\", { attrs: { to: \"./#内存分区\" } }, [\n          _vm._v(\"Java 内存分区\")\n        ]),\n        _vm._v(\"。\")\n      ],\n      1\n    ),\n    _vm._v(\" \"),\n    _vm._m(67),\n    _vm._v(\" \"),\n    _vm._m(68),\n    _vm._v(\" \"),\n    _vm._m(69),\n    _vm._v(\" \"),\n    _vm._m(70),\n    _vm._v(\" \"),\n    _vm._m(71),\n    _vm._v(\" \"),\n    _vm._m(72),\n    _vm._v(\" \"),\n    _vm._m(73),\n    _vm._v(\" \"),\n    _vm._m(74),\n    _vm._m(75),\n    _vm._v(\" \"),\n    _vm._m(76),\n    _vm._v(\" \"),\n    _vm._m(77),\n    _vm._v(\" \"),\n    _vm._m(78),\n    _vm._v(\" \"),\n    _vm._m(79),\n    _vm._v(\" \"),\n    _vm._m(80),\n    _vm._v(\" \"),\n    _vm._m(81),\n    _vm._v(\" \"),\n    _vm._m(82),\n    _vm._v(\" \"),\n    _vm._m(83),\n    _vm._v(\" \"),\n    _vm._m(84),\n    _vm._v(\" \"),\n    _vm._m(85),\n    _vm._v(\" \"),\n    _vm._m(86),\n    _vm._v(\" \"),\n    _vm._m(87),\n    _vm._v(\" \"),\n    _vm._m(88),\n    _vm._v(\" \"),\n    _vm._m(89),\n    _vm._v(\" \"),\n    _vm._m(90),\n    _vm._v(\" \"),\n    _vm._m(91),\n    _vm._v(\" \"),\n    _vm._m(92),\n    _vm._v(\" \"),\n    _vm._m(93),\n    _vm._v(\" \"),\n    _vm._m(94),\n    _vm._v(\" \"),\n    _vm._m(95),\n    _vm._v(\" \"),\n    _c(\"ul\", [\n      _vm._m(96),\n      _vm._v(\" \"),\n      _vm._m(97),\n      _vm._v(\" \"),\n      _c(\"li\", [\n        _c(\n          \"p\",\n          [\n            _vm._v(\"接口中方法默认且只能为抽象方法\"),\n            _c(\"Badge\", { attrs: { type: \"error\", text: \"< Java SE 7.0\" } })\n          ],\n          1\n        ),\n        _vm._v(\" \"),\n        _c(\"ul\", [\n          _c(\n            \"li\",\n            [\n              _vm._v(\"在接口中，使用\"),\n              _c(\"code\", [_vm._v(\"default\")]),\n              _vm._v(\"关键字修饰的方法可以拥有方法体\"),\n              _c(\"Badge\", { attrs: { text: \"Java SE 8.0 +\" } })\n            ],\n            1\n          )\n        ])\n      ]),\n      _vm._v(\" \"),\n      _vm._m(98)\n    ]),\n    _vm._v(\" \"),\n    _vm._m(99),\n    _vm._v(\" \"),\n    _vm._m(100),\n    _vm._v(\" \"),\n    _vm._m(101),\n    _vm._v(\" \"),\n    _vm._m(102),\n    _vm._v(\" \"),\n    _c(\"div\", { staticClass: \"tip custom-block\" }, [\n      _c(\"p\", { staticClass: \"custom-block-title\" }, [_vm._v(\"特别地\")]),\n      _vm._v(\" \"),\n      _c(\"p\", [_vm._v(\"对于引用数据类型的强制转换有：\")]),\n      _vm._v(\" \"),\n      _c(\"blockquote\", [\n        _vm._m(103),\n        _vm._v(\" \"),\n        _c(\n          \"p\",\n          [\n            _vm._v(\"→ 详见\"),\n            _c(\n              \"router-link\",\n              { attrs: { to: \"./语法.html/#引用类型的强制类型转换\" } },\n              [_vm._v(\"引用类型的强制类型转换\")]\n            )\n          ],\n          1\n        )\n      ]),\n      _vm._v(\" \"),\n      _vm._m(104)\n    ]),\n    _vm._v(\" \"),\n    _vm._m(105),\n    _vm._v(\" \"),\n    _vm._m(106),\n    _vm._v(\" \"),\n    _c(\"p\", [_vm._v(\"定义在类或者接口内部的类称为内部类。\")]),\n    _vm._v(\" \"),\n    _vm._m(107),\n    _vm._v(\" \"),\n    _vm._m(108),\n    _vm._v(\" \"),\n    _vm._m(109),\n    _vm._v(\" \"),\n    _c(\"p\", [_vm._v(\"定义在类的内部，方法外部的类。\")]),\n    _vm._v(\" \"),\n    _vm._m(110),\n    _vm._v(\" \"),\n    _vm._m(111),\n    _vm._v(\" \"),\n    _vm._m(112),\n    _vm._v(\" \"),\n    _vm._m(113),\n    _vm._v(\" \"),\n    _vm._m(114),\n    _vm._v(\" \"),\n    _vm._m(115)\n  ])\n}\nvar staticRenderFns = [\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"h1\", { attrs: { id: \"面向对象\" } }, [\n      _c(\n        \"a\",\n        {\n          staticClass: \"header-anchor\",\n          attrs: { href: \"#面向对象\", \"aria-hidden\": \"true\" }\n        },\n        [_vm._v(\"#\")]\n      ),\n      _vm._v(\" 面向对象\")\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"h2\", { attrs: { id: \"概述\" } }, [\n      _c(\n        \"a\",\n        {\n          staticClass: \"header-anchor\",\n          attrs: { href: \"#概述\", \"aria-hidden\": \"true\" }\n        },\n        [_vm._v(\"#\")]\n      ),\n      _vm._v(\" 概述\")\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"h3\", { attrs: { id: \"面向过程\" } }, [\n      _c(\n        \"a\",\n        {\n          staticClass: \"header-anchor\",\n          attrs: { href: \"#面向过程\", \"aria-hidden\": \"true\" }\n        },\n        [_vm._v(\"#\")]\n      ),\n      _vm._v(\" 面向过程\")\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"h3\", { attrs: { id: \"面向对象-2\" } }, [\n      _c(\n        \"a\",\n        {\n          staticClass: \"header-anchor\",\n          attrs: { href: \"#面向对象-2\", \"aria-hidden\": \"true\" }\n        },\n        [_vm._v(\"#\")]\n      ),\n      _vm._v(\" 面向对象\")\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"p\", [\n      _vm._v(\n        \"面向对象 (Object-Oriented) 注重对象，当我们拥有这个对象时，我们就拥有了这个对象所具有的一切功能。\"\n      ),\n      _c(\"br\"),\n      _vm._v(\"\\n面向对象技术最大的三个特征是：\"),\n      _c(\"strong\", [_vm._v(\"封装\")]),\n      _vm._v(\"，\"),\n      _c(\"strong\", [_vm._v(\"继承\")]),\n      _vm._v(\"和\"),\n      _c(\"strong\", [_vm._v(\"多态\")]),\n      _vm._v(\"。\")\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"h2\", { attrs: { id: \"类和对象\" } }, [\n      _c(\n        \"a\",\n        {\n          staticClass: \"header-anchor\",\n          attrs: { href: \"#类和对象\", \"aria-hidden\": \"true\" }\n        },\n        [_vm._v(\"#\")]\n      ),\n      _vm._v(\" 类和对象\")\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"h3\", { attrs: { id: \"类\" } }, [\n      _c(\n        \"a\",\n        {\n          staticClass: \"header-anchor\",\n          attrs: { href: \"#类\", \"aria-hidden\": \"true\" }\n        },\n        [_vm._v(\"#\")]\n      ),\n      _vm._v(\" 类\")\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"p\", [\n      _vm._v(\"类 (Class) 是 Java 程序设计语言的基础。\"),\n      _c(\"br\"),\n      _vm._v(\n        \"\\n类似于显示生活中“种类”的概念，Java 中的类也是一种对某类事物进行抽象和归并。\"\n      ),\n      _c(\"br\"),\n      _vm._v(\n        \"\\n我们对某类事物进行抽象分析，去粗取精，由表及里，判断出这类事物最本质的特征，并用 Java 中预定的手法进行表述，就形成了一个类。\"\n      ),\n      _c(\"br\"),\n      _vm._v(\"\\n一个类包含两大内容：\"),\n      _c(\"strong\", [_vm._v(\"属性\")]),\n      _vm._v(\"和\"),\n      _c(\"strong\", [_vm._v(\"方法\")]),\n      _vm._v(\"（也称“\"),\n      _c(\"strong\", [_vm._v(\"成员变量\")]),\n      _vm._v(\"”和“\"),\n      _c(\"strong\", [_vm._v(\"成员方法\")]),\n      _vm._v(\"”）。\")\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"div\", { staticClass: \"tip custom-block\" }, [\n      _c(\"p\", { staticClass: \"custom-block-title\" }, [\n        _vm._v(\"成员变量和局部变量的区别\")\n      ]),\n      _vm._v(\" \"),\n      _c(\"ol\", [\n        _c(\"li\", [\n          _c(\"p\", [_vm._v(\"定义位置不同：\")]),\n          _vm._v(\" \"),\n          _c(\"ul\", [\n            _c(\"li\", [_c(\"p\", [_vm._v(\"成员变量是定义在类内方法外\")])]),\n            _vm._v(\" \"),\n            _c(\"li\", [_c(\"p\", [_vm._v(\"局部变量是定义在方法或者语句内部\")])])\n          ])\n        ]),\n        _vm._v(\" \"),\n        _c(\"li\", [\n          _c(\"p\", [_vm._v(\"作用域不同：\")]),\n          _vm._v(\" \"),\n          _c(\"ul\", [\n            _c(\"li\", [_c(\"p\", [_vm._v(\"成员变量作用域整个类\")])]),\n            _vm._v(\" \"),\n            _c(\"li\", [\n              _c(\"p\", [_vm._v(\"局部变量只能在定义的方法或者语句内部使用\")])\n            ])\n          ])\n        ]),\n        _vm._v(\" \"),\n        _c(\"li\", [\n          _c(\"p\", [_vm._v(\"内部存储位置不同：\")]),\n          _vm._v(\" \"),\n          _c(\"ul\", [\n            _c(\"li\", [\n              _c(\"p\", [\n                _vm._v(\"成员变量存在堆内存中，并且在堆内存中自动的赋予默认值\")\n              ])\n            ]),\n            _vm._v(\" \"),\n            _c(\"li\", [\n              _c(\"p\", [_vm._v(\"局部变量是存储在栈内存中，不会自动给值\")])\n            ])\n          ])\n        ]),\n        _vm._v(\" \"),\n        _c(\"li\", [\n          _c(\"p\", [_vm._v(\"生命周期不同：\")]),\n          _vm._v(\" \"),\n          _c(\"ul\", [\n            _c(\"li\", [\n              _c(\"p\", [\n                _vm._v(\n                  \"成员变量是随着对象的创建而加载到堆内存中，随着对象的回收而释放;\"\n                )\n              ])\n            ]),\n            _vm._v(\" \"),\n            _c(\"li\", [\n              _c(\"p\", [\n                _vm._v(\n                  \"局部变量在方法或者语句执行的时候才会创建，随着方法或者语句的结束而立即移除栈内存\"\n                )\n              ])\n            ])\n          ])\n        ])\n      ])\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"h3\", { attrs: { id: \"对象\" } }, [\n      _c(\n        \"a\",\n        {\n          staticClass: \"header-anchor\",\n          attrs: { href: \"#对象\", \"aria-hidden\": \"true\" }\n        },\n        [_vm._v(\"#\")]\n      ),\n      _vm._v(\" 对象\")\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"p\", [\n      _vm._v(\"对象 (Object) 是对类的实例化。\"),\n      _c(\"br\"),\n      _vm._v(\"\\n我们可以通过某类的具体对象来进行具体操作。\"),\n      _c(\"br\"),\n      _vm._v(\"\\n使用\"),\n      _c(\"code\", [_vm._v(\"new\")]),\n      _vm._v(\"关键字可以创建新的对象，使用\"),\n      _c(\"code\", [_vm._v(\".\")]),\n      _vm._v(\"运算符获取并使用该对象所具有的方法。\"),\n      _c(\"br\"),\n      _vm._v(\"\\n对象在程序中传递时，传递的是引用地址而不是数据本身。\")\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"h3\", { attrs: { id: \"this\" } }, [\n      _c(\n        \"a\",\n        {\n          staticClass: \"header-anchor\",\n          attrs: { href: \"#this\", \"aria-hidden\": \"true\" }\n        },\n        [_vm._v(\"#\")]\n      ),\n      _vm._v(\" \"),\n      _c(\"code\", [_vm._v(\"this\")])\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"ul\", [\n      _c(\"li\", [\n        _c(\"p\", [_c(\"code\", [_vm._v(\"this\")]), _vm._v(\"关键字\")]),\n        _vm._v(\" \"),\n        _c(\"ul\", [\n          _c(\"li\", [\n            _c(\"p\", [\n              _c(\"code\", [_vm._v(\"this\")]),\n              _vm._v(\"关键字可以表述一个对当前对象自身的引用。\")\n            ])\n          ]),\n          _vm._v(\" \"),\n          _c(\"li\", [\n            _c(\"p\", [\n              _vm._v(\"在本类中使用\"),\n              _c(\"code\", [_vm._v(\"this\")]),\n              _vm._v(\"可以调用本类的\"),\n              _c(\"strong\", [_vm._v(\"非静态方法\")]),\n              _vm._v(\"和\"),\n              _c(\"strong\", [_vm._v(\"非静态属性\")]),\n              _vm._v(\"。\")\n            ])\n          ])\n        ])\n      ]),\n      _vm._v(\" \"),\n      _c(\"li\", [\n        _c(\"p\", [_c(\"code\", [_vm._v(\"this()\")]), _vm._v(\"语句\")]),\n        _vm._v(\" \"),\n        _c(\"ul\", [\n          _c(\"li\", [\n            _c(\"p\", [\n              _vm._v(\"表示在本类的构造方法中调用\"),\n              _c(\"strong\", [_vm._v(\"本类\")]),\n              _vm._v(\"的其他的对应形式的构造函数。\")\n            ])\n          ]),\n          _vm._v(\" \"),\n          _c(\"li\", [_c(\"p\", [_vm._v(\"必须放在构造函数的第一行。\")])])\n        ])\n      ])\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"h3\", { attrs: { id: \"super\" } }, [\n      _c(\n        \"a\",\n        {\n          staticClass: \"header-anchor\",\n          attrs: { href: \"#super\", \"aria-hidden\": \"true\" }\n        },\n        [_vm._v(\"#\")]\n      ),\n      _vm._v(\" \"),\n      _c(\"code\", [_vm._v(\"super\")])\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"ul\", [\n      _c(\"li\", [\n        _c(\"p\", [_c(\"code\", [_vm._v(\"super\")]), _vm._v(\"关键字\")]),\n        _vm._v(\" \"),\n        _c(\"ul\", [\n          _c(\"li\", [\n            _c(\"p\", [\n              _c(\"code\", [_vm._v(\"super\")]),\n              _vm._v(\"关键字用以表示对父类对象的引用。\")\n            ])\n          ]),\n          _vm._v(\" \"),\n          _c(\"li\", [_c(\"p\", [_vm._v(\"表示在子类中调用父类中的方法和属性。\")])])\n        ])\n      ]),\n      _vm._v(\" \"),\n      _c(\"li\", [\n        _c(\"p\", [_c(\"code\", [_vm._v(\"super()\")]), _vm._v(\"语句\")]),\n        _vm._v(\" \"),\n        _c(\"ul\", [\n          _c(\"li\", [\n            _c(\"p\", [\n              _vm._v(\"表示子类的构造方法中，调用父类中对应形式的构造方法。\")\n            ])\n          ]),\n          _vm._v(\" \"),\n          _c(\"li\", [_c(\"p\", [_vm._v(\"必须写在子类构造函数的第一行。\")])]),\n          _vm._v(\" \"),\n          _c(\"li\", [\n            _c(\"p\", [\n              _vm._v(\"每一个子类的构造函数都直接或间接的含有\"),\n              _c(\"code\", [_vm._v(\"super()\")]),\n              _vm._v(\"语句。\")\n            ])\n          ]),\n          _vm._v(\" \"),\n          _c(\"li\", [\n            _c(\"p\", [\n              _vm._v(\n                \"如果父类中没有提供无参构造，那么此时子类的构造函数中必须手动添加一个\"\n              ),\n              _c(\"code\", [_vm._v(\"super()\")]),\n              _vm._v(\"语句。\")\n            ])\n          ])\n        ])\n      ])\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"h2\", { attrs: { id: \"方法\" } }, [\n      _c(\n        \"a\",\n        {\n          staticClass: \"header-anchor\",\n          attrs: { href: \"#方法\", \"aria-hidden\": \"true\" }\n        },\n        [_vm._v(\"#\")]\n      ),\n      _vm._v(\" 方法\")\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"p\", [\n      _vm._v(\"方法 (Method) , 也称为函数。\"),\n      _c(\"br\"),\n      _vm._v(\"\\n为实现代码复用，需要将代码进行封装。这种封装的形式就是方法。\"),\n      _c(\"br\"),\n      _vm._v(\n        \"\\n方法在定义好之后，必须明确返回值类型。若方法有明确的返回值类型，还要确保方法有返回值。\"\n      )\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"p\", [_c(\"strong\", [_vm._v(\"作用\")]), _vm._v(\"：\")])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"ul\", [\n      _c(\"li\", [_c(\"p\", [_vm._v(\"提高代码复用性。\")])]),\n      _vm._v(\" \"),\n      _c(\"li\", [_c(\"p\", [_vm._v(\"使代码结构更加清晰。\")])]),\n      _vm._v(\" \"),\n      _c(\"li\", [_c(\"p\", [_vm._v(\"便于模块化开发。\")])])\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"p\", [\n      _c(\"strong\", [_vm._v(\"方法签名\")]),\n      _vm._v(\n        \"：一个方法由其修饰符、返回值类型、方法名和形式参数唯一确定，这一组数据称为方法签名。\"\n      )\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"h3\", { attrs: { id: \"构造方法\" } }, [\n      _c(\n        \"a\",\n        {\n          staticClass: \"header-anchor\",\n          attrs: { href: \"#构造方法\", \"aria-hidden\": \"true\" }\n        },\n        [_vm._v(\"#\")]\n      ),\n      _vm._v(\" 构造方法\")\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"p\", [\n      _vm._v(\"与类同名且没有返回值类型。\"),\n      _c(\"br\"),\n      _vm._v(\"\\n可以被重载。\"),\n      _c(\"br\"),\n      _vm._v(\"\\n构造函数中可以存在\"),\n      _c(\"code\", [_vm._v(\"return\")]),\n      _vm._v(\"语句，用于规避不合理的数据。\"),\n      _c(\"br\"),\n      _vm._v(\" \"),\n      _c(\"strong\", [_vm._v(\"作用\")]),\n      _vm._v(\"：用于创建对象（标识对象创建的开始和结束）\")\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"h3\", { attrs: { id: \"方法的使用\" } }, [\n      _c(\n        \"a\",\n        {\n          staticClass: \"header-anchor\",\n          attrs: { href: \"#方法的使用\", \"aria-hidden\": \"true\" }\n        },\n        [_vm._v(\"#\")]\n      ),\n      _vm._v(\" 方法的使用\")\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"ul\", [\n      _c(\"li\", [\n        _c(\"p\", [\n          _vm._v(\"方法递归\"),\n          _c(\"br\"),\n          _vm._v(\" \"),\n          _c(\"strong\", [_vm._v(\"核心\")]),\n          _vm._v(\"：方法调用自己本身\")\n        ]),\n        _vm._v(\" \"),\n        _c(\"div\", { staticClass: \"warning custom-block\" }, [\n          _c(\"p\", { staticClass: \"custom-block-title\" }, [_vm._v(\"注意\")]),\n          _vm._v(\" \"),\n          _c(\"p\", [\n            _vm._v(\"需要控制好结束条件，若递归层数太深，则出现栈溢出错误。\")\n          ])\n        ])\n      ]),\n      _vm._v(\" \"),\n      _c(\"li\", [\n        _c(\"p\", [\n          _vm._v(\"方法重载 (Method Overload)\"),\n          _c(\"br\"),\n          _vm._v(\"\\n详见\"),\n          _c(\"a\", { attrs: { href: \"#%E5%A4%9A%E6%80%81\" } }, [_vm._v(\"多态\")]),\n          _vm._v(\"。\")\n        ])\n      ]),\n      _vm._v(\" \"),\n      _c(\"li\", [\n        _c(\"p\", [\n          _vm._v(\"方法覆盖 (Method Override)\"),\n          _c(\"br\"),\n          _vm._v(\"\\n详见\"),\n          _c(\"a\", { attrs: { href: \"#%E5%A4%9A%E6%80%81\" } }, [_vm._v(\"多态\")]),\n          _vm._v(\"。\")\n        ])\n      ])\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"div\", { staticClass: \"warning custom-block\" }, [\n      _c(\"p\", { staticClass: \"custom-block-title\" }, [_vm._v(\"注意\")]),\n      _vm._v(\" \"),\n      _c(\"p\", [\n        _vm._v(\n          \"在传递参数的时候，对于基本类型而言，传递的实际值；对于引用类型而言，传递的是地址。\"\n        ),\n        _c(\"br\"),\n        _vm._v(\n          \"\\n例如在传递数组对象时，只要地址不发生改变，方法中的一切变化会作用于原数组。\"\n        )\n      ])\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"h2\", { attrs: { id: \"代码块\" } }, [\n      _c(\n        \"a\",\n        {\n          staticClass: \"header-anchor\",\n          attrs: { href: \"#代码块\", \"aria-hidden\": \"true\" }\n        },\n        [_vm._v(\"#\")]\n      ),\n      _vm._v(\" 代码块\")\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"h3\", { attrs: { id: \"构造代码块\" } }, [\n      _c(\n        \"a\",\n        {\n          staticClass: \"header-anchor\",\n          attrs: { href: \"#构造代码块\", \"aria-hidden\": \"true\" }\n        },\n        [_vm._v(\"#\")]\n      ),\n      _vm._v(\" 构造代码块\")\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"ul\", [\n      _c(\"li\", [_c(\"p\", [_vm._v(\"定义在类内。\")])]),\n      _vm._v(\" \"),\n      _c(\"li\", [\n        _c(\"p\", [\n          _vm._v(\"也称“初始化代码块”，在创建对象时执行构造方法之前先执行。\")\n        ])\n      ]),\n      _vm._v(\" \"),\n      _c(\"li\", [_c(\"p\", [_vm._v(\"用于完成一些初始化的操作。\")])])\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"h3\", { attrs: { id: \"局部代码块\" } }, [\n      _c(\n        \"a\",\n        {\n          staticClass: \"header-anchor\",\n          attrs: { href: \"#局部代码块\", \"aria-hidden\": \"true\" }\n        },\n        [_vm._v(\"#\")]\n      ),\n      _vm._v(\" 局部代码块\")\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"ul\", [\n      _c(\"li\", [_c(\"p\", [_vm._v(\"定义在方法或代码块中。\")])]),\n      _vm._v(\" \"),\n      _c(\"li\", [_c(\"p\", [_vm._v(\"限制变量的生命周期和使用范围。\")])]),\n      _vm._v(\" \"),\n      _c(\"li\", [_c(\"p\", [_vm._v(\"可以提高内存的利用率。\")])])\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"h2\", { attrs: { id: \"包\" } }, [\n      _c(\n        \"a\",\n        {\n          staticClass: \"header-anchor\",\n          attrs: { href: \"#包\", \"aria-hidden\": \"true\" }\n        },\n        [_vm._v(\"#\")]\n      ),\n      _vm._v(\" 包\")\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"h3\", { attrs: { id: \"包的声明\" } }, [\n      _c(\n        \"a\",\n        {\n          staticClass: \"header-anchor\",\n          attrs: { href: \"#包的声明\", \"aria-hidden\": \"true\" }\n        },\n        [_vm._v(\"#\")]\n      ),\n      _vm._v(\" 包的声明\")\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"ul\", [\n      _c(\"li\", [\n        _c(\"p\", [\n          _vm._v(\"使用\"),\n          _c(\"code\", [_vm._v(\"package\")]),\n          _vm._v(\"关键字声明定义一个包。\")\n        ])\n      ]),\n      _vm._v(\" \"),\n      _c(\"li\", [\n        _c(\"p\", [\n          _vm._v(\"一个\"),\n          _c(\"code\", [_vm._v(\".java\")]),\n          _vm._v(\"文件只允许存在一个\"),\n          _c(\"code\", [_vm._v(\"package\")]),\n          _vm._v(\"语句。\")\n        ])\n      ]),\n      _vm._v(\" \"),\n      _c(\"li\", [\n        _c(\"p\", [\n          _vm._v(\"包的声明必须放在\"),\n          _c(\"code\", [_vm._v(\".java\")]),\n          _vm._v(\"文件的首行。\")\n        ])\n      ])\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"h3\", { attrs: { id: \"包的导入\" } }, [\n      _c(\n        \"a\",\n        {\n          staticClass: \"header-anchor\",\n          attrs: { href: \"#包的导入\", \"aria-hidden\": \"true\" }\n        },\n        [_vm._v(\"#\")]\n      ),\n      _vm._v(\" 包的导入\")\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"ul\", [\n      _c(\"li\", [\n        _c(\"p\", [\n          _vm._v(\"使用\"),\n          _c(\"code\", [_vm._v(\"import\")]),\n          _vm._v(\"关键字来导入别的包。\")\n        ])\n      ]),\n      _vm._v(\" \"),\n      _c(\"li\", [\n        _c(\"p\", [\n          _c(\"code\", [_vm._v(\"*\")]),\n          _vm._v(\"为通配符，表示导入该包下所有类（不包括子包中的类）。\")\n        ])\n      ])\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"h3\", { attrs: { id: \"jdk-常用包\" } }, [\n      _c(\n        \"a\",\n        {\n          staticClass: \"header-anchor\",\n          attrs: { href: \"#jdk-常用包\", \"aria-hidden\": \"true\" }\n        },\n        [_vm._v(\"#\")]\n      ),\n      _vm._v(\" JDK 常用包\")\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"ul\", [\n      _c(\"li\", [\n        _c(\"p\", [\n          _c(\"code\", [_vm._v(\"java.lang\")]),\n          _vm._v(\"：核心包，在程序启动时自动加载到方法区，不需要手动导入\")\n        ])\n      ]),\n      _vm._v(\" \"),\n      _c(\"li\", [\n        _c(\"p\", [\n          _c(\"code\", [_vm._v(\"java.util\")]),\n          _vm._v(\"：工具包，存放简化操作的工具类\")\n        ])\n      ]),\n      _vm._v(\" \"),\n      _c(\"li\", [\n        _c(\"p\", [_c(\"code\", [_vm._v(\"java.io\")]), _vm._v(\"：数据传输\")])\n      ]),\n      _vm._v(\" \"),\n      _c(\"li\", [\n        _c(\"p\", [_c(\"code\", [_vm._v(\"java.net\")]), _vm._v(\"：网络传输\")])\n      ]),\n      _vm._v(\" \"),\n      _c(\"li\", [\n        _c(\"p\", [_c(\"code\", [_vm._v(\"java.math\")]), _vm._v(\"：数学运算\")])\n      ]),\n      _vm._v(\" \"),\n      _c(\"li\", [\n        _c(\"p\", [_c(\"code\", [_vm._v(\"java.sql\")]), _vm._v(\"：数据库相关\")])\n      ]),\n      _vm._v(\" \"),\n      _c(\"li\", [\n        _c(\"p\", [_c(\"code\", [_vm._v(\"java.awt\")]), _vm._v(\"：图形用户界面\")])\n      ]),\n      _vm._v(\" \"),\n      _c(\"li\", [\n        _c(\"p\", [_c(\"code\", [_vm._v(\"java.security\")]), _vm._v(\"：数据安全\")])\n      ]),\n      _vm._v(\" \"),\n      _c(\"li\", [\n        _c(\"p\", [_c(\"code\", [_vm._v(\"javax.xxx\")]), _vm._v(\"：扩展\")])\n      ]),\n      _vm._v(\" \"),\n      _c(\"li\", [\n        _c(\"p\", [\n          _c(\"code\", [_vm._v(\"org.xxx\")]),\n          _vm._v(\"：第三方厂商、开源社区提供的包\")\n        ])\n      ])\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"div\", { staticClass: \"warning custom-block\" }, [\n      _c(\"p\", { staticClass: \"custom-block-title\" }, [_vm._v(\"注意\")]),\n      _vm._v(\" \"),\n      _c(\"ul\", [\n        _c(\"li\", [\n          _c(\"p\", [\n            _vm._v(\"包名不能以\"),\n            _c(\"code\", [_vm._v(\"java\")]),\n            _vm._v(\"、\"),\n            _c(\"code\", [_vm._v(\"javax\")]),\n            _vm._v(\"或者\"),\n            _c(\"code\", [_vm._v(\"org\")]),\n            _vm._v(\"开头。\")\n          ])\n        ]),\n        _vm._v(\" \"),\n        _c(\"li\", [\n          _c(\"p\", [\n            _vm._v(\"同包，或\"),\n            _c(\"code\", [_vm._v(\"lang\")]),\n            _vm._v(\"包下的类不使用\"),\n            _c(\"code\", [_vm._v(\"import\")]),\n            _vm._v(\"语句导入\")\n          ])\n        ])\n      ])\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"h2\", { attrs: { id: \"封装\" } }, [\n      _c(\n        \"a\",\n        {\n          staticClass: \"header-anchor\",\n          attrs: { href: \"#封装\", \"aria-hidden\": \"true\" }\n        },\n        [_vm._v(\"#\")]\n      ),\n      _vm._v(\" 封装\")\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"p\", [\n      _c(\"strong\", [_vm._v(\"形式\")]),\n      _vm._v(\"：方法、属性私有化（类的封装）、内部类等。\")\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"p\", [\n      _c(\"strong\", [_vm._v(\"优点\")]),\n      _vm._v(\"：提高复用性和安全性，使代码结构更加紧密。\")\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"h2\", { attrs: { id: \"继承\" } }, [\n      _c(\n        \"a\",\n        {\n          staticClass: \"header-anchor\",\n          attrs: { href: \"#继承\", \"aria-hidden\": \"true\" }\n        },\n        [_vm._v(\"#\")]\n      ),\n      _vm._v(\" 继承\")\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"h3\", { attrs: { id: \"形式\" } }, [\n      _c(\n        \"a\",\n        {\n          staticClass: \"header-anchor\",\n          attrs: { href: \"#形式\", \"aria-hidden\": \"true\" }\n        },\n        [_vm._v(\"#\")]\n      ),\n      _vm._v(\" 形式\")\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"p\", [\n      _vm._v(\"使用\"),\n      _c(\"code\", [_vm._v(\"extends\")]),\n      _vm._v(\"关键字实现继承。\"),\n      _c(\"br\"),\n      _vm._v(\"\\nJava 仅支持单继承（一个子类只能有一个父类）。\")\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"h3\", { attrs: { id: \"单继承与多继承\" } }, [\n      _c(\n        \"a\",\n        {\n          staticClass: \"header-anchor\",\n          attrs: { href: \"#单继承与多继承\", \"aria-hidden\": \"true\" }\n        },\n        [_vm._v(\"#\")]\n      ),\n      _vm._v(\" 单继承与多继承\")\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"ul\", [\n      _c(\"li\", [\n        _c(\"p\", [\n          _vm._v(\"单继承\"),\n          _c(\"br\"),\n          _vm._v(\"\\n子类只能有一个父类的继承形式。\")\n        ]),\n        _vm._v(\" \"),\n        _c(\"p\", [_c(\"strong\", [_vm._v(\"优点\")]), _vm._v(\"：\")]),\n        _vm._v(\" \"),\n        _c(\"ul\", [\n          _c(\"li\", [_c(\"p\", [_vm._v(\"可以提高代码的复用性\")])]),\n          _vm._v(\" \"),\n          _c(\"li\", [\n            _c(\"p\", [_vm._v(\"可以避免方法调用的混乱，提高了方法调用的安全性\")])\n          ])\n        ])\n      ]),\n      _vm._v(\" \"),\n      _c(\"li\", [\n        _c(\"p\", [\n          _vm._v(\"多继承\"),\n          _c(\"br\"),\n          _vm._v(\"\\n子类可以拥有多个父类的继承形式。\")\n        ]),\n        _vm._v(\" \"),\n        _c(\"p\", [_c(\"strong\", [_vm._v(\"优点\")]), _vm._v(\"：\")]),\n        _vm._v(\" \"),\n        _c(\"ul\", [_c(\"li\", [_vm._v(\"代码的复用性上要优于单继承\")])])\n      ]),\n      _vm._v(\" \"),\n      _c(\"li\", [\n        _c(\"p\", [_vm._v(\"举例\")]),\n        _vm._v(\" \"),\n        _c(\"ul\", [\n          _c(\"li\", [\n            _c(\"p\", [\n              _c(\"code\", [_vm._v(\"iPhone 类\")]),\n              _vm._v(\"仅继承自\"),\n              _c(\"code\", [_vm._v(\"智能设备类\")]),\n              _vm._v(\"。（单继承）\")\n            ]),\n            _vm._v(\" \"),\n            _c(\"p\", [\n              _c(\"img\", {\n                attrs: {\n                  src: \"/img/%E5%8D%95%E7%BB%A7%E6%89%BF.jpg\",\n                  alt: \"单继承\"\n                }\n              })\n            ])\n          ]),\n          _vm._v(\" \"),\n          _c(\"li\", [\n            _c(\"p\", [\n              _c(\"code\", [_vm._v(\"Apple Watch 类\")]),\n              _vm._v(\"同时继承自\"),\n              _c(\"code\", [_vm._v(\"时钟类\")]),\n              _vm._v(\"和\"),\n              _c(\"code\", [_vm._v(\"只能设备类\")]),\n              _vm._v(\"。（多继承）\")\n            ]),\n            _vm._v(\" \"),\n            _c(\"p\", [\n              _c(\"img\", {\n                attrs: {\n                  src: \"/img/%E5%A4%9A%E7%BB%A7%E6%89%BF.jpg\",\n                  alt: \"多继承\"\n                }\n              })\n            ])\n          ])\n        ])\n      ])\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"h3\", { attrs: { id: \"直接继承与间接继承\" } }, [\n      _c(\n        \"a\",\n        {\n          staticClass: \"header-anchor\",\n          attrs: { href: \"#直接继承与间接继承\", \"aria-hidden\": \"true\" }\n        },\n        [_vm._v(\"#\")]\n      ),\n      _vm._v(\" 直接继承与间接继承\")\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"ul\", [\n      _c(\"li\", [\n        _c(\"p\", [\n          _vm._v(\"直接继承\"),\n          _c(\"br\"),\n          _vm._v(\"\\nB 类直接派生于 A 类，称直接继承。\")\n        ])\n      ]),\n      _vm._v(\" \"),\n      _c(\"li\", [\n        _c(\"p\", [\n          _vm._v(\n            \"间接继承\\nB 类直接派生于 A类，C 类直接派生于 B 类。则称 C 类间接继承于 A 类。\"\n          ),\n          _c(\"br\"),\n          _vm._v(\" \"),\n          _c(\"img\", {\n            attrs: {\n              src: \"/img/%E9%97%B4%E6%8E%A5%E7%BB%A7%E6%89%BF.jpg\",\n              alt: \"间接继承\"\n            }\n          })\n        ])\n      ])\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"div\", { staticClass: \"tip custom-block\" }, [\n      _c(\"p\", { staticClass: \"custom-block-title\" }, [_vm._v(\"特别地\")]),\n      _vm._v(\" \"),\n      _c(\"p\", [_vm._v(\"子类继承自父类时，父类中这些内容子类不可见：\")]),\n      _vm._v(\" \"),\n      _c(\"ul\", [\n        _c(\"li\", [_c(\"p\", [_c(\"code\", [_vm._v(\"private\")])])]),\n        _vm._v(\" \"),\n        _c(\"li\", [_c(\"p\", [_vm._v(\"代码块\")])]),\n        _vm._v(\" \"),\n        _c(\"li\", [_c(\"p\", [_vm._v(\"构造方法\")])])\n      ])\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"h2\", { attrs: { id: \"多态\" } }, [\n      _c(\n        \"a\",\n        {\n          staticClass: \"header-anchor\",\n          attrs: { href: \"#多态\", \"aria-hidden\": \"true\" }\n        },\n        [_vm._v(\"#\")]\n      ),\n      _vm._v(\" 多态\")\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"ul\", [\n      _c(\"li\", [\n        _c(\"p\", [\n          _vm._v(\n            \"当众多对象接收到同一个消息后，可以产生不同的响应效果，这种现象称为多态。\"\n          )\n        ])\n      ]),\n      _vm._v(\" \"),\n      _c(\"li\", [_c(\"p\", [_vm._v(\"多态性依托于继承性。\")])]),\n      _vm._v(\" \"),\n      _c(\"li\", [\n        _c(\"p\", [_vm._v(\"多态主要针对的是对象具有的行为，而不是属性。\")])\n      ]),\n      _vm._v(\" \"),\n      _c(\"li\", [_c(\"p\", [_vm._v(\"可以提高代码的灵活性，配合反射实现解耦。\")])])\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"h3\", { attrs: { id: \"编译时多态\" } }, [\n      _c(\n        \"a\",\n        {\n          staticClass: \"header-anchor\",\n          attrs: { href: \"#编译时多态\", \"aria-hidden\": \"true\" }\n        },\n        [_vm._v(\"#\")]\n      ),\n      _vm._v(\" 编译时多态\")\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"p\", [\n      _vm._v(\"方法重载 (Method Overload)\"),\n      _c(\"br\"),\n      _vm._v(\"\\n是\"),\n      _c(\"strong\", [_vm._v(\"行为多态\")]),\n      _vm._v(\"。\"),\n      _c(\"br\"),\n      _vm._v(\n        \"\\n发生在同一个类中，方法名一致而参数列表不同。和修饰符、返回值类型、异常无关。\"\n      )\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"h3\", { attrs: { id: \"运行时多态\" } }, [\n      _c(\n        \"a\",\n        {\n          staticClass: \"header-anchor\",\n          attrs: { href: \"#运行时多态\", \"aria-hidden\": \"true\" }\n        },\n        [_vm._v(\"#\")]\n      ),\n      _vm._v(\" 运行时多态\")\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"ul\", [\n      _c(\"li\", [\n        _c(\"p\", [_vm._v(\"向上造型\")]),\n        _vm._v(\" \"),\n        _c(\"ul\", [\n          _c(\"li\", [\n            _c(\"p\", [\n              _vm._v(\"是\"),\n              _c(\"strong\", [_vm._v(\"对象多态\")]),\n              _vm._v(\"。\")\n            ])\n          ]),\n          _vm._v(\" \"),\n          _c(\"li\", [\n            _c(\"p\", [\n              _vm._v(\"父类引用指向子类对象。\"),\n              _c(\"br\"),\n              _vm._v(\"\\n代码高亮标出。\")\n            ]),\n            _vm._v(\" \"),\n            _c(\"p\", [_c(\"strong\", [_vm._v(\"Input\")])]),\n            _vm._v(\" \"),\n            _c(\"div\", { staticClass: \"language-java extra-class\" }, [\n              _c(\"div\", { staticClass: \"highlight-lines\" }, [\n                _c(\"br\"),\n                _c(\"br\"),\n                _c(\"br\"),\n                _c(\"br\"),\n                _c(\"br\"),\n                _c(\"br\"),\n                _c(\"br\"),\n                _c(\"br\"),\n                _c(\"br\"),\n                _c(\"br\"),\n                _c(\"div\", { staticClass: \"highlighted\" }, [_vm._v(\" \")]),\n                _c(\"br\"),\n                _c(\"br\"),\n                _c(\"br\"),\n                _c(\"br\"),\n                _c(\"br\")\n              ]),\n              _c(\"pre\", { pre: true, attrs: { class: \"language-java\" } }, [\n                _c(\"code\", [\n                  _c(\"span\", { pre: true, attrs: { class: \"token keyword\" } }, [\n                    _vm._v(\"class\")\n                  ]),\n                  _vm._v(\" \"),\n                  _c(\n                    \"span\",\n                    { pre: true, attrs: { class: \"token class-name\" } },\n                    [_vm._v(\"Super\")]\n                  ),\n                  _vm._v(\" \"),\n                  _c(\n                    \"span\",\n                    { pre: true, attrs: { class: \"token punctuation\" } },\n                    [_vm._v(\"{\")]\n                  ),\n                  _vm._v(\"\\n  \"),\n                  _c(\"span\", { pre: true, attrs: { class: \"token comment\" } }, [\n                    _vm._v(\"// ...\")\n                  ]),\n                  _vm._v(\"\\n\"),\n                  _c(\n                    \"span\",\n                    { pre: true, attrs: { class: \"token punctuation\" } },\n                    [_vm._v(\"}\")]\n                  ),\n                  _vm._v(\"\\n\\n\"),\n                  _c(\"span\", { pre: true, attrs: { class: \"token keyword\" } }, [\n                    _vm._v(\"class\")\n                  ]),\n                  _vm._v(\" \"),\n                  _c(\n                    \"span\",\n                    { pre: true, attrs: { class: \"token class-name\" } },\n                    [_vm._v(\"Sub\")]\n                  ),\n                  _vm._v(\" \"),\n                  _c(\"span\", { pre: true, attrs: { class: \"token keyword\" } }, [\n                    _vm._v(\"extends\")\n                  ]),\n                  _vm._v(\" \"),\n                  _c(\n                    \"span\",\n                    { pre: true, attrs: { class: \"token class-name\" } },\n                    [_vm._v(\"Super\")]\n                  ),\n                  _vm._v(\" \"),\n                  _c(\n                    \"span\",\n                    { pre: true, attrs: { class: \"token punctuation\" } },\n                    [_vm._v(\"{\")]\n                  ),\n                  _vm._v(\"\\n  \"),\n                  _c(\"span\", { pre: true, attrs: { class: \"token comment\" } }, [\n                    _vm._v(\"// ...\")\n                  ]),\n                  _vm._v(\"\\n\"),\n                  _c(\n                    \"span\",\n                    { pre: true, attrs: { class: \"token punctuation\" } },\n                    [_vm._v(\"}\")]\n                  ),\n                  _vm._v(\"\\n\\n\"),\n                  _c(\"span\", { pre: true, attrs: { class: \"token keyword\" } }, [\n                    _vm._v(\"class\")\n                  ]),\n                  _vm._v(\" \"),\n                  _c(\n                    \"span\",\n                    { pre: true, attrs: { class: \"token class-name\" } },\n                    [_vm._v(\"App\")]\n                  ),\n                  _vm._v(\" \"),\n                  _c(\n                    \"span\",\n                    { pre: true, attrs: { class: \"token punctuation\" } },\n                    [_vm._v(\"{\")]\n                  ),\n                  _vm._v(\"\\n  \"),\n                  _c(\"span\", { pre: true, attrs: { class: \"token keyword\" } }, [\n                    _vm._v(\"public\")\n                  ]),\n                  _vm._v(\" \"),\n                  _c(\"span\", { pre: true, attrs: { class: \"token keyword\" } }, [\n                    _vm._v(\"static\")\n                  ]),\n                  _vm._v(\" \"),\n                  _c(\"span\", { pre: true, attrs: { class: \"token keyword\" } }, [\n                    _vm._v(\"void\")\n                  ]),\n                  _vm._v(\" \"),\n                  _c(\n                    \"span\",\n                    { pre: true, attrs: { class: \"token function\" } },\n                    [_vm._v(\"main\")]\n                  ),\n                  _c(\n                    \"span\",\n                    { pre: true, attrs: { class: \"token punctuation\" } },\n                    [_vm._v(\"(\")]\n                  ),\n                  _c(\n                    \"span\",\n                    { pre: true, attrs: { class: \"token class-name\" } },\n                    [_vm._v(\"String\")]\n                  ),\n                  _vm._v(\" args\"),\n                  _c(\n                    \"span\",\n                    { pre: true, attrs: { class: \"token punctuation\" } },\n                    [_vm._v(\"[\")]\n                  ),\n                  _c(\n                    \"span\",\n                    { pre: true, attrs: { class: \"token punctuation\" } },\n                    [_vm._v(\"]\")]\n                  ),\n                  _c(\n                    \"span\",\n                    { pre: true, attrs: { class: \"token punctuation\" } },\n                    [_vm._v(\")\")]\n                  ),\n                  _vm._v(\" \"),\n                  _c(\n                    \"span\",\n                    { pre: true, attrs: { class: \"token punctuation\" } },\n                    [_vm._v(\"{\")]\n                  ),\n                  _vm._v(\"\\n    \"),\n                  _c(\n                    \"span\",\n                    { pre: true, attrs: { class: \"token class-name\" } },\n                    [_vm._v(\"Super\")]\n                  ),\n                  _vm._v(\" \"),\n                  _c(\"span\", { pre: true, attrs: { class: \"token keyword\" } }, [\n                    _vm._v(\"super\")\n                  ]),\n                  _vm._v(\" \"),\n                  _c(\n                    \"span\",\n                    { pre: true, attrs: { class: \"token operator\" } },\n                    [_vm._v(\"=\")]\n                  ),\n                  _vm._v(\" \"),\n                  _c(\"span\", { pre: true, attrs: { class: \"token keyword\" } }, [\n                    _vm._v(\"new\")\n                  ]),\n                  _vm._v(\" \"),\n                  _c(\n                    \"span\",\n                    { pre: true, attrs: { class: \"token class-name\" } },\n                    [_vm._v(\"Sub\")]\n                  ),\n                  _c(\n                    \"span\",\n                    { pre: true, attrs: { class: \"token punctuation\" } },\n                    [_vm._v(\"(\")]\n                  ),\n                  _c(\n                    \"span\",\n                    { pre: true, attrs: { class: \"token punctuation\" } },\n                    [_vm._v(\")\")]\n                  ),\n                  _c(\n                    \"span\",\n                    { pre: true, attrs: { class: \"token punctuation\" } },\n                    [_vm._v(\";\")]\n                  ),\n                  _vm._v(\"  \"),\n                  _c(\"span\", { pre: true, attrs: { class: \"token comment\" } }, [\n                    _vm._v(\"// 向上造型\")\n                  ]),\n                  _vm._v(\"\\n\\n    \"),\n                  _c(\n                    \"span\",\n                    { pre: true, attrs: { class: \"token class-name\" } },\n                    [_vm._v(\"Sub\")]\n                  ),\n                  _vm._v(\" sub \"),\n                  _c(\n                    \"span\",\n                    { pre: true, attrs: { class: \"token operator\" } },\n                    [_vm._v(\"=\")]\n                  ),\n                  _vm._v(\" \"),\n                  _c(\n                    \"span\",\n                    { pre: true, attrs: { class: \"token punctuation\" } },\n                    [_vm._v(\"(\")]\n                  ),\n                  _c(\n                    \"span\",\n                    { pre: true, attrs: { class: \"token class-name\" } },\n                    [_vm._v(\"Sub\")]\n                  ),\n                  _c(\n                    \"span\",\n                    { pre: true, attrs: { class: \"token punctuation\" } },\n                    [_vm._v(\")\")]\n                  ),\n                  _vm._v(\" \"),\n                  _c(\"span\", { pre: true, attrs: { class: \"token keyword\" } }, [\n                    _vm._v(\"new\")\n                  ]),\n                  _vm._v(\" \"),\n                  _c(\n                    \"span\",\n                    { pre: true, attrs: { class: \"token class-name\" } },\n                    [_vm._v(\"Super\")]\n                  ),\n                  _c(\n                    \"span\",\n                    { pre: true, attrs: { class: \"token punctuation\" } },\n                    [_vm._v(\"(\")]\n                  ),\n                  _c(\n                    \"span\",\n                    { pre: true, attrs: { class: \"token punctuation\" } },\n                    [_vm._v(\")\")]\n                  ),\n                  _c(\n                    \"span\",\n                    { pre: true, attrs: { class: \"token punctuation\" } },\n                    [_vm._v(\";\")]\n                  ),\n                  _vm._v(\"  \"),\n                  _c(\"span\", { pre: true, attrs: { class: \"token comment\" } }, [\n                    _vm._v(\"// 向下造型\")\n                  ]),\n                  _vm._v(\"\\n  \"),\n                  _c(\n                    \"span\",\n                    { pre: true, attrs: { class: \"token punctuation\" } },\n                    [_vm._v(\"}\")]\n                  ),\n                  _vm._v(\"\\n\"),\n                  _c(\n                    \"span\",\n                    { pre: true, attrs: { class: \"token punctuation\" } },\n                    [_vm._v(\"}\")]\n                  ),\n                  _vm._v(\"\\n\")\n                ])\n              ])\n            ]),\n            _c(\"div\", { staticClass: \"danger custom-block\" }, [\n              _c(\"p\", { staticClass: \"custom-block-title\" }, [_vm._v(\"注意\")]),\n              _vm._v(\" \"),\n              _c(\"p\", [\n                _vm._v(\n                  \"向下造型是不允许的，上面的例子会通过编译器检测，但运行后会抛出异常：\"\n                ),\n                _c(\"br\"),\n                _vm._v(\" \"),\n                _c(\"strong\", [_vm._v(\"Output\")])\n              ]),\n              _vm._v(\" \"),\n              _c(\"div\", { staticClass: \"language- extra-class\" }, [\n                _c(\"pre\", { pre: true, attrs: { class: \"language-text\" } }, [\n                  _c(\"code\", [\n                    _vm._v(\n                      \"java.lang.ClassCastException: class Super cannot be cast to class Sub\\n\"\n                    )\n                  ])\n                ])\n              ])\n            ])\n          ]),\n          _vm._v(\" \"),\n          _c(\"li\", [\n            _c(\"p\", [\n              _vm._v(\"使用向上造型时，编译期\"),\n              _c(\"strong\", [_vm._v(\"只检查两个类之间的关系\")]),\n              _vm._v(\"而\"),\n              _c(\"strong\", [_vm._v(\"不检查具体用哪个类创建对象\")])\n            ])\n          ]),\n          _vm._v(\" \"),\n          _c(\"li\", [_c(\"p\", [_vm._v(\"对象方法看父类，方法内容看子类。\")])])\n        ])\n      ]),\n      _vm._v(\" \"),\n      _c(\"li\", [\n        _c(\"p\", [_vm._v(\"方法覆盖 (Method Override)\")]),\n        _vm._v(\" \"),\n        _c(\"ul\", [\n          _c(\"li\", [\n            _c(\"p\", [\n              _vm._v(\"又称方法重写，是\"),\n              _c(\"strong\", [_vm._v(\"行为多态\")]),\n              _vm._v(\"。\")\n            ])\n          ]),\n          _vm._v(\" \"),\n          _c(\"li\", [\n            _c(\"p\", [\n              _vm._v(\"发生在父子类中，双方拥有方法签名完全一致的非静态方法。\")\n            ])\n          ]),\n          _vm._v(\" \"),\n          _c(\"li\", [\n            _c(\"p\", [_vm._v(\"调用方法的时候，调用的是重写后的方法。\")])\n          ])\n        ]),\n        _vm._v(\" \"),\n        _c(\"div\", { staticClass: \"warning custom-block\" }, [\n          _c(\"p\", { staticClass: \"custom-block-title\" }, [_vm._v(\"注意\")]),\n          _vm._v(\" \"),\n          _c(\"ol\", [\n            _c(\"li\", [\n              _c(\"p\", [\n                _vm._v(\"子类重写的方法\"),\n                _c(\"strong\", [_vm._v(\"权限修饰符需大于等于父类\")]),\n                _vm._v(\"。\")\n              ])\n            ]),\n            _vm._v(\" \"),\n            _c(\"li\", [\n              _c(\"p\", [_vm._v(\"关于返回值类型\")]),\n              _vm._v(\" \"),\n              _c(\"ul\", [\n                _c(\"li\", [\n                  _c(\"p\", [\n                    _vm._v(\"若\"),\n                    _c(\"strong\", [_vm._v(\"父类方法返回值类型是引用数据类型\")]),\n                    _vm._v(\n                      \"，则子类重写的方法的返回值类型是父类方法返回值类型的子类或其本身。\"\n                    )\n                  ])\n                ]),\n                _vm._v(\" \"),\n                _c(\"li\", [\n                  _c(\"p\", [\n                    _vm._v(\"若\"),\n                    _c(\"strong\", [_vm._v(\"父类方法返回值类型是基本数据类型\")]),\n                    _vm._v(\"，则子类重写的方法返回值类型必须和父类方法相同。\")\n                  ])\n                ])\n              ])\n            ]),\n            _vm._v(\" \"),\n            _c(\"li\", [_c(\"p\", [_vm._v(\"子类抛出的异常需为父类异常的子类。\")])])\n          ])\n        ]),\n        _vm._v(\" \"),\n        _c(\"p\", [_c(\"strong\", [_vm._v(\"Input\")])]),\n        _vm._v(\" \"),\n        _c(\"div\", { staticClass: \"language-java extra-class\" }, [\n          _c(\"pre\", { pre: true, attrs: { class: \"language-java\" } }, [\n            _c(\"code\", [\n              _c(\"span\", { pre: true, attrs: { class: \"token keyword\" } }, [\n                _vm._v(\"class\")\n              ]),\n              _vm._v(\" \"),\n              _c(\"span\", { pre: true, attrs: { class: \"token class-name\" } }, [\n                _vm._v(\"A\")\n              ]),\n              _vm._v(\" \"),\n              _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n                _vm._v(\"{\")\n              ]),\n              _vm._v(\"\\n  \"),\n              _c(\"span\", { pre: true, attrs: { class: \"token comment\" } }, [\n                _vm._v(\"/**\\n  * 方法 mA\\n  * @return void\\n  */\")\n              ]),\n              _vm._v(\"\\n  \"),\n              _c(\"span\", { pre: true, attrs: { class: \"token keyword\" } }, [\n                _vm._v(\"public\")\n              ]),\n              _vm._v(\" \"),\n              _c(\"span\", { pre: true, attrs: { class: \"token keyword\" } }, [\n                _vm._v(\"void\")\n              ]),\n              _vm._v(\" \"),\n              _c(\"span\", { pre: true, attrs: { class: \"token function\" } }, [\n                _vm._v(\"mA\")\n              ]),\n              _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n                _vm._v(\"(\")\n              ]),\n              _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n                _vm._v(\")\")\n              ]),\n              _vm._v(\" \"),\n              _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n                _vm._v(\"{\")\n              ]),\n              _vm._v(\"\\n    \"),\n              _c(\"span\", { pre: true, attrs: { class: \"token comment\" } }, [\n                _vm._v(\"// ...\")\n              ]),\n              _vm._v(\"\\n  \"),\n              _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n                _vm._v(\"}\")\n              ]),\n              _vm._v(\"\\n\"),\n              _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n                _vm._v(\"}\")\n              ]),\n              _vm._v(\"\\n\\n\"),\n              _c(\"span\", { pre: true, attrs: { class: \"token keyword\" } }, [\n                _vm._v(\"class\")\n              ]),\n              _vm._v(\" \"),\n              _c(\"span\", { pre: true, attrs: { class: \"token class-name\" } }, [\n                _vm._v(\"B\")\n              ]),\n              _vm._v(\" \"),\n              _c(\"span\", { pre: true, attrs: { class: \"token keyword\" } }, [\n                _vm._v(\"extends\")\n              ]),\n              _vm._v(\" \"),\n              _c(\"span\", { pre: true, attrs: { class: \"token class-name\" } }, [\n                _vm._v(\"A\")\n              ]),\n              _vm._v(\" \"),\n              _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n                _vm._v(\"{\")\n              ]),\n              _vm._v(\"\\n  \"),\n              _c(\"span\", { pre: true, attrs: { class: \"token comment\" } }, [\n                _vm._v(\"/**\\n  * 方法 mB\\n  * @return void\\n  */\")\n              ]),\n              _vm._v(\"\\n  \"),\n              _c(\"span\", { pre: true, attrs: { class: \"token keyword\" } }, [\n                _vm._v(\"public\")\n              ]),\n              _vm._v(\" \"),\n              _c(\"span\", { pre: true, attrs: { class: \"token keyword\" } }, [\n                _vm._v(\"void\")\n              ]),\n              _vm._v(\" \"),\n              _c(\"span\", { pre: true, attrs: { class: \"token function\" } }, [\n                _vm._v(\"mB\")\n              ]),\n              _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n                _vm._v(\"(\")\n              ]),\n              _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n                _vm._v(\")\")\n              ]),\n              _vm._v(\" \"),\n              _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n                _vm._v(\"{\")\n              ]),\n              _vm._v(\"\\n    \"),\n              _c(\"span\", { pre: true, attrs: { class: \"token comment\" } }, [\n                _vm._v(\"// ...\")\n              ]),\n              _vm._v(\"\\n  \"),\n              _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n                _vm._v(\"}\")\n              ]),\n              _vm._v(\"\\n\"),\n              _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n                _vm._v(\"}\")\n              ]),\n              _vm._v(\"\\n\\n\"),\n              _c(\"span\", { pre: true, attrs: { class: \"token comment\" } }, [\n                _vm._v(\"/**\\n  * 方法 m\\n  * @return B\\n  */\")\n              ]),\n              _vm._v(\"\\n\"),\n              _c(\"span\", { pre: true, attrs: { class: \"token keyword\" } }, [\n                _vm._v(\"class\")\n              ]),\n              _vm._v(\" \"),\n              _c(\"span\", { pre: true, attrs: { class: \"token class-name\" } }, [\n                _vm._v(\"C\")\n              ]),\n              _vm._v(\" \"),\n              _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n                _vm._v(\"{\")\n              ]),\n              _vm._v(\"\\n  \"),\n              _c(\"span\", { pre: true, attrs: { class: \"token keyword\" } }, [\n                _vm._v(\"public\")\n              ]),\n              _vm._v(\" \"),\n              _c(\"span\", { pre: true, attrs: { class: \"token class-name\" } }, [\n                _vm._v(\"B\")\n              ]),\n              _vm._v(\" \"),\n              _c(\"span\", { pre: true, attrs: { class: \"token function\" } }, [\n                _vm._v(\"m\")\n              ]),\n              _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n                _vm._v(\"(\")\n              ]),\n              _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n                _vm._v(\")\")\n              ]),\n              _vm._v(\" \"),\n              _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n                _vm._v(\"{\")\n              ]),\n              _vm._v(\"\\n    \"),\n              _c(\"span\", { pre: true, attrs: { class: \"token comment\" } }, [\n                _vm._v(\"// ...\")\n              ]),\n              _vm._v(\"\\n  \"),\n              _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n                _vm._v(\"}\")\n              ]),\n              _vm._v(\"\\n\"),\n              _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n                _vm._v(\"}\")\n              ]),\n              _vm._v(\"\\n\\n\"),\n              _c(\"span\", { pre: true, attrs: { class: \"token keyword\" } }, [\n                _vm._v(\"class\")\n              ]),\n              _vm._v(\" \"),\n              _c(\"span\", { pre: true, attrs: { class: \"token class-name\" } }, [\n                _vm._v(\"D\")\n              ]),\n              _vm._v(\" \"),\n              _c(\"span\", { pre: true, attrs: { class: \"token keyword\" } }, [\n                _vm._v(\"extends\")\n              ]),\n              _vm._v(\" \"),\n              _c(\"span\", { pre: true, attrs: { class: \"token class-name\" } }, [\n                _vm._v(\"C\")\n              ]),\n              _vm._v(\" \"),\n              _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n                _vm._v(\"{\")\n              ]),\n              _vm._v(\"\\n  \"),\n              _c(\"span\", { pre: true, attrs: { class: \"token comment\" } }, [\n                _vm._v(\"/**\\n  * 方法 m\\n  * @return A\\n  */\")\n              ]),\n              _vm._v(\"\\n  \"),\n              _c(\"span\", { pre: true, attrs: { class: \"token keyword\" } }, [\n                _vm._v(\"public\")\n              ]),\n              _vm._v(\" \"),\n              _c(\"span\", { pre: true, attrs: { class: \"token class-name\" } }, [\n                _vm._v(\"A\")\n              ]),\n              _vm._v(\" \"),\n              _c(\"span\", { pre: true, attrs: { class: \"token function\" } }, [\n                _vm._v(\"m\")\n              ]),\n              _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n                _vm._v(\"(\")\n              ]),\n              _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n                _vm._v(\")\")\n              ]),\n              _vm._v(\" \"),\n              _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n                _vm._v(\"{\")\n              ]),\n              _vm._v(\"\\n    \"),\n              _c(\"span\", { pre: true, attrs: { class: \"token comment\" } }, [\n                _vm._v(\"// ...\")\n              ]),\n              _vm._v(\"\\n  \"),\n              _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n                _vm._v(\"}\")\n              ]),\n              _vm._v(\"\\n\"),\n              _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n                _vm._v(\"}\")\n              ]),\n              _vm._v(\"\\n\\n\"),\n              _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n                _vm._v(\".\")\n              ]),\n              _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n                _vm._v(\".\")\n              ]),\n              _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n                _vm._v(\".\")\n              ]),\n              _vm._v(\"\\n\\n\"),\n              _c(\"span\", { pre: true, attrs: { class: \"token keyword\" } }, [\n                _vm._v(\"public\")\n              ]),\n              _vm._v(\" \"),\n              _c(\"span\", { pre: true, attrs: { class: \"token keyword\" } }, [\n                _vm._v(\"static\")\n              ]),\n              _vm._v(\" \"),\n              _c(\"span\", { pre: true, attrs: { class: \"token keyword\" } }, [\n                _vm._v(\"void\")\n              ]),\n              _vm._v(\" \"),\n              _c(\"span\", { pre: true, attrs: { class: \"token function\" } }, [\n                _vm._v(\"main\")\n              ]),\n              _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n                _vm._v(\"(\")\n              ]),\n              _c(\"span\", { pre: true, attrs: { class: \"token class-name\" } }, [\n                _vm._v(\"String\")\n              ]),\n              _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n                _vm._v(\"[\")\n              ]),\n              _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n                _vm._v(\"]\")\n              ]),\n              _vm._v(\" args\"),\n              _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n                _vm._v(\")\")\n              ]),\n              _vm._v(\" \"),\n              _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n                _vm._v(\"{\")\n              ]),\n              _vm._v(\"\\n  \"),\n              _c(\"span\", { pre: true, attrs: { class: \"token comment\" } }, [\n                _vm._v(\"// 用C类声明，用D类创建对象\")\n              ]),\n              _vm._v(\"\\n  \"),\n              _c(\"span\", { pre: true, attrs: { class: \"token comment\" } }, [\n                _vm._v(\"// 则对象c拥有返回值类型为B的方法m()\")\n              ]),\n              _vm._v(\"\\n  \"),\n              _c(\"span\", { pre: true, attrs: { class: \"token class-name\" } }, [\n                _vm._v(\"C\")\n              ]),\n              _vm._v(\" c \"),\n              _c(\"span\", { pre: true, attrs: { class: \"token operator\" } }, [\n                _vm._v(\"=\")\n              ]),\n              _vm._v(\" \"),\n              _c(\"span\", { pre: true, attrs: { class: \"token keyword\" } }, [\n                _vm._v(\"new\")\n              ]),\n              _vm._v(\" \"),\n              _c(\"span\", { pre: true, attrs: { class: \"token class-name\" } }, [\n                _vm._v(\"D\")\n              ]),\n              _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n                _vm._v(\"(\")\n              ]),\n              _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n                _vm._v(\")\")\n              ]),\n              _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n                _vm._v(\";\")\n              ]),\n              _vm._v(\"\\n\\n  \"),\n              _c(\"span\", { pre: true, attrs: { class: \"token comment\" } }, [\n                _vm._v(\"// 用B类声明一个变量b，来接收方法的返回值\")\n              ]),\n              _vm._v(\"\\n  \"),\n              _c(\"span\", { pre: true, attrs: { class: \"token comment\" } }, [\n                _vm._v(\"// 方法调用的是D类中的m()\")\n              ]),\n              _vm._v(\"\\n  \"),\n              _c(\"span\", { pre: true, attrs: { class: \"token comment\" } }, [\n                _vm._v(\n                  \"// 由于D类中m()的返回值类型是A，故最终是用子类接收父类对象\"\n                )\n              ]),\n              _vm._v(\"\\n  \"),\n              _c(\"span\", { pre: true, attrs: { class: \"token class-name\" } }, [\n                _vm._v(\"B\")\n              ]),\n              _vm._v(\" b \"),\n              _c(\"span\", { pre: true, attrs: { class: \"token operator\" } }, [\n                _vm._v(\"=\")\n              ]),\n              _vm._v(\" c\"),\n              _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n                _vm._v(\".\")\n              ]),\n              _c(\"span\", { pre: true, attrs: { class: \"token function\" } }, [\n                _vm._v(\"m\")\n              ]),\n              _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n                _vm._v(\"(\")\n              ]),\n              _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n                _vm._v(\")\")\n              ]),\n              _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n                _vm._v(\";\")\n              ]),\n              _vm._v(\"\\n\\n  \"),\n              _c(\"span\", { pre: true, attrs: { class: \"token comment\" } }, [\n                _vm._v(\"// 对象b无法调用B类中的mB()\")\n              ]),\n              _vm._v(\"\\n  \"),\n              _c(\"span\", { pre: true, attrs: { class: \"token comment\" } }, [\n                _vm._v(\"// b.mB();\")\n              ]),\n              _vm._v(\"\\n\"),\n              _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n                _vm._v(\"}\")\n              ]),\n              _vm._v(\"\\n\")\n            ])\n          ])\n        ])\n      ])\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"h2\", { attrs: { id: \"权限修饰符\" } }, [\n      _c(\n        \"a\",\n        {\n          staticClass: \"header-anchor\",\n          attrs: { href: \"#权限修饰符\", \"aria-hidden\": \"true\" }\n        },\n        [_vm._v(\"#\")]\n      ),\n      _vm._v(\" 权限修饰符\")\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"ul\", [\n      _c(\"li\", [\n        _vm._v(\"Java 提供了\"),\n        _c(\"code\", [_vm._v(\"public\")]),\n        _vm._v(\", \"),\n        _c(\"code\", [_vm._v(\"protected\")]),\n        _vm._v(\", \"),\n        _c(\"code\", [_vm._v(\"默认\")]),\n        _vm._v(\", \"),\n        _c(\"code\", [_vm._v(\"private\")]),\n        _vm._v(\"四种访问修饰符。\")\n      ]),\n      _vm._v(\" \"),\n      _c(\"li\", [_vm._v(\"通过访问修饰符来提高程序的安全性和可维护性。\")])\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"table\", [\n      _c(\"thead\", [\n        _c(\"tr\", [\n          _c(\"th\", { staticStyle: { \"text-align\": \"center\" } }, [\n            _vm._v(\"修饰符\")\n          ]),\n          _vm._v(\" \"),\n          _c(\"th\", { staticStyle: { \"text-align\": \"center\" } }, [\n            _vm._v(\"本类中\")\n          ]),\n          _vm._v(\" \"),\n          _c(\"th\", { staticStyle: { \"text-align\": \"center\" } }, [\n            _vm._v(\"同包类中 (本包)\")\n          ]),\n          _vm._v(\" \"),\n          _c(\"th\", { staticStyle: { \"text-align\": \"center\" } }, [\n            _vm._v(\"子类中\")\n          ]),\n          _vm._v(\" \"),\n          _c(\"th\", { staticStyle: { \"text-align\": \"center\" } }, [\n            _vm._v(\"其他包中 (不同包中的所有类)\")\n          ])\n        ])\n      ]),\n      _vm._v(\" \"),\n      _c(\"tbody\", [\n        _c(\"tr\", [\n          _c(\"td\", { staticStyle: { \"text-align\": \"center\" } }, [\n            _c(\"code\", [_vm._v(\"public\")])\n          ]),\n          _vm._v(\" \"),\n          _c(\"td\", { staticStyle: { \"text-align\": \"center\" } }, [\n            _vm._v(\"可以\")\n          ]),\n          _vm._v(\" \"),\n          _c(\"td\", { staticStyle: { \"text-align\": \"center\" } }, [\n            _vm._v(\"可以\")\n          ]),\n          _vm._v(\" \"),\n          _c(\"td\", { staticStyle: { \"text-align\": \"center\" } }, [\n            _vm._v(\"可以\")\n          ]),\n          _vm._v(\" \"),\n          _c(\"td\", { staticStyle: { \"text-align\": \"center\" } }, [\n            _vm._v(\"可以\")\n          ])\n        ]),\n        _vm._v(\" \"),\n        _c(\"tr\", [\n          _c(\"td\", { staticStyle: { \"text-align\": \"center\" } }, [\n            _c(\"code\", [_vm._v(\"protected\")])\n          ]),\n          _vm._v(\" \"),\n          _c(\"td\", { staticStyle: { \"text-align\": \"center\" } }, [\n            _vm._v(\"可以\")\n          ]),\n          _vm._v(\" \"),\n          _c(\"td\", { staticStyle: { \"text-align\": \"center\" } }, [\n            _vm._v(\"可以\")\n          ]),\n          _vm._v(\" \"),\n          _c(\"td\", { staticStyle: { \"text-align\": \"center\" } }, [\n            _vm._v(\"可以\")\n          ]),\n          _vm._v(\" \"),\n          _c(\"td\", { staticStyle: { \"text-align\": \"center\" } }, [\n            _vm._v(\"不可以\")\n          ])\n        ]),\n        _vm._v(\" \"),\n        _c(\"tr\", [\n          _c(\"td\", { staticStyle: { \"text-align\": \"center\" } }, [\n            _c(\"code\", [_vm._v(\"默认\")])\n          ]),\n          _vm._v(\" \"),\n          _c(\"td\", { staticStyle: { \"text-align\": \"center\" } }, [\n            _vm._v(\"可以\")\n          ]),\n          _vm._v(\" \"),\n          _c(\"td\", { staticStyle: { \"text-align\": \"center\" } }, [\n            _vm._v(\"可以\")\n          ]),\n          _vm._v(\" \"),\n          _c(\"td\", { staticStyle: { \"text-align\": \"center\" } }, [\n            _vm._v(\"同包可以\")\n          ]),\n          _vm._v(\" \"),\n          _c(\"td\", { staticStyle: { \"text-align\": \"center\" } }, [\n            _vm._v(\"不可以\")\n          ])\n        ]),\n        _vm._v(\" \"),\n        _c(\"tr\", [\n          _c(\"td\", { staticStyle: { \"text-align\": \"center\" } }, [\n            _c(\"code\", [_vm._v(\"private\")])\n          ]),\n          _vm._v(\" \"),\n          _c(\"td\", { staticStyle: { \"text-align\": \"center\" } }, [\n            _vm._v(\"可以\")\n          ]),\n          _vm._v(\" \"),\n          _c(\"td\", { staticStyle: { \"text-align\": \"center\" } }, [\n            _vm._v(\"不可以\")\n          ]),\n          _vm._v(\" \"),\n          _c(\"td\", { staticStyle: { \"text-align\": \"center\" } }, [\n            _vm._v(\"不可以\")\n          ]),\n          _vm._v(\" \"),\n          _c(\"td\", { staticStyle: { \"text-align\": \"center\" } }, [\n            _vm._v(\"不可以\")\n          ])\n        ])\n      ])\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"h2\", { attrs: { id: \"非权限修饰符\" } }, [\n      _c(\n        \"a\",\n        {\n          staticClass: \"header-anchor\",\n          attrs: { href: \"#非权限修饰符\", \"aria-hidden\": \"true\" }\n        },\n        [_vm._v(\"#\")]\n      ),\n      _vm._v(\" 非权限修饰符\")\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"h3\", { attrs: { id: \"静态\" } }, [\n      _c(\n        \"a\",\n        {\n          staticClass: \"header-anchor\",\n          attrs: { href: \"#静态\", \"aria-hidden\": \"true\" }\n        },\n        [_vm._v(\"#\")]\n      ),\n      _vm._v(\" 静态\")\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"ul\", [\n      _c(\"li\", [\n        _c(\"p\", [\n          _vm._v(\"Java 中使用\"),\n          _c(\"code\", [_vm._v(\"static\")]),\n          _vm._v(\"关键字来标识静态。\")\n        ])\n      ]),\n      _vm._v(\" \"),\n      _c(\"li\", [\n        _c(\"p\", [_vm._v(\"可以使用静态来修饰变量、方法、内部类和代码块。\")])\n      ])\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"h4\", { attrs: { id: \"静态变量\" } }, [\n      _c(\n        \"a\",\n        {\n          staticClass: \"header-anchor\",\n          attrs: { href: \"#静态变量\", \"aria-hidden\": \"true\" }\n        },\n        [_vm._v(\"#\")]\n      ),\n      _vm._v(\" 静态变量\")\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"li\", [\n      _c(\"p\", [\n        _vm._v(\"也称为\"),\n        _c(\"strong\", [_vm._v(\"类变量\")]),\n        _vm._v(\"。\")\n      ])\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"li\", [\n      _c(\"p\", [\n        _vm._v(\n          \"静态变量优先于对象而存在，故静态变量可以不通过对象，直接通过类来调用（通过对象调用也是可以被理解的）。\"\n        )\n      ])\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"li\", [\n      _c(\"p\", [\n        _vm._v(\"该类所产生的所有对象实际上保存该静态变量在静态区中的地址。\")\n      ])\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"li\", [_c(\"p\", [_vm._v(\"静态变量被该类的所有对象所共享。\")])])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"p\", [\n      _c(\"img\", {\n        attrs: {\n          src: \"/img/%E9%9D%99%E6%80%81%E5%86%85%E5%AD%98.png\",\n          alt: \"静态内存\"\n        }\n      })\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"div\", { staticClass: \"warning custom-block\" }, [\n      _c(\"p\", { staticClass: \"custom-block-title\" }, [_vm._v(\"注意\")]),\n      _vm._v(\" \"),\n      _c(\"ul\", [\n        _c(\"li\", [\n          _c(\"p\", [\n            _vm._v(\"静态变量\"),\n            _c(\"strong\", [_vm._v(\"不能\")]),\n            _vm._v(\"定义在构造代码块中\")\n          ])\n        ]),\n        _vm._v(\" \"),\n        _c(\"li\", [\n          _c(\"p\", [\n            _vm._v(\"在构造代码块中\"),\n            _c(\"strong\", [_vm._v(\"可以\")]),\n            _vm._v(\"对静态变量赋值\")\n          ])\n        ])\n      ]),\n      _vm._v(\" \"),\n      _c(\"p\", [_c(\"strong\", [_vm._v(\"Input\")])]),\n      _vm._v(\" \"),\n      _c(\"div\", { staticClass: \"language-java extra-class\" }, [\n        _c(\"pre\", { pre: true, attrs: { class: \"language-java\" } }, [\n          _c(\"code\", [\n            _c(\"span\", { pre: true, attrs: { class: \"token keyword\" } }, [\n              _vm._v(\"class\")\n            ]),\n            _vm._v(\" \"),\n            _c(\"span\", { pre: true, attrs: { class: \"token class-name\" } }, [\n              _vm._v(\"OneClass\")\n            ]),\n            _vm._v(\" \"),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\"{\")\n            ]),\n            _vm._v(\"\\n  \"),\n            _c(\"span\", { pre: true, attrs: { class: \"token keyword\" } }, [\n              _vm._v(\"static\")\n            ]),\n            _vm._v(\" \"),\n            _c(\"span\", { pre: true, attrs: { class: \"token keyword\" } }, [\n              _vm._v(\"int\")\n            ]),\n            _vm._v(\" iSta\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\";\")\n            ]),\n            _vm._v(\"\\n\\n  \"),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\"{\")\n            ]),\n            _vm._v(\"\\n    iSta \"),\n            _c(\"span\", { pre: true, attrs: { class: \"token operator\" } }, [\n              _vm._v(\"=\")\n            ]),\n            _vm._v(\" \"),\n            _c(\"span\", { pre: true, attrs: { class: \"token number\" } }, [\n              _vm._v(\"10\")\n            ]),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\";\")\n            ]),\n            _vm._v(\"\\n  \"),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\"}\")\n            ]),\n            _vm._v(\"\\n\"),\n            _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\"}\")\n            ]),\n            _vm._v(\"\\n\\n\")\n          ])\n        ])\n      ])\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"h4\", { attrs: { id: \"静态方法\" } }, [\n      _c(\n        \"a\",\n        {\n          staticClass: \"header-anchor\",\n          attrs: { href: \"#静态方法\", \"aria-hidden\": \"true\" }\n        },\n        [_vm._v(\"#\")]\n      ),\n      _vm._v(\" 静态方法\")\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"ul\", [\n      _c(\"li\", [\n        _c(\"p\", [\n          _vm._v(\"也称为\"),\n          _c(\"strong\", [_vm._v(\"类方法\")]),\n          _vm._v(\"。\")\n        ])\n      ]),\n      _vm._v(\" \"),\n      _c(\"li\", [\n        _c(\"p\", [\n          _vm._v(\n            \"在类加载的时候加载到方法区中的静态区。只存储在静态区，方法被调用时在栈内存中执行。\"\n          )\n        ])\n      ]),\n      _vm._v(\" \"),\n      _c(\"li\", [\n        _c(\"p\", [\n          _vm._v(\"静态方法\"),\n          _c(\"strong\", [_vm._v(\"先于对象而存在\")]),\n          _vm._v(\n            \"，静态方法可通过类名或对象调用，不能直接使用本类中的非静态方法和非静态属性。\"\n          )\n        ])\n      ])\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"div\", { staticClass: \"warning custom-block\" }, [\n      _c(\"p\", { staticClass: \"custom-block-title\" }, [_vm._v(\"注意\")]),\n      _vm._v(\" \"),\n      _c(\"ul\", [\n        _c(\"li\", [\n          _c(\"p\", [\n            _vm._v(\"静态方法中\"),\n            _c(\"strong\", [_vm._v(\"不能\")]),\n            _vm._v(\"定义静态变量\")\n          ])\n        ]),\n        _vm._v(\" \"),\n        _c(\"li\", [\n          _c(\"p\", [\n            _vm._v(\"静态方法中\"),\n            _c(\"strong\", [_vm._v(\"不能\")]),\n            _vm._v(\"直接调用类中的非静态方法\")\n          ])\n        ]),\n        _vm._v(\" \"),\n        _c(\"li\", [\n          _c(\"p\", [\n            _c(\"code\", [_vm._v(\"main()\")]),\n            _vm._v(\"中\"),\n            _c(\"strong\", [_vm._v(\"不能\")]),\n            _vm._v(\"使用\"),\n            _c(\"code\", [_vm._v(\"this\")]),\n            _vm._v(\"或\"),\n            _c(\"code\", [_vm._v(\"super\")])\n          ])\n        ]),\n        _vm._v(\" \"),\n        _c(\"li\", [\n          _c(\"p\", [\n            _vm._v(\"静态方法\"),\n            _c(\"strong\", [_vm._v(\"不能\")]),\n            _vm._v(\"重写\")\n          ])\n        ]),\n        _vm._v(\" \"),\n        _c(\"li\", [\n          _c(\"p\", [\n            _vm._v(\"父子类中\"),\n            _c(\"strong\", [_vm._v(\"可以\")]),\n            _vm._v(\n              \"存在方法签名一致的静态方法\\n父子类中存在方法签名完全一致的方法，两者或均被\"\n            ),\n            _c(\"code\", [_vm._v(\"static\")]),\n            _vm._v(\"修饰或都不被\"),\n            _c(\"code\", [_vm._v(\"static\")]),\n            _vm._v(\"修饰\")\n          ])\n        ]),\n        _vm._v(\" \"),\n        _c(\"li\", [\n          _c(\"p\", [\n            _vm._v(\"静态方法\"),\n            _c(\"strong\", [_vm._v(\"可以\")]),\n            _vm._v(\"被继承\")\n          ])\n        ]),\n        _vm._v(\" \"),\n        _c(\"li\", [\n          _c(\"p\", [\n            _vm._v(\n              \"类只加载一次，只在第一次使用时加载到方法去，加载之后不再移除\"\n            )\n          ])\n        ])\n      ])\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"h4\", { attrs: { id: \"静态代码块\" } }, [\n      _c(\n        \"a\",\n        {\n          staticClass: \"header-anchor\",\n          attrs: { href: \"#静态代码块\", \"aria-hidden\": \"true\" }\n        },\n        [_vm._v(\"#\")]\n      ),\n      _vm._v(\" 静态代码块\")\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"ul\", [\n      _c(\"li\", [\n        _c(\"p\", [_vm._v(\"类被第一次真正使用（创建对象/调用方法）时执行一次\")])\n      ]),\n      _vm._v(\" \"),\n      _c(\"li\", [_c(\"p\", [_vm._v(\"先父后子，先静后动\")])])\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"p\", [_c(\"strong\", [_vm._v(\"Input\")])])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"div\", { staticClass: \"language-java extra-class\" }, [\n      _c(\"pre\", { pre: true, attrs: { class: \"language-java\" } }, [\n        _c(\"code\", [\n          _c(\"span\", { pre: true, attrs: { class: \"token keyword\" } }, [\n            _vm._v(\"class\")\n          ]),\n          _vm._v(\" \"),\n          _c(\"span\", { pre: true, attrs: { class: \"token class-name\" } }, [\n            _vm._v(\"OneClass\")\n          ]),\n          _vm._v(\" \"),\n          _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n            _vm._v(\"{\")\n          ]),\n          _vm._v(\"\\n  \"),\n          _c(\"span\", { pre: true, attrs: { class: \"token keyword\" } }, [\n            _vm._v(\"static\")\n          ]),\n          _vm._v(\" \"),\n          _c(\"span\", { pre: true, attrs: { class: \"token keyword\" } }, [\n            _vm._v(\"int\")\n          ]),\n          _vm._v(\" i \"),\n          _c(\"span\", { pre: true, attrs: { class: \"token operator\" } }, [\n            _vm._v(\"=\")\n          ]),\n          _vm._v(\" \"),\n          _c(\"span\", { pre: true, attrs: { class: \"token number\" } }, [\n            _vm._v(\"5\")\n          ]),\n          _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n            _vm._v(\";\")\n          ]),\n          _vm._v(\" \"),\n          _c(\"span\", { pre: true, attrs: { class: \"token comment\" } }, [\n            _vm._v(\"// Warning: Variable 'i' initializer '5' is redundan\")\n          ]),\n          _vm._v(\"\\n\\n  \"),\n          _c(\"span\", { pre: true, attrs: { class: \"token keyword\" } }, [\n            _vm._v(\"static\")\n          ]),\n          _vm._v(\" \"),\n          _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n            _vm._v(\"{\")\n          ]),\n          _vm._v(\"\\n    i \"),\n          _c(\"span\", { pre: true, attrs: { class: \"token operator\" } }, [\n            _vm._v(\"=\")\n          ]),\n          _vm._v(\" \"),\n          _c(\"span\", { pre: true, attrs: { class: \"token number\" } }, [\n            _vm._v(\"7\")\n          ]),\n          _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n            _vm._v(\";\")\n          ]),\n          _vm._v(\"\\n    i \"),\n          _c(\"span\", { pre: true, attrs: { class: \"token operator\" } }, [\n            _vm._v(\"+=\")\n          ]),\n          _vm._v(\" \"),\n          _c(\"span\", { pre: true, attrs: { class: \"token number\" } }, [\n            _vm._v(\"7\")\n          ]),\n          _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n            _vm._v(\";\")\n          ]),\n          _vm._v(\"\\n  \"),\n          _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n            _vm._v(\"}\")\n          ]),\n          _vm._v(\"\\n\"),\n          _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n            _vm._v(\"}\")\n          ]),\n          _vm._v(\"\\n\\n\"),\n          _c(\"span\", { pre: true, attrs: { class: \"token class-name\" } }, [\n            _vm._v(\"Class\")\n          ]),\n          _vm._v(\" \"),\n          _c(\"span\", { pre: true, attrs: { class: \"token class-name\" } }, [\n            _vm._v(\"AnotherClass\")\n          ]),\n          _vm._v(\" \"),\n          _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n            _vm._v(\"{\")\n          ]),\n          _vm._v(\"\\n  \"),\n          _c(\"span\", { pre: true, attrs: { class: \"token keyword\" } }, [\n            _vm._v(\"static\")\n          ]),\n          _vm._v(\" \"),\n          _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n            _vm._v(\"{\")\n          ]),\n          _vm._v(\"\\n    i \"),\n          _c(\"span\", { pre: true, attrs: { class: \"token operator\" } }, [\n            _vm._v(\"=\")\n          ]),\n          _vm._v(\" \"),\n          _c(\"span\", { pre: true, attrs: { class: \"token number\" } }, [\n            _vm._v(\"7\")\n          ]),\n          _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n            _vm._v(\";\")\n          ]),\n          _vm._v(\"  \"),\n          _c(\"span\", { pre: true, attrs: { class: \"token comment\" } }, [\n            _vm._v(\"// Warning: The value 7 assigned to 'i' is never used \")\n          ]),\n          _vm._v(\"\\n    i \"),\n          _c(\"span\", { pre: true, attrs: { class: \"token operator\" } }, [\n            _vm._v(\"+=\")\n          ]),\n          _vm._v(\" \"),\n          _c(\"span\", { pre: true, attrs: { class: \"token number\" } }, [\n            _vm._v(\"7\")\n          ]),\n          _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n            _vm._v(\";\")\n          ]),\n          _vm._v(\" \"),\n          _c(\"span\", { pre: true, attrs: { class: \"token comment\" } }, [\n            _vm._v(\"// Error: Illegal forward reference\")\n          ]),\n          _vm._v(\"\\n  \"),\n          _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n            _vm._v(\"}\")\n          ]),\n          _vm._v(\"\\n\\n  \"),\n          _c(\"span\", { pre: true, attrs: { class: \"token keyword\" } }, [\n            _vm._v(\"static\")\n          ]),\n          _vm._v(\" \"),\n          _c(\"span\", { pre: true, attrs: { class: \"token keyword\" } }, [\n            _vm._v(\"int\")\n          ]),\n          _vm._v(\" i \"),\n          _c(\"span\", { pre: true, attrs: { class: \"token operator\" } }, [\n            _vm._v(\"=\")\n          ]),\n          _vm._v(\" \"),\n          _c(\"span\", { pre: true, attrs: { class: \"token number\" } }, [\n            _vm._v(\"5\")\n          ]),\n          _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n            _vm._v(\";\")\n          ]),\n          _vm._v(\"\\n\"),\n          _c(\"span\", { pre: true, attrs: { class: \"token punctuation\" } }, [\n            _vm._v(\"}\")\n          ]),\n          _vm._v(\"\\n\")\n        ])\n      ])\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"ul\", [\n      _c(\"li\", [\n        _c(\"p\", [\n          _vm._v(\"在\"),\n          _c(\"code\", [_vm._v(\"OneClass\")]),\n          _vm._v(\"中\"),\n          _c(\"br\"),\n          _vm._v(\"\\n首先编译\"),\n          _c(\"code\", [_vm._v(\"int i\")]),\n          _vm._v(\"，后续针对\"),\n          _c(\"code\", [_vm._v(\"i\")]),\n          _vm._v(\"的操作有效。\")\n        ])\n      ]),\n      _vm._v(\" \"),\n      _c(\"li\", [\n        _c(\"p\", [\n          _vm._v(\"在\"),\n          _c(\"code\", [_vm._v(\"AnotherClass\")]),\n          _vm._v(\"中\"),\n          _c(\"br\"),\n          _vm._v(\"\\n编译到\"),\n          _c(\"code\", [_vm._v(\"i = 7;\")]),\n          _vm._v(\"时检查之前代码中是否定义过变量\"),\n          _c(\"code\", [_vm._v(\"i\")]),\n          _vm._v(\"，若上文不存在该变量则将其暂时标记为一个成员变量。\"),\n          _c(\"br\"),\n          _vm._v(\"\\n此时这个变量\"),\n          _c(\"code\", [_vm._v(\"i\")]),\n          _vm._v(\"不真实存在，后续对\"),\n          _c(\"code\", [_vm._v(\"i\")]),\n          _vm._v(\"的操作无效。\"),\n          _c(\"br\"),\n          _vm._v(\"\\n直到找到与标记名称\"),\n          _c(\"code\", [_vm._v(\"i\")]),\n          _vm._v(\"一致的成员变量时，才会将标记的\"),\n          _c(\"code\", [_vm._v(\"i\")]),\n          _vm._v(\"真正赋值。\")\n        ])\n      ])\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"h3\", { attrs: { id: \"最终\" } }, [\n      _c(\n        \"a\",\n        {\n          staticClass: \"header-anchor\",\n          attrs: { href: \"#最终\", \"aria-hidden\": \"true\" }\n        },\n        [_vm._v(\"#\")]\n      ),\n      _vm._v(\" 最终\")\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"p\", [\n      _c(\"code\", [_vm._v(\"final\")]),\n      _vm._v(\"关键字可以用来修饰数据（成员变量），方法（成员方法）和类。\")\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"h4\", { attrs: { id: \"常量\" } }, [\n      _c(\n        \"a\",\n        {\n          staticClass: \"header-anchor\",\n          attrs: { href: \"#常量\", \"aria-hidden\": \"true\" }\n        },\n        [_vm._v(\"#\")]\n      ),\n      _vm._v(\" 常量\")\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"p\", [\n      _vm._v(\"当\"),\n      _c(\"code\", [_vm._v(\"final\")]),\n      _vm._v(\"修饰数据时，这个数据称为常量。\"),\n      _c(\"strong\", [_vm._v(\"定义后不可修改\")]),\n      _vm._v(\"。\")\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"div\", { staticClass: \"warning custom-block\" }, [\n      _c(\"p\", { staticClass: \"custom-block-title\" }, [_vm._v(\"注意\")]),\n      _vm._v(\" \"),\n      _c(\"ul\", [\n        _c(\"li\", [\n          _c(\"p\", [\n            _vm._v(\"成员常量\"),\n            _c(\"strong\", [\n              _vm._v(\"需要在对象创建完成前进行赋初值，且只能赋值一次\")\n            ]),\n            _vm._v(\"。\")\n          ])\n        ]),\n        _vm._v(\" \"),\n        _c(\"li\", [\n          _c(\"p\", [\n            _vm._v(\"若常量类型为\"),\n            _c(\"strong\", [_vm._v(\"基本数据类型，其实际值不可变\")]),\n            _vm._v(\"；若常量类型为\"),\n            _c(\"strong\", [_vm._v(\"引用数据类型，其地址不可变\")]),\n            _vm._v(\"。\")\n          ])\n        ]),\n        _vm._v(\" \"),\n        _c(\"li\", [\n          _c(\"p\", [\n            _vm._v(\"若常量是静态常量，\"),\n            _c(\"strong\", [_vm._v(\"需要在类加载之前进行赋值\")]),\n            _vm._v(\"。\")\n          ])\n        ])\n      ])\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"h4\", { attrs: { id: \"最终方法\" } }, [\n      _c(\n        \"a\",\n        {\n          staticClass: \"header-anchor\",\n          attrs: { href: \"#最终方法\", \"aria-hidden\": \"true\" }\n        },\n        [_vm._v(\"#\")]\n      ),\n      _vm._v(\" 最终方法\")\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"p\", [\n      _vm._v(\"当\"),\n      _c(\"code\", [_vm._v(\"final\")]),\n      _vm._v(\"修饰方法时，这个方法称为最终方法。\")\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"div\", { staticClass: \"warning custom-block\" }, [\n      _c(\"p\", { staticClass: \"custom-block-title\" }, [_vm._v(\"注意\")]),\n      _vm._v(\" \"),\n      _c(\"p\", [\n        _vm._v(\"最终方法\"),\n        _c(\"strong\", [_vm._v(\"不能被重写，可以被重载，可以被继承\")]),\n        _vm._v(\"。\")\n      ])\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"h4\", { attrs: { id: \"最终类\" } }, [\n      _c(\n        \"a\",\n        {\n          staticClass: \"header-anchor\",\n          attrs: { href: \"#最终类\", \"aria-hidden\": \"true\" }\n        },\n        [_vm._v(\"#\")]\n      ),\n      _vm._v(\" 最终类\")\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"p\", [\n      _vm._v(\"当\"),\n      _c(\"code\", [_vm._v(\"final\")]),\n      _vm._v(\"修饰类时，这个类称为最终类。\")\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"div\", { staticClass: \"warning custom-block\" }, [\n      _c(\"p\", { staticClass: \"custom-block-title\" }, [_vm._v(\"注意\")]),\n      _vm._v(\" \"),\n      _c(\"ul\", [\n        _c(\"li\", [\n          _c(\"p\", [\n            _vm._v(\"最终类\"),\n            _c(\"strong\", [_vm._v(\"不能被继承\")]),\n            _vm._v(\"。\")\n          ])\n        ]),\n        _vm._v(\" \"),\n        _c(\"li\", [\n          _c(\"p\", [\n            _vm._v(\"最终类\"),\n            _c(\"strong\", [_vm._v(\"不能拥有匿名内部类\")]),\n            _vm._v(\"。\")\n          ])\n        ])\n      ])\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"h3\", { attrs: { id: \"抽象\" } }, [\n      _c(\n        \"a\",\n        {\n          staticClass: \"header-anchor\",\n          attrs: { href: \"#抽象\", \"aria-hidden\": \"true\" }\n        },\n        [_vm._v(\"#\")]\n      ),\n      _vm._v(\" 抽象\")\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"h4\", { attrs: { id: \"抽象方法\" } }, [\n      _c(\n        \"a\",\n        {\n          staticClass: \"header-anchor\",\n          attrs: { href: \"#抽象方法\", \"aria-hidden\": \"true\" }\n        },\n        [_vm._v(\"#\")]\n      ),\n      _vm._v(\" 抽象方法\")\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"ul\", [\n      _c(\"li\", [\n        _c(\"p\", [\n          _vm._v(\n            \"当需要子类存在一些名称一致但细节不同的方法时，可以在父类中事先声明出这些方法。\"\n          )\n        ])\n      ]),\n      _vm._v(\" \"),\n      _c(\"li\", [\n        _c(\"p\", [\n          _vm._v(\n            \"此时的声明行为无需为其编写方法体，使用这种方式构成的方法称为\"\n          ),\n          _c(\"strong\", [_vm._v(\"抽象方法\")]),\n          _vm._v(\"，使用关键字\"),\n          _c(\"code\", [_vm._v(\"abstract\")]),\n          _vm._v(\"修饰。\")\n        ])\n      ])\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"div\", { staticClass: \"warning custom-block\" }, [\n      _c(\"p\", { staticClass: \"custom-block-title\" }, [_vm._v(\"注意\")]),\n      _vm._v(\" \"),\n      _c(\"ul\", [\n        _c(\"li\", [\n          _c(\"p\", [\n            _vm._v(\"抽象方法所在类\"),\n            _c(\"strong\", [_vm._v(\"必须是抽象类\")])\n          ])\n        ]),\n        _vm._v(\" \"),\n        _c(\"li\", [\n          _c(\"p\", [\n            _vm._v(\"抽象方法\"),\n            _c(\"strong\", [_vm._v(\"必须被重写\")]),\n            _vm._v(\"，子类继承抽象类后\"),\n            _c(\"strong\", [_vm._v(\"必须重写其中的抽象方法\")])\n          ])\n        ]),\n        _vm._v(\" \"),\n        _c(\"li\", [\n          _c(\"p\", [\n            _c(\"strong\", [_vm._v(\"抽象方法之间可以重载\")]),\n            _vm._v(\"（重载只关注方法名和参数列表）\")\n          ])\n        ]),\n        _vm._v(\" \"),\n        _c(\"li\", [\n          _c(\"p\", [\n            _vm._v(\"抽象方法的\"),\n            _c(\"strong\", [\n              _vm._v(\"权限是\"),\n              _c(\"code\", [_vm._v(\"默认\")]),\n              _vm._v(\"，要求子类必须同包\")\n            ])\n          ])\n        ])\n      ])\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"div\", { staticClass: \"danger custom-block\" }, [\n      _c(\"p\", { staticClass: \"custom-block-title\" }, [_vm._v(\"注意\")]),\n      _vm._v(\" \"),\n      _c(\"ul\", [\n        _c(\"li\", [\n          _c(\"p\", [\n            _vm._v(\"抽象方法\"),\n            _c(\"strong\", [\n              _vm._v(\"不能使用\"),\n              _c(\"code\", [_vm._v(\"static\")]),\n              _vm._v(\"修饰\")\n            ]),\n            _vm._v(\"（静态方法隶属于类）\")\n          ])\n        ]),\n        _vm._v(\" \"),\n        _c(\"li\", [\n          _c(\"p\", [\n            _vm._v(\"抽象方法\"),\n            _c(\"strong\", [\n              _vm._v(\"不能使用\"),\n              _c(\"code\", [_vm._v(\"final\")]),\n              _vm._v(\"修饰\")\n            ]),\n            _vm._v(\"（最终方法无法被重写，不符合抽象方法的规则）\")\n          ])\n        ]),\n        _vm._v(\" \"),\n        _c(\"li\", [\n          _c(\"p\", [\n            _vm._v(\"抽象方法\"),\n            _c(\"strong\", [\n              _vm._v(\"不能使用\"),\n              _c(\"code\", [_vm._v(\"private\")]),\n              _vm._v(\"修饰\")\n            ]),\n            _vm._v(\"（造成子类不可见，进而无法重载）\")\n          ])\n        ]),\n        _vm._v(\" \"),\n        _c(\"li\", [\n          _c(\"p\", [\n            _c(\"strong\", [_vm._v(\"最终类不能是抽象类\")]),\n            _vm._v(\"（最终类无法被继承，进而其方法也无法被重载）\")\n          ])\n        ])\n      ])\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"h4\", { attrs: { id: \"抽象类\" } }, [\n      _c(\n        \"a\",\n        {\n          staticClass: \"header-anchor\",\n          attrs: { href: \"#抽象类\", \"aria-hidden\": \"true\" }\n        },\n        [_vm._v(\"#\")]\n      ),\n      _vm._v(\" 抽象类\")\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"p\", [\n      _vm._v(\"被\"),\n      _c(\"code\", [_vm._v(\"abstract\")]),\n      _vm._v(\"修饰的类称为抽象类。\")\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"div\", { staticClass: \"warning custom-block\" }, [\n      _c(\"p\", { staticClass: \"custom-block-title\" }, [_vm._v(\"注意\")]),\n      _vm._v(\" \"),\n      _c(\"ul\", [\n        _c(\"li\", [\n          _c(\"p\", [_vm._v(\"抽象类\"), _c(\"strong\", [_vm._v(\"不能创建对象\")])])\n        ]),\n        _vm._v(\" \"),\n        _c(\"li\", [\n          _c(\"p\", [_vm._v(\"抽象类中\"), _c(\"strong\", [_vm._v(\"存在构造方法\")])])\n        ]),\n        _vm._v(\" \"),\n        _c(\"li\", [\n          _c(\"p\", [\n            _vm._v(\"抽象类中\"),\n            _c(\"strong\", [_vm._v(\"可以存在非抽象方法和属性\")])\n          ])\n        ])\n      ])\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"h2\", { attrs: { id: \"接口\" } }, [\n      _c(\n        \"a\",\n        {\n          staticClass: \"header-anchor\",\n          attrs: { href: \"#接口\", \"aria-hidden\": \"true\" }\n        },\n        [_vm._v(\"#\")]\n      ),\n      _vm._v(\" 接口\")\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"li\", [_c(\"p\", [_vm._v(\"类似于类的引用类型。\")])])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"li\", [\n      _c(\"p\", [\n        _vm._v(\"使用关键字\"),\n        _c(\"code\", [_vm._v(\"interface\")]),\n        _vm._v(\"表示\")\n      ])\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"li\", [\n      _c(\"p\", [\n        _vm._v(\"接口中的数据都为公共的静态常量（被\"),\n        _c(\"code\", [_vm._v(\"final\")]),\n        _vm._v(\", \"),\n        _c(\"code\", [_vm._v(\"static\")]),\n        _vm._v(\"和\"),\n        _c(\"code\", [_vm._v(\"public\")]),\n        _vm._v(\"修饰的成员变量）\")\n      ])\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"h3\", { attrs: { id: \"接口的实现\" } }, [\n      _c(\n        \"a\",\n        {\n          staticClass: \"header-anchor\",\n          attrs: { href: \"#接口的实现\", \"aria-hidden\": \"true\" }\n        },\n        [_vm._v(\"#\")]\n      ),\n      _vm._v(\" 接口的实现\")\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"ul\", [\n      _c(\"li\", [\n        _c(\"p\", [\n          _vm._v(\n            \"和抽象类类似，接口也可以有具体化的实现，称为实现(implements)。\"\n          )\n        ])\n      ]),\n      _vm._v(\" \"),\n      _c(\"li\", [\n        _c(\"p\", [\n          _vm._v(\"使用关键字\"),\n          _c(\"code\", [_vm._v(\"implements\")]),\n          _vm._v(\"来使一个类变为目标接口的实现类。\")\n        ]),\n        _vm._v(\" \"),\n        _c(\"ul\", [\n          _c(\"li\", [\n            _c(\"p\", [\n              _vm._v(\n                \"当类成为某接口（们）的实现类后，要求实现接口中定义的所有抽象方法。\"\n              )\n            ])\n          ]),\n          _vm._v(\" \"),\n          _c(\"li\", [\n            _c(\"p\", [\n              _vm._v(\"一个类可以实现多个接口，不过可能会造成方法混乱。\")\n            ])\n          ])\n        ])\n      ])\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"h3\", { attrs: { id: \"接口的多重继承\" } }, [\n      _c(\n        \"a\",\n        {\n          staticClass: \"header-anchor\",\n          attrs: { href: \"#接口的多重继承\", \"aria-hidden\": \"true\" }\n        },\n        [_vm._v(\"#\")]\n      ),\n      _vm._v(\" 接口的多重继承\")\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"p\", [\n      _c(\"strong\", [_vm._v(\"接口可以多重继承\")]),\n      _vm._v(\"，使用\"),\n      _c(\"code\", [_vm._v(\"extends\")]),\n      _vm._v(\"关键字来继承其他接口。\")\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"ul\", [\n      _c(\"li\", [\n        _vm._v(\n          \"在进行强制类型转换时，编译器会检查两个类之间是否存在继承关系\\n\"\n        ),\n        _c(\"ul\", [\n          _c(\"li\", [\n            _c(\"p\", [_vm._v(\"若存在继承关系，则编译时会通过，但运行时不一定\")])\n          ]),\n          _vm._v(\" \"),\n          _c(\"li\", [_c(\"p\", [_vm._v(\"若不存在继承关系，编译时会报错\")])])\n        ])\n      ])\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"p\", [\n      _vm._v(\n        \"由于接口之间可以多继承，接口和类之间可以多实现，所以会形成复杂的图状结构。在这样的结构中寻找根是很困难的，为提高效率，Java 在编译时会\"\n      ),\n      _c(\"strong\", [_vm._v(\"放弃检查类于接口是否存在实现关系\")]),\n      _vm._v(\"。\")\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"div\", { staticClass: \"warning custom-block\" }, [\n      _c(\"p\", { staticClass: \"custom-block-title\" }, [_vm._v(\"注意\")]),\n      _vm._v(\" \"),\n      _c(\"ul\", [\n        _c(\"li\", [\n          _c(\"p\", [\n            _vm._v(\"接口\"),\n            _c(\"strong\", [_vm._v(\"不能被实例化\")]),\n            _vm._v(\"。\")\n          ])\n        ]),\n        _vm._v(\" \"),\n        _c(\"li\", [\n          _c(\"p\", [\n            _vm._v(\"接口中\"),\n            _c(\"strong\", [_vm._v(\"不允许定义构造方法\")]),\n            _vm._v(\"，\"),\n            _c(\"strong\", [\n              _vm._v(\"编译完成后会产生\"),\n              _c(\"code\", [_vm._v(\".class\")]),\n              _vm._v(\"文件\")\n            ]),\n            _vm._v(\"，但\"),\n            _c(\"strong\", [_vm._v(\"接口不是类\")]),\n            _vm._v(\"。\")\n          ])\n        ]),\n        _vm._v(\" \"),\n        _c(\"li\", [\n          _c(\"p\", [\n            _vm._v(\"接口\"),\n            _c(\"strong\", [\n              _vm._v(\"默认只能被\"),\n              _c(\"code\", [_vm._v(\"public\")]),\n              _vm._v(\"修\")\n            ]),\n            _vm._v(\"饰，且实现接口的类中的\"),\n            _c(\"strong\", [\n              _vm._v(\"具体实现方法也只能被\"),\n              _c(\"code\", [_vm._v(\"public\")]),\n              _vm._v(\"所修饰\")\n            ]),\n            _vm._v(\"。\")\n          ])\n        ]),\n        _vm._v(\" \"),\n        _c(\"li\", [\n          _c(\"p\", [\n            _vm._v(\"接口中的\"),\n            _c(\"strong\", [\n              _vm._v(\"方法默认被\"),\n              _c(\"code\", [_vm._v(\"public\")]),\n              _vm._v(\"和\"),\n              _c(\"code\", [_vm._v(\"abstract\")]),\n              _vm._v(\"修饰\")\n            ]),\n            _vm._v(\"。\")\n          ])\n        ]),\n        _vm._v(\" \"),\n        _c(\"li\", [\n          _c(\"p\", [\n            _vm._v(\"接口\"),\n            _c(\"strong\", [_vm._v(\"可作为模板\")]),\n            _vm._v(\"，用于反射中来实现解耦。\")\n          ])\n        ])\n      ])\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"h2\", { attrs: { id: \"内部类\" } }, [\n      _c(\n        \"a\",\n        {\n          staticClass: \"header-anchor\",\n          attrs: { href: \"#内部类\", \"aria-hidden\": \"true\" }\n        },\n        [_vm._v(\"#\")]\n      ),\n      _vm._v(\" 内部类\")\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"h3\", { attrs: { id: \"方法内部类\" } }, [\n      _c(\n        \"a\",\n        {\n          staticClass: \"header-anchor\",\n          attrs: { href: \"#方法内部类\", \"aria-hidden\": \"true\" }\n        },\n        [_vm._v(\"#\")]\n      ),\n      _vm._v(\" 方法内部类\")\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"ul\", [\n      _c(\"li\", [_c(\"p\", [_vm._v(\"定义在方法中的类。\")])]),\n      _vm._v(\" \"),\n      _c(\"li\", [\n        _c(\"p\", [\n          _vm._v(\"只能在\"),\n          _c(\"strong\", [_vm._v(\"定义它的方法中使用\")]),\n          _vm._v(\"。\")\n        ])\n      ]),\n      _vm._v(\" \"),\n      _c(\"li\", [\n        _c(\"p\", [\n          _vm._v(\"方法内部类中\"),\n          _c(\"strong\", [_vm._v(\"不能定义静态属性和静态方法\")]),\n          _vm._v(\"，但\"),\n          _c(\"strong\", [_vm._v(\"静态常量是允许定义的\")]),\n          _vm._v(\"。\")\n        ])\n      ]),\n      _vm._v(\" \"),\n      _c(\"li\", [\n        _c(\"p\", [\n          _vm._v(\"方法内部类\"),\n          _c(\"strong\", [_vm._v(\"可以使用外部类中的一些属性和方法\")]),\n          _vm._v(\"。\"),\n          _c(\"strong\", [\n            _vm._v(\"但如果使用的是当前方法的数据时，要求这个数据为常量\")\n          ]),\n          _vm._v(\"。\")\n        ])\n      ])\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"h3\", { attrs: { id: \"成员内部类\" } }, [\n      _c(\n        \"a\",\n        {\n          staticClass: \"header-anchor\",\n          attrs: { href: \"#成员内部类\", \"aria-hidden\": \"true\" }\n        },\n        [_vm._v(\"#\")]\n      ),\n      _vm._v(\" 成员内部类\")\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"h3\", { attrs: { id: \"静态内部类\" } }, [\n      _c(\n        \"a\",\n        {\n          staticClass: \"header-anchor\",\n          attrs: { href: \"#静态内部类\", \"aria-hidden\": \"true\" }\n        },\n        [_vm._v(\"#\")]\n      ),\n      _vm._v(\" 静态内部类\")\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"p\", [\n      _vm._v(\"使用\"),\n      _c(\"code\", [_vm._v(\"static\")]),\n      _vm._v(\"关键字修饰的内部类。\")\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"h3\", { attrs: { id: \"匿名内部类\" } }, [\n      _c(\n        \"a\",\n        {\n          staticClass: \"header-anchor\",\n          attrs: { href: \"#匿名内部类\", \"aria-hidden\": \"true\" }\n        },\n        [_vm._v(\"#\")]\n      ),\n      _vm._v(\" 匿名内部类\")\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"ul\", [\n      _c(\"li\", [\n        _c(\"p\", [\n          _vm._v(\"类体定义和对象创建写在一起的形式，没有名称，只使用一次。\")\n        ])\n      ]),\n      _vm._v(\" \"),\n      _c(\"li\", [\n        _c(\"p\", [\n          _vm._v(\n            \"本质上是继承了对应的类或是实现了对应的接口（只要一个类允许被继承，那么它就可以拥有匿名内部类的形式）。\"\n          )\n        ])\n      ]),\n      _vm._v(\" \"),\n      _c(\"li\", [\n        _c(\"p\", [\n          _vm._v(\"若匿名内部类定义在方法中，则其使用规则同方法内部类一致。\")\n        ])\n      ]),\n      _vm._v(\" \"),\n      _c(\"li\", [\n        _c(\"p\", [\n          _vm._v(\"若匿名内部类定义在类中，则其使用规则同成员内部类一致。\")\n        ])\n      ])\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"h3\", { attrs: { id: \"内部接口\" } }, [\n      _c(\n        \"a\",\n        {\n          staticClass: \"header-anchor\",\n          attrs: { href: \"#内部接口\", \"aria-hidden\": \"true\" }\n        },\n        [_vm._v(\"#\")]\n      ),\n      _vm._v(\" 内部接口\")\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"ul\", [\n      _c(\"li\", [_c(\"p\", [_vm._v(\"定义在类或接口中的接口。\")])]),\n      _vm._v(\" \"),\n      _c(\"li\", [\n        _c(\"p\", [\n          _vm._v(\"类中定义的接口，接口中定义的类，接口中定义的接口，默认都用\"),\n          _c(\"code\", [_vm._v(\"static\")]),\n          _vm._v(\"修饰。\")\n        ])\n      ])\n    ])\n  }\n]\nrender._withStripped = true\n\nexport { render, staticRenderFns }"]}