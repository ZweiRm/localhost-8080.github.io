(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{220:function(t,a,s){"use strict";s.r(a);var _=s(17),v=Object(_.a)({},function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"面向对象"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#面向对象","aria-hidden":"true"}},[t._v("#")]),t._v(" 面向对象")]),t._v(" "),s("h2",{attrs:{id:"_3-1-概述"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-概述","aria-hidden":"true"}},[t._v("#")]),t._v(" 3.1 概述")]),t._v(" "),s("h3",{attrs:{id:"_3-1-1-面向过程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-1-面向过程","aria-hidden":"true"}},[t._v("#")]),t._v(" 3.1.1 面向过程")]),t._v(" "),s("p",[t._v("面向过程注重过程，强调完成这个过程的具体动作。"),s("br"),t._v("\n其设计理念是"),s("router-link",{attrs:{to:"/java/语法.html/#顺序结构"}},[t._v("自顶向下，逐步求精")]),t._v("的。")],1),t._v(" "),s("h3",{attrs:{id:"_3-1-2-面向对象"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-2-面向对象","aria-hidden":"true"}},[t._v("#")]),t._v(" 3.1.2 面向对象")]),t._v(" "),s("p",[t._v("面向对象 (Object-Oriented) 注重对象，当我们拥有这个对象时，我们就拥有了这个对象所具有的一切功能。"),s("br"),t._v("\n面向对象技术最大的三个特征是："),s("strong",[t._v("封装")]),t._v("，"),s("strong",[t._v("继承")]),t._v("和"),s("strong",[t._v("多态")]),t._v("。")]),t._v(" "),s("h2",{attrs:{id:"_3-2-类和对象"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-类和对象","aria-hidden":"true"}},[t._v("#")]),t._v(" 3.2 类和对象")]),t._v(" "),s("h3",{attrs:{id:"_3-2-1-类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-1-类","aria-hidden":"true"}},[t._v("#")]),t._v(" 3.2.1 类")]),t._v(" "),s("p",[t._v("类 (Class) 是 Java 程序设计语言的基础。"),s("br"),t._v("\n类似于显示生活中“种类”的概念，Java 中的类也是一种对某类事物进行抽象和归并。"),s("br"),t._v("\n我们对某类事物进行抽象分析，去粗取精，由表及里，判断出这类事物最本质的特征，并用 Java 中预定的手法进行表述，就形成了一个类。"),s("br"),t._v("\n一个类包含两大内容："),s("strong",[t._v("属性")]),t._v("和"),s("strong",[t._v("方法")]),t._v("（也称“"),s("strong",[t._v("成员变量")]),t._v("”和“"),s("strong",[t._v("成员方法")]),t._v("”）。")]),t._v(" "),s("div",{staticClass:"tip custom-block"},[s("p",{staticClass:"custom-block-title"},[t._v("成员变量和局部变量的区别")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("定义位置不同：")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("成员变量是定义在类内方法外")])]),t._v(" "),s("li",[s("p",[t._v("局部变量是定义在方法或者语句内部")])])])]),t._v(" "),s("li",[s("p",[t._v("作用域不同：")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("成员变量作用域整个类")])]),t._v(" "),s("li",[s("p",[t._v("局部变量只能在定义的方法或者语句内部使用")])])])]),t._v(" "),s("li",[s("p",[t._v("内部存储位置不同：")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("成员变量存在堆内存中，并且在堆内存中自动的赋予默认值")])]),t._v(" "),s("li",[s("p",[t._v("局部变量是存储在栈内存中，不会自动给值")])])])]),t._v(" "),s("li",[s("p",[t._v("生命周期不同：")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("成员变量是随着对象的创建而加载到堆内存中，随着对象的回收而释放;")])]),t._v(" "),s("li",[s("p",[t._v("局部变量在方法或者语句执行的时候才会创建，随着方法或者语句的结束而立即移除栈内存")])])])])])]),t._v(" "),s("h3",{attrs:{id:"_3-2-2-对象"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-2-对象","aria-hidden":"true"}},[t._v("#")]),t._v(" 3.2.2 对象")]),t._v(" "),s("p",[t._v("对象 (Object) 是对类的实例化。"),s("br"),t._v("\n我们可以通过某类的具体对象来进行具体操作。"),s("br"),t._v("\n使用"),s("code",[t._v("new")]),t._v("关键字可以创建新的对象，使用"),s("code",[t._v(".")]),t._v("运算符获取并使用该对象所具有的方法。"),s("br"),t._v("\n对象在程序中传递时，传递的是引用地址而不是数据本身。")]),t._v(" "),s("h3",{attrs:{id:"_3-2-3-this"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-3-this","aria-hidden":"true"}},[t._v("#")]),t._v(" 3.2.3 "),s("code",[t._v("this")])]),t._v(" "),s("ul",[s("li",[s("p",[s("code",[t._v("this")]),t._v("关键字")]),t._v(" "),s("ul",[s("li",[s("p",[s("code",[t._v("this")]),t._v("关键字可以表述一个对当前对象自身的引用。")])]),t._v(" "),s("li",[s("p",[t._v("在本类中使用"),s("code",[t._v("this")]),t._v("可以调用本类的"),s("strong",[t._v("非静态方法")]),t._v("和"),s("strong",[t._v("非静态属性")]),t._v("。")])])])]),t._v(" "),s("li",[s("p",[s("code",[t._v("this()")]),t._v("语句")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("表示在本类的构造方法中调用"),s("strong",[t._v("本类")]),t._v("的其他的对应形式的构造函数。")])]),t._v(" "),s("li",[s("p",[t._v("必须放在构造函数的第一行。")])])])])]),t._v(" "),s("h3",{attrs:{id:"_3-2-4-super"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-4-super","aria-hidden":"true"}},[t._v("#")]),t._v(" 3.2.4 "),s("code",[t._v("super")])]),t._v(" "),s("ul",[s("li",[s("p",[s("code",[t._v("super")]),t._v("关键字")]),t._v(" "),s("ul",[s("li",[s("p",[s("code",[t._v("super")]),t._v("关键字用以表示对父类对象的引用。")])]),t._v(" "),s("li",[s("p",[t._v("表示在子类中调用父类中的方法和属性。")])])])]),t._v(" "),s("li",[s("p",[s("code",[t._v("super()")]),t._v("语句")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("表示子类的构造方法中，调用父类中对应形式的构造方法。")])]),t._v(" "),s("li",[s("p",[t._v("必须写在子类构造函数的第一行。")])]),t._v(" "),s("li",[s("p",[t._v("每一个子类的构造函数都直接或间接的含有"),s("code",[t._v("super()")]),t._v("语句。")])]),t._v(" "),s("li",[s("p",[t._v("如果父类中没有提供无参构造，那么此时子类的构造函数中必须手动添加一个"),s("code",[t._v("super()")]),t._v("语句。")])])])])]),t._v(" "),s("h2",{attrs:{id:"_3-3-方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-方法","aria-hidden":"true"}},[t._v("#")]),t._v(" 3.3 方法")]),t._v(" "),s("p",[t._v("方法 (Method) , 也称为函数。"),s("br"),t._v("\n为实现代码复用，需要将代码进行封装。这种封装的形式就是方法。"),s("br"),t._v("\n方法在定义好之后，必须明确返回值类型。若方法有明确的返回值类型，还要确保方法有返回值。")]),t._v(" "),s("p",[s("strong",[t._v("作用")]),t._v("：")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("提高代码复用性。")])]),t._v(" "),s("li",[s("p",[t._v("使代码结构更加清晰。")])]),t._v(" "),s("li",[s("p",[t._v("便于模块化开发。")])])]),t._v(" "),s("p",[s("strong",[t._v("方法签名")]),t._v("：一个方法由其修饰符、返回值类型、方法名和形式参数唯一确定，这一组数据称为方法签名。")]),t._v(" "),s("h3",{attrs:{id:"_3-3-1-构造方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-1-构造方法","aria-hidden":"true"}},[t._v("#")]),t._v(" 3.3.1 构造方法")]),t._v(" "),s("p",[t._v("与类同名且没有返回值类型。"),s("br"),t._v("\n可以被重载。"),s("br"),t._v("\n构造函数中可以存在"),s("code",[t._v("return")]),t._v("语句，用于规避不合理的数据。"),s("br"),t._v(" "),s("strong",[t._v("作用")]),t._v("：用于创建对象（标识对象创建的开始和结束）")]),t._v(" "),s("h3",{attrs:{id:"_3-3-2-方法的使用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-2-方法的使用","aria-hidden":"true"}},[t._v("#")]),t._v(" 3.3.2 方法的使用")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("方法递归"),s("br"),t._v(" "),s("strong",[t._v("核心")]),t._v("：方法调用自己本身")]),t._v(" "),s("div",{staticClass:"warning custom-block"},[s("p",{staticClass:"custom-block-title"},[t._v("注意")]),t._v(" "),s("p",[t._v("需要控制好结束条件，若递归层数太深，则出现栈溢出错误。")])])]),t._v(" "),s("li",[s("p",[t._v("方法重载 (Method Overload)"),s("br"),t._v("\n详见"),s("a",{attrs:{href:"#%E5%A4%9A%E6%80%81"}},[t._v("多态")]),t._v("。")])]),t._v(" "),s("li",[s("p",[t._v("方法覆盖 (Method Override)"),s("br"),t._v("\n详见"),s("a",{attrs:{href:"#%E5%A4%9A%E6%80%81"}},[t._v("多态")]),t._v("。")])])]),t._v(" "),s("div",{staticClass:"warning custom-block"},[s("p",{staticClass:"custom-block-title"},[t._v("注意")]),t._v(" "),s("p",[t._v("在传递参数的时候，对于基本类型而言，传递的实际值；对于引用类型而言，传递的是地址。"),s("br"),t._v("\n例如在传递数组对象时，只要地址不发生改变，方法中的一切变化会作用于原数组。")])]),t._v(" "),s("h2",{attrs:{id:"_3-4-代码块"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-4-代码块","aria-hidden":"true"}},[t._v("#")]),t._v(" 3.4 代码块")]),t._v(" "),s("h3",{attrs:{id:"_3-4-1-构造代码块"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-4-1-构造代码块","aria-hidden":"true"}},[t._v("#")]),t._v(" 3.4.1 构造代码块")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("定义在类内。")])]),t._v(" "),s("li",[s("p",[t._v("也称“初始化代码块”，在创建对象时执行构造方法之前先执行。")])]),t._v(" "),s("li",[s("p",[t._v("用于完成一些初始化的操作。")])])]),t._v(" "),s("h3",{attrs:{id:"_3-4-2-局部代码块"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-4-2-局部代码块","aria-hidden":"true"}},[t._v("#")]),t._v(" 3.4.2 局部代码块")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("定义在方法或代码块中。")])]),t._v(" "),s("li",[s("p",[t._v("限制变量的生命周期和使用范围。")])]),t._v(" "),s("li",[s("p",[t._v("可以提高内存的利用率。")])])]),t._v(" "),s("h2",{attrs:{id:"_3-5包"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-5包","aria-hidden":"true"}},[t._v("#")]),t._v(" 3.5包")]),t._v(" "),s("p",[t._v("包是类的容器，提供了解决命名空间冲突的方案。")]),t._v(" "),s("h3",{attrs:{id:"_3-5-1-包的声明"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-5-1-包的声明","aria-hidden":"true"}},[t._v("#")]),t._v(" 3.5.1 包的声明")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("使用"),s("code",[t._v("package")]),t._v("关键字声明定义一个包。")])]),t._v(" "),s("li",[s("p",[t._v("一个"),s("code",[t._v(".java")]),t._v("文件只允许存在一个"),s("code",[t._v("package")]),t._v("语句。")])]),t._v(" "),s("li",[s("p",[t._v("包的声明必须放在"),s("code",[t._v(".java")]),t._v("文件的首行。")])])]),t._v(" "),s("h3",{attrs:{id:"_3-5-2-包的导入"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-5-2-包的导入","aria-hidden":"true"}},[t._v("#")]),t._v(" 3.5.2 包的导入")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("使用"),s("code",[t._v("import")]),t._v("关键字来导入别的包。")])]),t._v(" "),s("li",[s("p",[s("code",[t._v("*")]),t._v("为通配符，表示导入该包下所有类（不包括子包中的类）。")])])]),t._v(" "),s("h3",{attrs:{id:"_3-5-3-jdk-常用包"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-5-3-jdk-常用包","aria-hidden":"true"}},[t._v("#")]),t._v(" 3.5.3 JDK 常用包")]),t._v(" "),s("ul",[s("li",[s("p",[s("code",[t._v("java.lang")]),t._v("：核心包，在程序启动时自动加载到方法区，不需要手动导入")])]),t._v(" "),s("li",[s("p",[s("code",[t._v("java.util")]),t._v("：工具包，存放简化操作的工具类")])]),t._v(" "),s("li",[s("p",[s("code",[t._v("java.io")]),t._v("：数据传输")])]),t._v(" "),s("li",[s("p",[s("code",[t._v("java.net")]),t._v("：网络传输")])]),t._v(" "),s("li",[s("p",[s("code",[t._v("java.math")]),t._v("：数学运算")])]),t._v(" "),s("li",[s("p",[s("code",[t._v("java.sql")]),t._v("：数据库相关")])]),t._v(" "),s("li",[s("p",[s("code",[t._v("java.awt")]),t._v("：图形用户界面")])]),t._v(" "),s("li",[s("p",[s("code",[t._v("java.security")]),t._v("：数据安全")])]),t._v(" "),s("li",[s("p",[s("code",[t._v("javax.xxx")]),t._v("：扩展")])]),t._v(" "),s("li",[s("p",[s("code",[t._v("org.xxx")]),t._v("：第三方厂商、开源社区提供的包")])])]),t._v(" "),s("div",{staticClass:"warning custom-block"},[s("p",{staticClass:"custom-block-title"},[t._v("注意")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("包名不能以"),s("code",[t._v("java")]),t._v("、"),s("code",[t._v("javax")]),t._v("或者"),s("code",[t._v("org")]),t._v("开头。")])]),t._v(" "),s("li",[s("p",[t._v("同包，或"),s("code",[t._v("lang")]),t._v("包下的类不使用"),s("code",[t._v("import")]),t._v("语句导入")])])])]),t._v(" "),s("h2",{attrs:{id:"_3-6-封装"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-6-封装","aria-hidden":"true"}},[t._v("#")]),t._v(" 3.6 封装")]),t._v(" "),s("p",[t._v("将一个事物的相关信息聚集在一个逻辑单元内部的机制就是封装。")]),t._v(" "),s("p",[s("strong",[t._v("形式")]),t._v("：方法、属性私有化（类的封装）、内部类等。")]),t._v(" "),s("p",[s("strong",[t._v("优点")]),t._v("：提高复用性和安全性，使代码结构更加紧密。")]),t._v(" "),s("h2",{attrs:{id:"_3-7-继承"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-7-继承","aria-hidden":"true"}},[t._v("#")]),t._v(" 3.7 继承")]),t._v(" "),s("p",[t._v("对于两个类 A 和 B 来说，它们之间的关系是：B 由 A 派生而来（对于 B 类来说，它拥有 A 类的所有属性和方法），则可以说 B 类继承自 A 类。")]),t._v(" "),s("h3",{attrs:{id:"_3-7-1-形式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-7-1-形式","aria-hidden":"true"}},[t._v("#")]),t._v(" 3.7.1 形式")]),t._v(" "),s("p",[t._v("使用"),s("code",[t._v("extends")]),t._v("关键字实现继承。"),s("br"),t._v("\nJava 仅支持单继承（一个子类只能有一个父类）。")]),t._v(" "),s("h3",{attrs:{id:"_3-7-2-单继承与多继承"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-7-2-单继承与多继承","aria-hidden":"true"}},[t._v("#")]),t._v(" 3.7.2 单继承与多继承")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("单继承"),s("br"),t._v("\n子类只能有一个父类的继承形式。")]),t._v(" "),s("p",[s("strong",[t._v("优点")]),t._v("：")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("可以提高代码的复用性")])]),t._v(" "),s("li",[s("p",[t._v("可以避免方法调用的混乱，提高了方法调用的安全性")])])])]),t._v(" "),s("li",[s("p",[t._v("多继承"),s("br"),t._v("\n子类可以拥有多个父类的继承形式。")]),t._v(" "),s("p",[s("strong",[t._v("优点")]),t._v("：")]),t._v(" "),s("ul",[s("li",[t._v("代码的复用性上要优于单继承")])])]),t._v(" "),s("li",[s("p",[t._v("举例")]),t._v(" "),s("ul",[s("li",[s("p",[s("code",[t._v("iPhone 类")]),t._v("仅继承自"),s("code",[t._v("智能设备类")]),t._v("。（单继承）")]),t._v(" "),s("p",[s("img",{attrs:{src:"/img/%E5%8D%95%E7%BB%A7%E6%89%BF.jpg",alt:"单继承"}})])]),t._v(" "),s("li",[s("p",[s("code",[t._v("Apple Watch 类")]),t._v("同时继承自"),s("code",[t._v("时钟类")]),t._v("和"),s("code",[t._v("只能设备类")]),t._v("。（多继承）")]),t._v(" "),s("p",[s("img",{attrs:{src:"/img/%E5%A4%9A%E7%BB%A7%E6%89%BF.jpg",alt:"多继承"}})])])])])]),t._v(" "),s("h3",{attrs:{id:"_3-7-3-直接继承与间接继承"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-7-3-直接继承与间接继承","aria-hidden":"true"}},[t._v("#")]),t._v(" 3.7.3 直接继承与间接继承")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("直接继承"),s("br"),t._v("\nB 类直接派生于 A 类，称直接继承。")])]),t._v(" "),s("li",[s("p",[t._v("间接继承\nB 类直接派生于 A类，C 类直接派生于 B 类。则称 C 类间接继承于 A 类。"),s("br"),t._v(" "),s("img",{attrs:{src:"/img/%E9%97%B4%E6%8E%A5%E7%BB%A7%E6%89%BF.jpg",alt:"间接继承"}})])])]),t._v(" "),s("div",{staticClass:"tip custom-block"},[s("p",{staticClass:"custom-block-title"},[t._v("特别地")]),t._v(" "),s("p",[t._v("子类继承自父类时，父类中这些内容子类不可见：")]),t._v(" "),s("ul",[s("li",[s("p",[s("code",[t._v("private")])])]),t._v(" "),s("li",[s("p",[t._v("代码块")])]),t._v(" "),s("li",[s("p",[t._v("构造方法")])])])]),t._v(" "),s("h2",{attrs:{id:"_3-8-多态"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-8-多态","aria-hidden":"true"}},[t._v("#")]),t._v(" 3.8 多态")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("当众多对象接收到同一个消息后，可以产生不同的响应效果，这种现象称为多态。")])]),t._v(" "),s("li",[s("p",[t._v("多态性依托于继承性。")])]),t._v(" "),s("li",[s("p",[t._v("多态主要针对的是对象具有的行为，而不是属性。")])]),t._v(" "),s("li",[s("p",[t._v("可以提高代码的灵活性，配合反射实现解耦。")])])]),t._v(" "),s("h3",{attrs:{id:"_3-8-1-编译时多态"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-8-1-编译时多态","aria-hidden":"true"}},[t._v("#")]),t._v(" 3.8.1 编译时多态")]),t._v(" "),s("p",[t._v("方法重载 (Method Overload)"),s("br"),t._v("\n是"),s("strong",[t._v("行为多态")]),t._v("。"),s("br"),t._v("\n发生在同一个类中，方法名一致而参数列表不同。和修饰符、返回值类型、异常无关。")]),t._v(" "),s("h3",{attrs:{id:"_3-8-2-运行时多态"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-8-2-运行时多态","aria-hidden":"true"}},[t._v("#")]),t._v(" 3.8.2 运行时多态")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("向上造型")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("是"),s("strong",[t._v("对象多态")]),t._v("。")])]),t._v(" "),s("li",[s("p",[t._v("父类引用指向子类对象。"),s("br"),t._v("\n代码高亮标出。")]),t._v(" "),s("p",[s("strong",[t._v("Input")])]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("div",{staticClass:"highlight-lines"},[s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("div",{staticClass:"highlighted"},[t._v(" ")]),s("br"),s("br"),s("br"),s("br"),s("br")]),s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Super")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ...")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Sub")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Super")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ...")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("App")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" args"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Super")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("super")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Sub")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 向上造型")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Sub")]),t._v(" sub "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Sub")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Super")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 向下造型")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("div",{staticClass:"danger custom-block"},[s("p",{staticClass:"custom-block-title"},[t._v("注意")]),t._v(" "),s("p",[t._v("向下造型是不允许的，上面的例子会通过编译器检测，但运行后会抛出异常："),s("br"),t._v(" "),s("strong",[t._v("Output")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("java.lang.ClassCastException: class Super cannot be cast to class Sub\n")])])])])]),t._v(" "),s("li",[s("p",[t._v("使用向上造型时，编译期"),s("strong",[t._v("只检查两个类之间的关系")]),t._v("而"),s("strong",[t._v("不检查具体用哪个类创建对象")])])]),t._v(" "),s("li",[s("p",[t._v("对象方法看父类，方法内容看子类。")])])])]),t._v(" "),s("li",[s("p",[t._v("方法覆盖 (Method Override)")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("又称方法重写，是"),s("strong",[t._v("行为多态")]),t._v("。")])]),t._v(" "),s("li",[s("p",[t._v("发生在父子类中，双方拥有方法签名完全一致的非静态方法。")])]),t._v(" "),s("li",[s("p",[t._v("调用方法的时候，调用的是重写后的方法。")])])]),t._v(" "),s("div",{staticClass:"warning custom-block"},[s("p",{staticClass:"custom-block-title"},[t._v("注意")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("子类重写的方法"),s("strong",[t._v("权限修饰符需大于等于父类")]),t._v("。")])]),t._v(" "),s("li",[s("p",[t._v("关于返回值类型")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("若"),s("strong",[t._v("父类方法返回值类型是引用数据类型")]),t._v("，则子类重写的方法的返回值类型是父类方法返回值类型的子类或其本身。")])]),t._v(" "),s("li",[s("p",[t._v("若"),s("strong",[t._v("父类方法返回值类型是基本数据类型")]),t._v("，则子类重写的方法返回值类型必须和父类方法相同。")])])])]),t._v(" "),s("li",[s("p",[t._v("子类抛出的异常需为父类异常的子类。")])])])]),t._v(" "),s("p",[s("strong",[t._v("Input")])]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("A")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n  * 方法 mA\n  * @return void\n  */")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("mA")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ...")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("B")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("A")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n  * 方法 mB\n  * @return void\n  */")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("mB")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ...")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n  * 方法 m\n  * @return B\n  */")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("C")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("B")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("m")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ...")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("D")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("C")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n  * 方法 m\n  * @return A\n  */")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("A")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("m")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ...")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" args"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 用C类声明，用D类创建对象")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 则对象c拥有返回值类型为B的方法m()")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("C")]),t._v(" c "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("D")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 用B类声明一个变量b，来接收方法的返回值")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 方法调用的是D类中的m()")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 由于D类中m()的返回值类型是A，故最终是用子类接收父类对象")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("B")]),t._v(" b "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" c"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("m")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 对象b无法调用B类中的mB()")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// b.mB();")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])])]),t._v(" "),s("h2",{attrs:{id:"_3-9-权限修饰符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-9-权限修饰符","aria-hidden":"true"}},[t._v("#")]),t._v(" 3.9 权限修饰符")]),t._v(" "),s("ul",[s("li",[t._v("Java 提供了"),s("code",[t._v("public")]),t._v(", "),s("code",[t._v("protected")]),t._v(", "),s("code",[t._v("默认")]),t._v(", "),s("code",[t._v("private")]),t._v("四种访问修饰符。")]),t._v(" "),s("li",[t._v("通过访问修饰符来提高程序的安全性和可维护性。")])]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",{staticStyle:{"text-align":"center"}},[t._v("修饰符")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("本类中")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("同包类中 (本包)")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("子类中")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("其他包中 (不同包中的所有类)")])])]),t._v(" "),s("tbody",[s("tr",[s("td",{staticStyle:{"text-align":"center"}},[s("code",[t._v("public")])]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("可以")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("可以")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("可以")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("可以")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[s("code",[t._v("protected")])]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("可以")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("可以")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("可以")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("不可以")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[s("code",[t._v("默认")])]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("可以")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("可以")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("同包可以")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("不可以")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[s("code",[t._v("private")])]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("可以")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("不可以")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("不可以")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("不可以")])])])]),t._v(" "),s("h2",{attrs:{id:"_3-10-非权限修饰符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-10-非权限修饰符","aria-hidden":"true"}},[t._v("#")]),t._v(" 3.10 非权限修饰符")]),t._v(" "),s("h3",{attrs:{id:"_3-10-1-静态"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-10-1-静态","aria-hidden":"true"}},[t._v("#")]),t._v(" 3.10.1 静态")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("Java 中使用"),s("code",[t._v("static")]),t._v("关键字来标识静态。")])]),t._v(" "),s("li",[s("p",[t._v("可以使用静态来修饰变量、方法、内部类和代码块。")])])]),t._v(" "),s("h4",{attrs:{id:"_3-10-1-1-静态变量"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-10-1-1-静态变量","aria-hidden":"true"}},[t._v("#")]),t._v(" 3.10.1.1 静态变量")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("也称为"),s("strong",[t._v("类变量")]),t._v("。")])]),t._v(" "),s("li",[s("p",[t._v("随着类的加载而被加载到方法区中，在其内部自动赋"),s("router-link",{attrs:{to:"/java/语法.html/#基本数据类型"}},[t._v("默认值")]),t._v("。")],1)]),t._v(" "),s("li",[s("p",[t._v("静态变量优先于对象而存在，故静态变量可以不通过对象，直接通过类来调用（通过对象调用也是可以被理解的）。")])]),t._v(" "),s("li",[s("p",[t._v("该类所产生的所有对象实际上保存该静态变量在静态区中的地址。")])]),t._v(" "),s("li",[s("p",[t._v("静态变量被该类的所有对象所共享。")])])]),t._v(" "),s("p",[s("img",{attrs:{src:"/img/%E9%9D%99%E6%80%81%E5%86%85%E5%AD%98.png",alt:"静态内存"}})]),t._v(" "),s("p",[s("strong",[t._v("路标 ->")]),t._v(" "),s("router-link",{attrs:{to:"/java/#内存分区"}},[t._v("Java 内存分区")]),t._v("。")],1),t._v(" "),s("div",{staticClass:"warning custom-block"},[s("p",{staticClass:"custom-block-title"},[t._v("注意")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("静态变量"),s("strong",[t._v("不能")]),t._v("定义在构造代码块中")])]),t._v(" "),s("li",[s("p",[t._v("在构造代码块中"),s("strong",[t._v("可以")]),t._v("对静态变量赋值")])])]),t._v(" "),s("p",[s("strong",[t._v("Input")])]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("OneClass")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" iSta"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    iSta "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])])])]),t._v(" "),s("h4",{attrs:{id:"_3-10-1-2-静态方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-10-1-2-静态方法","aria-hidden":"true"}},[t._v("#")]),t._v(" 3.10.1.2 静态方法")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("也称为"),s("strong",[t._v("类方法")]),t._v("。")])]),t._v(" "),s("li",[s("p",[t._v("在类加载的时候加载到方法区中的静态区。只存储在静态区，方法被调用时在栈内存中执行。")])]),t._v(" "),s("li",[s("p",[t._v("静态方法"),s("strong",[t._v("先于对象而存在")]),t._v("，静态方法可通过类名或对象调用，不能直接使用本类中的非静态方法和非静态属性。")])])]),t._v(" "),s("div",{staticClass:"warning custom-block"},[s("p",{staticClass:"custom-block-title"},[t._v("注意")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("静态方法中"),s("strong",[t._v("不能")]),t._v("定义静态变量")])]),t._v(" "),s("li",[s("p",[t._v("静态方法中"),s("strong",[t._v("不能")]),t._v("直接调用类中的非静态方法")])]),t._v(" "),s("li",[s("p",[s("code",[t._v("main()")]),t._v("中"),s("strong",[t._v("不能")]),t._v("使用"),s("code",[t._v("this")]),t._v("或"),s("code",[t._v("super")])])]),t._v(" "),s("li",[s("p",[t._v("静态方法"),s("strong",[t._v("不能")]),t._v("重写")])]),t._v(" "),s("li",[s("p",[t._v("父子类中"),s("strong",[t._v("可以")]),t._v("存在方法签名一致的静态方法\n父子类中存在方法签名完全一致的方法，两者或均被"),s("code",[t._v("static")]),t._v("修饰或都不被"),s("code",[t._v("static")]),t._v("修饰")])]),t._v(" "),s("li",[s("p",[t._v("静态方法"),s("strong",[t._v("可以")]),t._v("被继承")])]),t._v(" "),s("li",[s("p",[t._v("类只加载一次，只在第一次使用时加载到方法去，加载之后不再移除")])])])]),t._v(" "),s("h4",{attrs:{id:"_3-10-1-3-静态代码块"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-10-1-3-静态代码块","aria-hidden":"true"}},[t._v("#")]),t._v(" 3.10.1.3 静态代码块")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("类被第一次真正使用（创建对象/调用方法）时执行一次")])]),t._v(" "),s("li",[s("p",[t._v("先父后子，先静后动")])])]),t._v(" "),s("p",[s("strong",[t._v("Input")])]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("OneClass")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Warning: Variable 'i' initializer '5' is redundan")]),t._v("\n\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("AnotherClass")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Warning: The value 7 assigned to 'i' is never used ")]),t._v("\n    i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Error: Illegal forward reference")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("ul",[s("li",[s("p",[t._v("在"),s("code",[t._v("OneClass")]),t._v("中"),s("br"),t._v("\n首先编译"),s("code",[t._v("int i")]),t._v("，后续针对"),s("code",[t._v("i")]),t._v("的操作有效。")])]),t._v(" "),s("li",[s("p",[t._v("在"),s("code",[t._v("AnotherClass")]),t._v("中"),s("br"),t._v("\n编译到"),s("code",[t._v("i = 7;")]),t._v("时检查之前代码中是否定义过变量"),s("code",[t._v("i")]),t._v("，若上文不存在该变量则将其暂时标记为一个成员变量。"),s("br"),t._v("\n此时这个变量"),s("code",[t._v("i")]),t._v("不真实存在，后续对"),s("code",[t._v("i")]),t._v("的操作无效。"),s("br"),t._v("\n直到找到与标记名称"),s("code",[t._v("i")]),t._v("一致的成员变量时，才会将标记的"),s("code",[t._v("i")]),t._v("真正赋值。")])])]),t._v(" "),s("h3",{attrs:{id:"_3-10-2-最终"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-10-2-最终","aria-hidden":"true"}},[t._v("#")]),t._v(" 3.10.2 最终")]),t._v(" "),s("p",[s("code",[t._v("final")]),t._v("关键字可以用来修饰数据（成员变量），方法（成员方法）和类。")]),t._v(" "),s("h4",{attrs:{id:"_3-10-2-1-常量"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-10-2-1-常量","aria-hidden":"true"}},[t._v("#")]),t._v(" 3.10.2.1 常量")]),t._v(" "),s("p",[t._v("当"),s("code",[t._v("final")]),t._v("修饰数据时，这个数据称为常量。"),s("strong",[t._v("定义后不可修改")]),t._v("。")]),t._v(" "),s("div",{staticClass:"warning custom-block"},[s("p",{staticClass:"custom-block-title"},[t._v("注意")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("成员常量"),s("strong",[t._v("需要在对象创建完成前进行赋初值，且只能赋值一次")]),t._v("。")])]),t._v(" "),s("li",[s("p",[t._v("若常量类型为"),s("strong",[t._v("基本数据类型，其实际值不可变")]),t._v("；若常量类型为"),s("strong",[t._v("引用数据类型，其地址不可变")]),t._v("。")])]),t._v(" "),s("li",[s("p",[t._v("若常量是静态常量，"),s("strong",[t._v("需要在类加载之前进行赋值")]),t._v("。")])])])]),t._v(" "),s("h4",{attrs:{id:"_3-10-2-2-最终方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-10-2-2-最终方法","aria-hidden":"true"}},[t._v("#")]),t._v(" 3.10.2.2 最终方法")]),t._v(" "),s("p",[t._v("当"),s("code",[t._v("final")]),t._v("修饰方法时，这个方法称为最终方法。")]),t._v(" "),s("div",{staticClass:"warning custom-block"},[s("p",{staticClass:"custom-block-title"},[t._v("注意")]),t._v(" "),s("p",[t._v("最终方法"),s("strong",[t._v("不能被重写，可以被重载，可以被继承")]),t._v("。")])]),t._v(" "),s("h4",{attrs:{id:"_3-10-2-3-最终类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-10-2-3-最终类","aria-hidden":"true"}},[t._v("#")]),t._v(" 3.10.2.3 最终类")]),t._v(" "),s("p",[t._v("当"),s("code",[t._v("final")]),t._v("修饰类时，这个类称为最终类。")]),t._v(" "),s("div",{staticClass:"warning custom-block"},[s("p",{staticClass:"custom-block-title"},[t._v("注意")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("最终类"),s("strong",[t._v("不能被继承")]),t._v("。")])]),t._v(" "),s("li",[s("p",[t._v("最终类"),s("strong",[t._v("不能拥有匿名内部类")]),t._v("。")])])])]),t._v(" "),s("h3",{attrs:{id:"_3-10-3-抽象"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-10-3-抽象","aria-hidden":"true"}},[t._v("#")]),t._v(" 3.10.3 抽象")]),t._v(" "),s("h4",{attrs:{id:"_3-10-3-1-抽象方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-10-3-1-抽象方法","aria-hidden":"true"}},[t._v("#")]),t._v(" 3.10.3.1 抽象方法")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("当需要子类存在一些名称一致但细节不同的方法时，可以在父类中事先声明出这些方法。")])]),t._v(" "),s("li",[s("p",[t._v("此时的声明行为无需为其编写方法体，使用这种方式构成的方法称为"),s("strong",[t._v("抽象方法")]),t._v("，使用关键字"),s("code",[t._v("abstract")]),t._v("修饰。")])])]),t._v(" "),s("div",{staticClass:"warning custom-block"},[s("p",{staticClass:"custom-block-title"},[t._v("注意")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("抽象方法所在类"),s("strong",[t._v("必须是抽象类")])])]),t._v(" "),s("li",[s("p",[t._v("抽象方法"),s("strong",[t._v("必须被重写")]),t._v("，子类继承抽象类后"),s("strong",[t._v("必须重写其中的抽象方法")])])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("抽象方法之间可以重载")]),t._v("（重载只关注方法名和参数列表）")])]),t._v(" "),s("li",[s("p",[t._v("抽象方法的"),s("strong",[t._v("权限是"),s("code",[t._v("默认")]),t._v("，要求子类必须同包")])])])])]),t._v(" "),s("div",{staticClass:"danger custom-block"},[s("p",{staticClass:"custom-block-title"},[t._v("注意")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("抽象方法"),s("strong",[t._v("不能使用"),s("code",[t._v("static")]),t._v("修饰")]),t._v("（静态方法隶属于类）")])]),t._v(" "),s("li",[s("p",[t._v("抽象方法"),s("strong",[t._v("不能使用"),s("code",[t._v("final")]),t._v("修饰")]),t._v("（最终方法无法被重写，不符合抽象方法的规则）")])]),t._v(" "),s("li",[s("p",[t._v("抽象方法"),s("strong",[t._v("不能使用"),s("code",[t._v("private")]),t._v("修饰")]),t._v("（造成子类不可见，进而无法重载）")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("最终类不能是抽象类")]),t._v("（最终类无法被继承，进而其方法也无法被重载）")])])])]),t._v(" "),s("h4",{attrs:{id:"_3-10-3-2-抽象类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-10-3-2-抽象类","aria-hidden":"true"}},[t._v("#")]),t._v(" 3.10.3.2 抽象类")]),t._v(" "),s("p",[t._v("被"),s("code",[t._v("abstract")]),t._v("修饰的类称为抽象类。")]),t._v(" "),s("div",{staticClass:"warning custom-block"},[s("p",{staticClass:"custom-block-title"},[t._v("注意")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("抽象类"),s("strong",[t._v("不能创建对象")])])]),t._v(" "),s("li",[s("p",[t._v("抽象类中"),s("strong",[t._v("存在构造方法")])])]),t._v(" "),s("li",[s("p",[t._v("抽象类中"),s("strong",[t._v("可以存在非抽象方法和属性")])])])])]),t._v(" "),s("h2",{attrs:{id:"_3-11-接口"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-11-接口","aria-hidden":"true"}},[t._v("#")]),t._v(" 3.11 接口")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("类似于类的引用类型。")])]),t._v(" "),s("li",[s("p",[t._v("使用关键字"),s("code",[t._v("interface")]),t._v("表示")])]),t._v(" "),s("li",[s("p",[t._v("接口中方法默认且只能为抽象方法"),s("Badge",{attrs:{type:"error",text:"< Java SE 7.0"}})],1),t._v(" "),s("ul",[s("li",[t._v("在接口中，使用"),s("code",[t._v("default")]),t._v("关键字修饰的方法可以拥有方法体"),s("Badge",{attrs:{text:"Java SE 8.0 +"}})],1)])]),t._v(" "),s("li",[s("p",[t._v("接口中的数据都为公共的静态常量（被"),s("code",[t._v("final")]),t._v(", "),s("code",[t._v("static")]),t._v("和"),s("code",[t._v("public")]),t._v("修饰的成员变量）")])])]),t._v(" "),s("h3",{attrs:{id:"_3-11-1-接口的实现"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-11-1-接口的实现","aria-hidden":"true"}},[t._v("#")]),t._v(" 3.11.1 接口的实现")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("和抽象类类似，接口也可以有具体化的实现，称为实现(implements)。")])]),t._v(" "),s("li",[s("p",[t._v("使用关键字"),s("code",[t._v("implements")]),t._v("来使一个类变为目标接口的实现类。")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("当类成为某接口（们）的实现类后，要求实现接口中定义的所有抽象方法。")])]),t._v(" "),s("li",[s("p",[t._v("一个类可以实现多个接口，不过可能会造成方法混乱。")])])])])]),t._v(" "),s("h3",{attrs:{id:"_3-11-2-接口的多重继承"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-11-2-接口的多重继承","aria-hidden":"true"}},[t._v("#")]),t._v(" 3.11.2 接口的多重继承")]),t._v(" "),s("p",[s("strong",[t._v("接口可以多重继承")]),t._v("，使用"),s("code",[t._v("extends")]),t._v("关键字来继承其他接口。")]),t._v(" "),s("div",{staticClass:"tip custom-block"},[s("p",{staticClass:"custom-block-title"},[t._v("特别地")]),t._v(" "),s("p",[t._v("对于引用数据类型的强制转换有：")]),t._v(" "),s("blockquote",[s("ul",[s("li",[t._v("在进行强制类型转换时，编译器会检查两个类之间是否存在继承关系\n"),s("ul",[s("li",[s("p",[t._v("若存在继承关系，则编译时会通过，但运行时不一定")])]),t._v(" "),s("li",[s("p",[t._v("若不存在继承关系，编译时会报错")])])])])]),t._v(" "),s("p",[t._v("→ 详见"),s("router-link",{attrs:{to:"/java/语法.html/#引用类型的强制类型转换"}},[t._v("引用类型的强制类型转换")])],1)]),t._v(" "),s("p",[t._v("由于接口之间可以多继承，接口和类之间可以多实现，所以会形成复杂的图状结构。在这样的结构中寻找根是很困难的，为提高效率，Java 在编译时会"),s("strong",[t._v("放弃检查类于接口是否存在实现关系")]),t._v("。")])]),t._v(" "),s("div",{staticClass:"warning custom-block"},[s("p",{staticClass:"custom-block-title"},[t._v("注意")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("接口"),s("strong",[t._v("不能被实例化")]),t._v("。")])]),t._v(" "),s("li",[s("p",[t._v("接口中"),s("strong",[t._v("不允许定义构造方法")]),t._v("，"),s("strong",[t._v("编译完成后会产生"),s("code",[t._v(".class")]),t._v("文件")]),t._v("，但"),s("strong",[t._v("接口不是类")]),t._v("。")])]),t._v(" "),s("li",[s("p",[t._v("接口"),s("strong",[t._v("默认只能被"),s("code",[t._v("public")]),t._v("修")]),t._v("饰，且实现接口的类中的"),s("strong",[t._v("具体实现方法也只能被"),s("code",[t._v("public")]),t._v("所修饰")]),t._v("。")])]),t._v(" "),s("li",[s("p",[t._v("接口中的"),s("strong",[t._v("方法默认被"),s("code",[t._v("public")]),t._v("和"),s("code",[t._v("abstract")]),t._v("修饰")]),t._v("。")])]),t._v(" "),s("li",[s("p",[t._v("接口"),s("strong",[t._v("可作为模板")]),t._v("，用于反射中来实现解耦。")])])])]),t._v(" "),s("h2",{attrs:{id:"_3-12-内部类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-12-内部类","aria-hidden":"true"}},[t._v("#")]),t._v(" 3.12 内部类")]),t._v(" "),s("p",[t._v("定义在类或者接口内部的类称为内部类。")]),t._v(" "),s("h3",{attrs:{id:"_3-12-1-方法内部类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-12-1-方法内部类","aria-hidden":"true"}},[t._v("#")]),t._v(" 3.12.1 方法内部类")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("定义在方法中的类。")])]),t._v(" "),s("li",[s("p",[t._v("只能在"),s("strong",[t._v("定义它的方法中使用")]),t._v("。")])]),t._v(" "),s("li",[s("p",[t._v("方法内部类中"),s("strong",[t._v("不能定义静态属性和静态方法")]),t._v("，但"),s("strong",[t._v("静态常量是允许定义的")]),t._v("。")])]),t._v(" "),s("li",[s("p",[t._v("方法内部类"),s("strong",[t._v("可以使用外部类中的一些属性和方法")]),t._v("。"),s("strong",[t._v("但如果使用的是当前方法的数据时，要求这个数据为常量")]),t._v("。")])])]),t._v(" "),s("h3",{attrs:{id:"_3-12-2-成员内部类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-12-2-成员内部类","aria-hidden":"true"}},[t._v("#")]),t._v(" 3.12.2 成员内部类")]),t._v(" "),s("p",[t._v("定义在类的内部，方法外部的类。")]),t._v(" "),s("h3",{attrs:{id:"_3-12-3-静态内部类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-12-3-静态内部类","aria-hidden":"true"}},[t._v("#")]),t._v(" 3.12.3 静态内部类")]),t._v(" "),s("p",[t._v("使用"),s("code",[t._v("static")]),t._v("关键字修饰的内部类。")]),t._v(" "),s("h3",{attrs:{id:"_3-12-4-匿名内部类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-12-4-匿名内部类","aria-hidden":"true"}},[t._v("#")]),t._v(" 3.12.4 匿名内部类")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("类体定义和对象创建写在一起的形式，没有名称，只使用一次。")])]),t._v(" "),s("li",[s("p",[t._v("本质上是继承了对应的类或是实现了对应的接口（只要一个类允许被继承，那么它就可以拥有匿名内部类的形式）。")])]),t._v(" "),s("li",[s("p",[t._v("若匿名内部类定义在方法中，则其使用规则同方法内部类一致。")])]),t._v(" "),s("li",[s("p",[t._v("若匿名内部类定义在类中，则其使用规则同成员内部类一致。")])])]),t._v(" "),s("h3",{attrs:{id:"_3-12-5-内部接口"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-12-5-内部接口","aria-hidden":"true"}},[t._v("#")]),t._v(" 3.12.5 内部接口")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("定义在类或接口中的接口。")])]),t._v(" "),s("li",[s("p",[t._v("类中定义的接口，接口中定义的类，接口中定义的接口，默认都用"),s("code",[t._v("static")]),t._v("修饰。")])])])])},[],!1,null,null,null);a.default=v.exports}}]);