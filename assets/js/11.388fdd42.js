(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{178:function(t,s,e){"use strict";e.r(s);var a=e(0),_=Object(a.a)({},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("div",{staticClass:"content"},[t._m(0),t._v(" "),t._m(1),t._v(" "),t._m(2),t._v(" "),e("p",[t._v("面向过程注重过程，强调完成这个过程的具体动作。"),e("br"),t._v("\n其设计理念是"),e("router-link",{attrs:{to:"./语法.html/#顺序结构"}},[t._v("自顶向下，逐步求精")]),t._v("的。")],1),t._v(" "),t._m(3),t._v(" "),t._m(4),t._v(" "),t._m(5),t._v(" "),t._m(6),t._v(" "),t._m(7),t._v(" "),t._m(8),t._v(" "),t._m(9),t._v(" "),t._m(10),t._v(" "),t._m(11),t._v(" "),t._m(12),t._v(" "),t._m(13),t._v(" "),t._m(14),t._v(" "),t._m(15),t._v(" "),t._m(16),t._v(" "),t._m(17),t._v(" "),t._m(18),t._v(" "),t._m(19),t._v(" "),t._m(20),t._v(" "),t._m(21),t._v(" "),t._m(22),t._v(" "),t._m(23),t._v(" "),t._m(24),t._v(" "),t._m(25),t._v(" "),t._m(26),t._v(" "),t._m(27),t._v(" "),t._m(28),t._v(" "),t._m(29),t._v(" "),t._m(30),t._v(" "),e("p",[t._v("包是类的容器，提供了解决命名空间冲突的方案。")]),t._v(" "),t._m(31),t._v(" "),t._m(32),t._v(" "),t._m(33),t._v(" "),t._m(34),t._v(" "),t._m(35),t._v(" "),t._m(36),t._v(" "),t._m(37),t._v(" "),t._m(38),t._v(" "),e("p",[t._v("将一个事物的相关信息聚集在一个逻辑单元内部的机制就是封装。")]),t._v(" "),t._m(39),t._v(" "),t._m(40),t._v(" "),t._m(41),t._v(" "),e("p",[t._v("对于两个类 A 和 B 来说，它们之间的关系是：B 由 A 派生而来（对于 B 类来说，它拥有 A 类的所有属性和方法），则可以说 B 类继承自 A 类。")]),t._v(" "),t._m(42),t._v(" "),t._m(43),t._v(" "),t._m(44),t._v(" "),t._m(45),t._v(" "),t._m(46),t._v(" "),t._m(47),t._v(" "),t._m(48),t._v(" "),t._m(49),t._v(" "),t._m(50),t._v(" "),t._m(51),t._v(" "),t._m(52),t._v(" "),t._m(53),t._v(" "),t._m(54),t._v(" "),t._m(55),t._v(" "),t._m(56),t._v(" "),t._m(57),t._v(" "),t._m(58),t._v(" "),t._m(59),t._v(" "),t._m(60),t._v(" "),t._m(61),t._v(" "),e("ul",[t._m(62),t._v(" "),e("li",[e("p",[t._v("随着类的加载而被加载到方法区中，在其内部自动赋"),e("router-link",{attrs:{to:"./语法.html/#基本数据类型"}},[t._v("默认值")]),t._v("。")],1)]),t._v(" "),t._m(63),t._v(" "),t._m(64),t._v(" "),t._m(65)]),t._v(" "),t._m(66),t._v(" "),e("p",[e("strong",[t._v("路标 ->")]),t._v(" "),e("router-link",{attrs:{to:"./#内存分区"}},[t._v("Java 内存分区")]),t._v("。")],1),t._v(" "),t._m(67),t._v(" "),t._m(68),t._v(" "),t._m(69),t._v(" "),t._m(70),t._v(" "),t._m(71),t._v(" "),t._m(72),t._v(" "),t._m(73),t._v(" "),t._m(74),t._m(75),t._v(" "),t._m(76),t._v(" "),t._m(77),t._v(" "),t._m(78),t._v(" "),t._m(79),t._v(" "),t._m(80),t._v(" "),t._m(81),t._v(" "),t._m(82),t._v(" "),t._m(83),t._v(" "),t._m(84),t._v(" "),t._m(85),t._v(" "),t._m(86),t._v(" "),t._m(87),t._v(" "),t._m(88),t._v(" "),t._m(89),t._v(" "),t._m(90),t._v(" "),t._m(91),t._v(" "),t._m(92),t._v(" "),t._m(93),t._v(" "),t._m(94),t._v(" "),t._m(95),t._v(" "),e("ul",[t._m(96),t._v(" "),t._m(97),t._v(" "),e("li",[e("p",[t._v("接口中方法默认且只能为抽象方法"),e("Badge",{attrs:{type:"error",text:"< Java SE 7.0"}})],1),t._v(" "),e("ul",[e("li",[t._v("在接口中，使用"),e("code",[t._v("default")]),t._v("关键字修饰的方法可以拥有方法体"),e("Badge",{attrs:{text:"Java SE 8.0 +"}})],1)])]),t._v(" "),t._m(98)]),t._v(" "),t._m(99),t._v(" "),t._m(100),t._v(" "),t._m(101),t._v(" "),t._m(102),t._v(" "),e("div",{staticClass:"tip custom-block"},[e("p",{staticClass:"custom-block-title"},[t._v("特别地")]),t._v(" "),e("p",[t._v("对于引用数据类型的强制转换有：")]),t._v(" "),e("blockquote",[t._m(103),t._v(" "),e("p",[t._v("→ 详见"),e("router-link",{attrs:{to:"./语法.html/#引用类型的强制类型转换"}},[t._v("引用类型的强制类型转换")])],1)]),t._v(" "),t._m(104)]),t._v(" "),t._m(105),t._v(" "),t._m(106),t._v(" "),e("p",[t._v("定义在类或者接口内部的类称为内部类。")]),t._v(" "),t._m(107),t._v(" "),t._m(108),t._v(" "),t._m(109),t._v(" "),e("p",[t._v("定义在类的内部，方法外部的类。")]),t._v(" "),t._m(110),t._v(" "),t._m(111),t._v(" "),t._m(112),t._v(" "),t._m(113),t._v(" "),t._m(114),t._v(" "),t._m(115)])},[function(){var t=this.$createElement,s=this._self._c||t;return s("h1",{attrs:{id:"面向对象"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#面向对象","aria-hidden":"true"}},[this._v("#")]),this._v(" 面向对象")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"概述"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#概述","aria-hidden":"true"}},[this._v("#")]),this._v(" 概述")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"面向过程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#面向过程","aria-hidden":"true"}},[this._v("#")]),this._v(" 面向过程")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"面向对象-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#面向对象-2","aria-hidden":"true"}},[this._v("#")]),this._v(" 面向对象")])},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("p",[t._v("面向对象 (Object-Oriented) 注重对象，当我们拥有这个对象时，我们就拥有了这个对象所具有的一切功能。"),e("br"),t._v("\n面向对象技术最大的三个特征是："),e("strong",[t._v("封装")]),t._v("，"),e("strong",[t._v("继承")]),t._v("和"),e("strong",[t._v("多态")]),t._v("。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"类和对象"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#类和对象","aria-hidden":"true"}},[this._v("#")]),this._v(" 类和对象")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#类","aria-hidden":"true"}},[this._v("#")]),this._v(" 类")])},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("p",[t._v("类 (Class) 是 Java 程序设计语言的基础。"),e("br"),t._v("\n类似于显示生活中“种类”的概念，Java 中的类也是一种对某类事物进行抽象和归并。"),e("br"),t._v("\n我们对某类事物进行抽象分析，去粗取精，由表及里，判断出这类事物最本质的特征，并用 Java 中预定的手法进行表述，就形成了一个类。"),e("br"),t._v("\n一个类包含两大内容："),e("strong",[t._v("属性")]),t._v("和"),e("strong",[t._v("方法")]),t._v("（也称“"),e("strong",[t._v("成员变量")]),t._v("”和“"),e("strong",[t._v("成员方法")]),t._v("”）。")])},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("div",{staticClass:"tip custom-block"},[e("p",{staticClass:"custom-block-title"},[t._v("成员变量和局部变量的区别")]),t._v(" "),e("ol",[e("li",[e("p",[t._v("定义位置不同：")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("成员变量是定义在类内方法外")])]),t._v(" "),e("li",[e("p",[t._v("局部变量是定义在方法或者语句内部")])])])]),t._v(" "),e("li",[e("p",[t._v("作用域不同：")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("成员变量作用域整个类")])]),t._v(" "),e("li",[e("p",[t._v("局部变量只能在定义的方法或者语句内部使用")])])])]),t._v(" "),e("li",[e("p",[t._v("内部存储位置不同：")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("成员变量存在堆内存中，并且在堆内存中自动的赋予默认值")])]),t._v(" "),e("li",[e("p",[t._v("局部变量是存储在栈内存中，不会自动给值")])])])]),t._v(" "),e("li",[e("p",[t._v("生命周期不同：")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("成员变量是随着对象的创建而加载到堆内存中，随着对象的回收而释放;")])]),t._v(" "),e("li",[e("p",[t._v("局部变量在方法或者语句执行的时候才会创建，随着方法或者语句的结束而立即移除栈内存")])])])])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"对象"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#对象","aria-hidden":"true"}},[this._v("#")]),this._v(" 对象")])},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("p",[t._v("对象 (Object) 是对类的实例化。"),e("br"),t._v("\n我们可以通过某类的具体对象来进行具体操作。"),e("br"),t._v("\n使用"),e("code",[t._v("new")]),t._v("关键字可以创建新的对象，使用"),e("code",[t._v(".")]),t._v("运算符获取并使用该对象所具有的方法。"),e("br"),t._v("\n对象在程序中传递时，传递的是引用地址而不是数据本身。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"this"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#this","aria-hidden":"true"}},[this._v("#")]),this._v(" "),s("code",[this._v("this")])])},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("ul",[e("li",[e("p",[e("code",[t._v("this")]),t._v("关键字")]),t._v(" "),e("ul",[e("li",[e("p",[e("code",[t._v("this")]),t._v("关键字可以表述一个对当前对象自身的引用。")])]),t._v(" "),e("li",[e("p",[t._v("在本类中使用"),e("code",[t._v("this")]),t._v("可以调用本类的"),e("strong",[t._v("非静态方法")]),t._v("和"),e("strong",[t._v("非静态属性")]),t._v("。")])])])]),t._v(" "),e("li",[e("p",[e("code",[t._v("this()")]),t._v("语句")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("表示在本类的构造方法中调用"),e("strong",[t._v("本类")]),t._v("的其他的对应形式的构造函数。")])]),t._v(" "),e("li",[e("p",[t._v("必须放在构造函数的第一行。")])])])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"super"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#super","aria-hidden":"true"}},[this._v("#")]),this._v(" "),s("code",[this._v("super")])])},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("ul",[e("li",[e("p",[e("code",[t._v("super")]),t._v("关键字")]),t._v(" "),e("ul",[e("li",[e("p",[e("code",[t._v("super")]),t._v("关键字用以表示对父类对象的引用。")])]),t._v(" "),e("li",[e("p",[t._v("表示在子类中调用父类中的方法和属性。")])])])]),t._v(" "),e("li",[e("p",[e("code",[t._v("super()")]),t._v("语句")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("表示子类的构造方法中，调用父类中对应形式的构造方法。")])]),t._v(" "),e("li",[e("p",[t._v("必须写在子类构造函数的第一行。")])]),t._v(" "),e("li",[e("p",[t._v("每一个子类的构造函数都直接或间接的含有"),e("code",[t._v("super()")]),t._v("语句。")])]),t._v(" "),e("li",[e("p",[t._v("如果父类中没有提供无参构造，那么此时子类的构造函数中必须手动添加一个"),e("code",[t._v("super()")]),t._v("语句。")])])])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#方法","aria-hidden":"true"}},[this._v("#")]),this._v(" 方法")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("方法 (Method) , 也称为函数。"),s("br"),this._v("\n为实现代码复用，需要将代码进行封装。这种封装的形式就是方法。"),s("br"),this._v("\n方法在定义好之后，必须明确返回值类型。若方法有明确的返回值类型，还要确保方法有返回值。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("strong",[this._v("作用")]),this._v("：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("ul",[s("li",[s("p",[this._v("提高代码复用性。")])]),this._v(" "),s("li",[s("p",[this._v("使代码结构更加清晰。")])]),this._v(" "),s("li",[s("p",[this._v("便于模块化开发。")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("strong",[this._v("方法签名")]),this._v("：一个方法由其修饰符、返回值类型、方法名和形式参数唯一确定，这一组数据称为方法签名。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"构造方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#构造方法","aria-hidden":"true"}},[this._v("#")]),this._v(" 构造方法")])},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("p",[t._v("与类同名且没有返回值类型。"),e("br"),t._v("\n可以被重载。"),e("br"),t._v("\n构造函数中可以存在"),e("code",[t._v("return")]),t._v("语句，用于规避不合理的数据。"),e("br"),t._v(" "),e("strong",[t._v("作用")]),t._v("：用于创建对象（标识对象创建的开始和结束）")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"方法的使用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#方法的使用","aria-hidden":"true"}},[this._v("#")]),this._v(" 方法的使用")])},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("ul",[e("li",[e("p",[t._v("方法递归"),e("br"),t._v(" "),e("strong",[t._v("核心")]),t._v("：方法调用自己本身")]),t._v(" "),e("div",{staticClass:"warning custom-block"},[e("p",{staticClass:"custom-block-title"},[t._v("注意")]),t._v(" "),e("p",[t._v("需要控制好结束条件，若递归层数太深，则出现栈溢出错误。")])])]),t._v(" "),e("li",[e("p",[t._v("方法重载 (Method Overload)"),e("br"),t._v("\n详见"),e("a",{attrs:{href:"#%E5%A4%9A%E6%80%81"}},[t._v("多态")]),t._v("。")])]),t._v(" "),e("li",[e("p",[t._v("方法覆盖 (Method Override)"),e("br"),t._v("\n详见"),e("a",{attrs:{href:"#%E5%A4%9A%E6%80%81"}},[t._v("多态")]),t._v("。")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"warning custom-block"},[s("p",{staticClass:"custom-block-title"},[this._v("注意")]),this._v(" "),s("p",[this._v("在传递参数的时候，对于基本类型而言，传递的实际值；对于引用类型而言，传递的是地址。"),s("br"),this._v("\n例如在传递数组对象时，只要地址不发生改变，方法中的一切变化会作用于原数组。")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"代码块"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#代码块","aria-hidden":"true"}},[this._v("#")]),this._v(" 代码块")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"构造代码块"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#构造代码块","aria-hidden":"true"}},[this._v("#")]),this._v(" 构造代码块")])},function(){var t=this.$createElement,s=this._self._c||t;return s("ul",[s("li",[s("p",[this._v("定义在类内。")])]),this._v(" "),s("li",[s("p",[this._v("也称“初始化代码块”，在创建对象时执行构造方法之前先执行。")])]),this._v(" "),s("li",[s("p",[this._v("用于完成一些初始化的操作。")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"局部代码块"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#局部代码块","aria-hidden":"true"}},[this._v("#")]),this._v(" 局部代码块")])},function(){var t=this.$createElement,s=this._self._c||t;return s("ul",[s("li",[s("p",[this._v("定义在方法或代码块中。")])]),this._v(" "),s("li",[s("p",[this._v("限制变量的生命周期和使用范围。")])]),this._v(" "),s("li",[s("p",[this._v("可以提高内存的利用率。")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"包"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#包","aria-hidden":"true"}},[this._v("#")]),this._v(" 包")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"包的声明"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#包的声明","aria-hidden":"true"}},[this._v("#")]),this._v(" 包的声明")])},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("ul",[e("li",[e("p",[t._v("使用"),e("code",[t._v("package")]),t._v("关键字声明定义一个包。")])]),t._v(" "),e("li",[e("p",[t._v("一个"),e("code",[t._v(".java")]),t._v("文件只允许存在一个"),e("code",[t._v("package")]),t._v("语句。")])]),t._v(" "),e("li",[e("p",[t._v("包的声明必须放在"),e("code",[t._v(".java")]),t._v("文件的首行。")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"包的导入"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#包的导入","aria-hidden":"true"}},[this._v("#")]),this._v(" 包的导入")])},function(){var t=this.$createElement,s=this._self._c||t;return s("ul",[s("li",[s("p",[this._v("使用"),s("code",[this._v("import")]),this._v("关键字来导入别的包。")])]),this._v(" "),s("li",[s("p",[s("code",[this._v("*")]),this._v("为通配符，表示导入该包下所有类（不包括子包中的类）。")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"jdk-常用包"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#jdk-常用包","aria-hidden":"true"}},[this._v("#")]),this._v(" JDK 常用包")])},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("ul",[e("li",[e("p",[e("code",[t._v("java.lang")]),t._v("：核心包，在程序启动时自动加载到方法区，不需要手动导入")])]),t._v(" "),e("li",[e("p",[e("code",[t._v("java.util")]),t._v("：工具包，存放简化操作的工具类")])]),t._v(" "),e("li",[e("p",[e("code",[t._v("java.io")]),t._v("：数据传输")])]),t._v(" "),e("li",[e("p",[e("code",[t._v("java.net")]),t._v("：网络传输")])]),t._v(" "),e("li",[e("p",[e("code",[t._v("java.math")]),t._v("：数学运算")])]),t._v(" "),e("li",[e("p",[e("code",[t._v("java.sql")]),t._v("：数据库相关")])]),t._v(" "),e("li",[e("p",[e("code",[t._v("java.awt")]),t._v("：图形用户界面")])]),t._v(" "),e("li",[e("p",[e("code",[t._v("java.security")]),t._v("：数据安全")])]),t._v(" "),e("li",[e("p",[e("code",[t._v("javax.xxx")]),t._v("：扩展")])]),t._v(" "),e("li",[e("p",[e("code",[t._v("org.xxx")]),t._v("：第三方厂商、开源社区提供的包")])])])},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("div",{staticClass:"warning custom-block"},[e("p",{staticClass:"custom-block-title"},[t._v("注意")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("包名不能以"),e("code",[t._v("java")]),t._v("、"),e("code",[t._v("javax")]),t._v("或者"),e("code",[t._v("org")]),t._v("开头。")])]),t._v(" "),e("li",[e("p",[t._v("同包，或"),e("code",[t._v("lang")]),t._v("包下的类不使用"),e("code",[t._v("import")]),t._v("语句导入")])])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"封装"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#封装","aria-hidden":"true"}},[this._v("#")]),this._v(" 封装")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("strong",[this._v("形式")]),this._v("：方法、属性私有化（类的封装）、内部类等。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("strong",[this._v("优点")]),this._v("：提高复用性和安全性，使代码结构更加紧密。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"继承"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#继承","aria-hidden":"true"}},[this._v("#")]),this._v(" 继承")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"形式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#形式","aria-hidden":"true"}},[this._v("#")]),this._v(" 形式")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("使用"),s("code",[this._v("extends")]),this._v("关键字实现继承。"),s("br"),this._v("\nJava 仅支持单继承（一个子类只能有一个父类）。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"单继承与多继承"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#单继承与多继承","aria-hidden":"true"}},[this._v("#")]),this._v(" 单继承与多继承")])},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("ul",[e("li",[e("p",[t._v("单继承"),e("br"),t._v("\n子类只能有一个父类的继承形式。")]),t._v(" "),e("p",[e("strong",[t._v("优点")]),t._v("：")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("可以提高代码的复用性")])]),t._v(" "),e("li",[e("p",[t._v("可以避免方法调用的混乱，提高了方法调用的安全性")])])])]),t._v(" "),e("li",[e("p",[t._v("多继承"),e("br"),t._v("\n子类可以拥有多个父类的继承形式。")]),t._v(" "),e("p",[e("strong",[t._v("优点")]),t._v("：")]),t._v(" "),e("ul",[e("li",[t._v("代码的复用性上要优于单继承")])])]),t._v(" "),e("li",[e("p",[t._v("举例")]),t._v(" "),e("ul",[e("li",[e("p",[e("code",[t._v("iPhone 类")]),t._v("仅继承自"),e("code",[t._v("智能设备类")]),t._v("。（单继承）")]),t._v(" "),e("p",[e("img",{attrs:{src:"/img/%E5%8D%95%E7%BB%A7%E6%89%BF.jpg",alt:"单继承"}})])]),t._v(" "),e("li",[e("p",[e("code",[t._v("Apple Watch 类")]),t._v("同时继承自"),e("code",[t._v("时钟类")]),t._v("和"),e("code",[t._v("只能设备类")]),t._v("。（多继承）")]),t._v(" "),e("p",[e("img",{attrs:{src:"/img/%E5%A4%9A%E7%BB%A7%E6%89%BF.jpg",alt:"多继承"}})])])])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"直接继承与间接继承"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#直接继承与间接继承","aria-hidden":"true"}},[this._v("#")]),this._v(" 直接继承与间接继承")])},function(){var t=this.$createElement,s=this._self._c||t;return s("ul",[s("li",[s("p",[this._v("直接继承"),s("br"),this._v("\nB 类直接派生于 A 类，称直接继承。")])]),this._v(" "),s("li",[s("p",[this._v("间接继承\nB 类直接派生于 A类，C 类直接派生于 B 类。则称 C 类间接继承于 A 类。"),s("br"),this._v(" "),s("img",{attrs:{src:"/img/%E9%97%B4%E6%8E%A5%E7%BB%A7%E6%89%BF.jpg",alt:"间接继承"}})])])])},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("div",{staticClass:"tip custom-block"},[e("p",{staticClass:"custom-block-title"},[t._v("特别地")]),t._v(" "),e("p",[t._v("子类继承自父类时，父类中这些内容子类不可见：")]),t._v(" "),e("ul",[e("li",[e("p",[e("code",[t._v("private")])])]),t._v(" "),e("li",[e("p",[t._v("代码块")])]),t._v(" "),e("li",[e("p",[t._v("构造方法")])])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"多态"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#多态","aria-hidden":"true"}},[this._v("#")]),this._v(" 多态")])},function(){var t=this.$createElement,s=this._self._c||t;return s("ul",[s("li",[s("p",[this._v("当众多对象接收到同一个消息后，可以产生不同的响应效果，这种现象称为多态。")])]),this._v(" "),s("li",[s("p",[this._v("多态性依托于继承性。")])]),this._v(" "),s("li",[s("p",[this._v("多态主要针对的是对象具有的行为，而不是属性。")])]),this._v(" "),s("li",[s("p",[this._v("可以提高代码的灵活性，配合反射实现解耦。")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"编译时多态"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#编译时多态","aria-hidden":"true"}},[this._v("#")]),this._v(" 编译时多态")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("方法重载 (Method Overload)"),s("br"),this._v("\n是"),s("strong",[this._v("行为多态")]),this._v("。"),s("br"),this._v("\n发生在同一个类中，方法名一致而参数列表不同。和修饰符、返回值类型、异常无关。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"运行时多态"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#运行时多态","aria-hidden":"true"}},[this._v("#")]),this._v(" 运行时多态")])},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("ul",[e("li",[e("p",[t._v("向上造型")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("是"),e("strong",[t._v("对象多态")]),t._v("。")])]),t._v(" "),e("li",[e("p",[t._v("父类引用指向子类对象。"),e("br"),t._v("\n代码高亮标出。")]),t._v(" "),e("p",[e("strong",[t._v("Input")])]),t._v(" "),e("div",{staticClass:"language-java extra-class"},[e("div",{staticClass:"highlight-lines"},[e("br"),e("br"),e("br"),e("br"),e("br"),e("br"),e("br"),e("br"),e("br"),e("br"),e("div",{staticClass:"highlighted"},[t._v(" ")]),e("br"),e("br"),e("br"),e("br"),e("br")]),e("pre",{pre:!0,attrs:{class:"language-java"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Super")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ...")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Sub")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Super")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ...")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("App")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("String args"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    Super "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("super")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Sub")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 向上造型")]),t._v("\n\n    Sub sub "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Sub"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Super")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 向下造型")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),e("div",{staticClass:"danger custom-block"},[e("p",{staticClass:"custom-block-title"},[t._v("注意")]),t._v(" "),e("p",[t._v("向下造型是不允许的，上面的例子会通过编译器检测，但运行后会抛出异常："),e("br"),t._v(" "),e("strong",[t._v("Output")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("java.lang.ClassCastException: class Super cannot be cast to class Sub\n")])])])])]),t._v(" "),e("li",[e("p",[t._v("使用向上造型时，编译期"),e("strong",[t._v("只检查两个类之间的关系")]),t._v("而"),e("strong",[t._v("不检查具体用哪个类创建对象")])])]),t._v(" "),e("li",[e("p",[t._v("对象方法看父类，方法内容看子类。")])])])]),t._v(" "),e("li",[e("p",[t._v("方法覆盖 (Method Override)")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("又称方法重写，是"),e("strong",[t._v("行为多态")]),t._v("。")])]),t._v(" "),e("li",[e("p",[t._v("发生在父子类中，双方拥有方法签名完全一致的非静态方法。")])]),t._v(" "),e("li",[e("p",[t._v("调用方法的时候，调用的是重写后的方法。")])])]),t._v(" "),e("div",{staticClass:"warning custom-block"},[e("p",{staticClass:"custom-block-title"},[t._v("注意")]),t._v(" "),e("ol",[e("li",[e("p",[t._v("子类重写的方法"),e("strong",[t._v("权限修饰符需大于等于父类")]),t._v("。")])]),t._v(" "),e("li",[e("p",[t._v("关于返回值类型")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("若"),e("strong",[t._v("父类方法返回值类型是引用数据类型")]),t._v("，则子类重写的方法的返回值类型是父类方法返回值类型的子类或其本身。")])]),t._v(" "),e("li",[e("p",[t._v("若"),e("strong",[t._v("父类方法返回值类型是基本数据类型")]),t._v("，则子类重写的方法返回值类型必须和父类方法相同。")])])])]),t._v(" "),e("li",[e("p",[t._v("子类抛出的异常需为父类异常的子类。")])])])]),t._v(" "),e("p",[e("strong",[t._v("Input")])]),t._v(" "),e("div",{staticClass:"language-java extra-class"},[e("pre",{pre:!0,attrs:{class:"language-java"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("A")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n  * 方法 mA\n  * @return void\n  */")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("mA")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ...")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("B")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("A")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n  * 方法 mB\n  * @return void\n  */")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("mB")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ...")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n  * 方法 m\n  * @return B\n  */")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("C")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" B "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("m")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ...")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("D")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("C")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n  * 方法 m\n  * @return A\n  */")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" A "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("m")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ...")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("String"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" args"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 用C类声明，用D类创建对象")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 则对象c拥有返回值类型为B的方法m()")]),t._v("\n  C c "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("D")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 用B类声明一个变量b，来接收方法的返回值")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 方法调用的是D类中的m()")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 由于D类中m()的返回值类型是A，故最终是用子类接收父类对象")]),t._v("\n  B b "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" c"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("m")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 对象b无法调用B类中的mB()")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// b.mB();")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"权限修饰符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#权限修饰符","aria-hidden":"true"}},[this._v("#")]),this._v(" 权限修饰符")])},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("ul",[e("li",[t._v("Java 提供了"),e("code",[t._v("public")]),t._v(", "),e("code",[t._v("protected")]),t._v(", "),e("code",[t._v("默认")]),t._v(", "),e("code",[t._v("private")]),t._v("四种访问修饰符。")]),t._v(" "),e("li",[t._v("通过访问修饰符来提高程序的安全性和可维护性。")])])},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("table",[e("thead",[e("tr",[e("th",{staticStyle:{"text-align":"center"}},[t._v("修饰符")]),t._v(" "),e("th",{staticStyle:{"text-align":"center"}},[t._v("本类中")]),t._v(" "),e("th",{staticStyle:{"text-align":"center"}},[t._v("同包类中 (本包)")]),t._v(" "),e("th",{staticStyle:{"text-align":"center"}},[t._v("子类中")]),t._v(" "),e("th",{staticStyle:{"text-align":"center"}},[t._v("其他包中 (不同包中的所有类)")])])]),t._v(" "),e("tbody",[e("tr",[e("td",{staticStyle:{"text-align":"center"}},[e("code",[t._v("public")])]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("可以")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("可以")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("可以")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("可以")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[e("code",[t._v("protected")])]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("可以")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("可以")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("可以")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("不可以")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[e("code",[t._v("默认")])]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("可以")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("可以")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("同包可以")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("不可以")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[e("code",[t._v("private")])]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("可以")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("不可以")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("不可以")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("不可以")])])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"非权限修饰符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#非权限修饰符","aria-hidden":"true"}},[this._v("#")]),this._v(" 非权限修饰符")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"静态"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#静态","aria-hidden":"true"}},[this._v("#")]),this._v(" 静态")])},function(){var t=this.$createElement,s=this._self._c||t;return s("ul",[s("li",[s("p",[this._v("Java 中使用"),s("code",[this._v("static")]),this._v("关键字来标识静态。")])]),this._v(" "),s("li",[s("p",[this._v("可以使用静态来修饰变量、方法、内部类和代码块。")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h4",{attrs:{id:"静态变量"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#静态变量","aria-hidden":"true"}},[this._v("#")]),this._v(" 静态变量")])},function(){var t=this.$createElement,s=this._self._c||t;return s("li",[s("p",[this._v("也称为"),s("strong",[this._v("类变量")]),this._v("。")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("li",[s("p",[this._v("静态变量优先于对象而存在，故静态变量可以不通过对象，直接通过类来调用（通过对象调用也是可以被理解的）。")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("li",[s("p",[this._v("该类所产生的所有对象实际上保存该静态变量在静态区中的地址。")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("li",[s("p",[this._v("静态变量被该类的所有对象所共享。")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("img",{attrs:{src:"/img/%E9%9D%99%E6%80%81%E5%86%85%E5%AD%98.png",alt:"静态内存"}})])},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("div",{staticClass:"warning custom-block"},[e("p",{staticClass:"custom-block-title"},[t._v("注意")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("静态变量"),e("strong",[t._v("不能")]),t._v("定义在构造代码块中")])]),t._v(" "),e("li",[e("p",[t._v("在构造代码块中"),e("strong",[t._v("可以")]),t._v("对静态变量赋值")])])]),t._v(" "),e("p",[e("strong",[t._v("Input")])]),t._v(" "),e("div",{staticClass:"language-java extra-class"},[e("pre",{pre:!0,attrs:{class:"language-java"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("OneClass")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" iSta"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    iSta "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h4",{attrs:{id:"静态方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#静态方法","aria-hidden":"true"}},[this._v("#")]),this._v(" 静态方法")])},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("ul",[e("li",[e("p",[t._v("也称为"),e("strong",[t._v("类方法")]),t._v("。")])]),t._v(" "),e("li",[e("p",[t._v("在类加载的时候加载到方法区中的静态区。只存储在静态区，方法被调用时在栈内存中执行。")])]),t._v(" "),e("li",[e("p",[t._v("静态方法"),e("strong",[t._v("先于对象而存在")]),t._v("，静态方法可通过类名或对象调用，不能直接使用本类中的非静态方法和非静态属性。")])])])},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("div",{staticClass:"warning custom-block"},[e("p",{staticClass:"custom-block-title"},[t._v("注意")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("静态方法中"),e("strong",[t._v("不能")]),t._v("定义静态变量")])]),t._v(" "),e("li",[e("p",[t._v("静态方法中"),e("strong",[t._v("不能")]),t._v("直接调用类中的非静态方法")])]),t._v(" "),e("li",[e("p",[e("code",[t._v("main()")]),t._v("中"),e("strong",[t._v("不能")]),t._v("使用"),e("code",[t._v("this")]),t._v("或"),e("code",[t._v("super")])])]),t._v(" "),e("li",[e("p",[t._v("静态方法"),e("strong",[t._v("不能")]),t._v("重写")])]),t._v(" "),e("li",[e("p",[t._v("父子类中"),e("strong",[t._v("可以")]),t._v("存在方法签名一致的静态方法\n父子类中存在方法签名完全一致的方法，两者或均被"),e("code",[t._v("static")]),t._v("修饰或都不被"),e("code",[t._v("static")]),t._v("修饰")])]),t._v(" "),e("li",[e("p",[t._v("静态方法"),e("strong",[t._v("可以")]),t._v("被继承")])]),t._v(" "),e("li",[e("p",[t._v("类只加载一次，只在第一次使用时加载到方法去，加载之后不再移除")])])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h4",{attrs:{id:"静态代码块"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#静态代码块","aria-hidden":"true"}},[this._v("#")]),this._v(" 静态代码块")])},function(){var t=this.$createElement,s=this._self._c||t;return s("ul",[s("li",[s("p",[this._v("类被第一次真正使用（创建对象/调用方法）时执行一次")])]),this._v(" "),s("li",[s("p",[this._v("先父后子，先静后动")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("strong",[this._v("Input")])])},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("div",{staticClass:"language-java extra-class"},[e("pre",{pre:!0,attrs:{class:"language-java"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("OneClass")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Warning: Variable 'i' initializer '5' is redundan")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    i "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    i "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\nClass "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("AnotherClass")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    i "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Warning: The value 7 assigned to 'i' is never used ")]),t._v("\n    i "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Error: Illegal forward reference")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("ul",[e("li",[e("p",[t._v("在"),e("code",[t._v("OneClass")]),t._v("中"),e("br"),t._v("\n首先编译"),e("code",[t._v("int i")]),t._v("，后续针对"),e("code",[t._v("i")]),t._v("的操作有效。")])]),t._v(" "),e("li",[e("p",[t._v("在"),e("code",[t._v("AnotherClass")]),t._v("中"),e("br"),t._v("\n编译到"),e("code",[t._v("i = 7;")]),t._v("时检查之前代码中是否定义过变量"),e("code",[t._v("i")]),t._v("，若上文不存在该变量则将其暂时标记为一个成员变量。"),e("br"),t._v("\n此时这个变量"),e("code",[t._v("i")]),t._v("不真实存在，后续对"),e("code",[t._v("i")]),t._v("的操作无效。"),e("br"),t._v("\n直到找到与标记名称"),e("code",[t._v("i")]),t._v("一致的成员变量时，才会将标记的"),e("code",[t._v("i")]),t._v("真正赋值。")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"最终"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#最终","aria-hidden":"true"}},[this._v("#")]),this._v(" 最终")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("code",[this._v("final")]),this._v("关键字可以用来修饰数据（成员变量），方法（成员方法）和类。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h4",{attrs:{id:"常量"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#常量","aria-hidden":"true"}},[this._v("#")]),this._v(" 常量")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("当"),s("code",[this._v("final")]),this._v("修饰数据时，这个数据称为常量。"),s("strong",[this._v("定义后不可修改")]),this._v("。")])},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("div",{staticClass:"warning custom-block"},[e("p",{staticClass:"custom-block-title"},[t._v("注意")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("成员常量"),e("strong",[t._v("需要在对象创建完成前进行赋初值，且只能赋值一次")]),t._v("。")])]),t._v(" "),e("li",[e("p",[t._v("若常量类型为"),e("strong",[t._v("基本数据类型，其实际值不可变")]),t._v("；若常量类型为"),e("strong",[t._v("引用数据类型，其地址不可变")]),t._v("。")])]),t._v(" "),e("li",[e("p",[t._v("若常量是静态常量，"),e("strong",[t._v("需要在类加载之前进行赋值")]),t._v("。")])])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h4",{attrs:{id:"最终方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#最终方法","aria-hidden":"true"}},[this._v("#")]),this._v(" 最终方法")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("当"),s("code",[this._v("final")]),this._v("修饰方法时，这个方法称为最终方法。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"warning custom-block"},[s("p",{staticClass:"custom-block-title"},[this._v("注意")]),this._v(" "),s("p",[this._v("最终方法"),s("strong",[this._v("不能被重写，可以被重载，可以被继承")]),this._v("。")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h4",{attrs:{id:"最终类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#最终类","aria-hidden":"true"}},[this._v("#")]),this._v(" 最终类")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("当"),s("code",[this._v("final")]),this._v("修饰类时，这个类称为最终类。")])},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("div",{staticClass:"warning custom-block"},[e("p",{staticClass:"custom-block-title"},[t._v("注意")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("最终类"),e("strong",[t._v("不能被继承")]),t._v("。")])]),t._v(" "),e("li",[e("p",[t._v("最终类"),e("strong",[t._v("不能拥有匿名内部类")]),t._v("。")])])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"抽象"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#抽象","aria-hidden":"true"}},[this._v("#")]),this._v(" 抽象")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h4",{attrs:{id:"抽象方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#抽象方法","aria-hidden":"true"}},[this._v("#")]),this._v(" 抽象方法")])},function(){var t=this.$createElement,s=this._self._c||t;return s("ul",[s("li",[s("p",[this._v("当需要子类存在一些名称一致但细节不同的方法时，可以在父类中事先声明出这些方法。")])]),this._v(" "),s("li",[s("p",[this._v("此时的声明行为无需为其编写方法体，使用这种方式构成的方法称为"),s("strong",[this._v("抽象方法")]),this._v("，使用关键字"),s("code",[this._v("abstract")]),this._v("修饰。")])])])},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("div",{staticClass:"warning custom-block"},[e("p",{staticClass:"custom-block-title"},[t._v("注意")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("抽象方法所在类"),e("strong",[t._v("必须是抽象类")])])]),t._v(" "),e("li",[e("p",[t._v("抽象方法"),e("strong",[t._v("必须被重写")]),t._v("，子类继承抽象类后"),e("strong",[t._v("必须重写其中的抽象方法")])])]),t._v(" "),e("li",[e("p",[e("strong",[t._v("抽象方法之间可以重载")]),t._v("（重载只关注方法名和参数列表）")])]),t._v(" "),e("li",[e("p",[t._v("抽象方法的"),e("strong",[t._v("权限是"),e("code",[t._v("默认")]),t._v("，要求子类必须同包")])])])])])},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("div",{staticClass:"danger custom-block"},[e("p",{staticClass:"custom-block-title"},[t._v("注意")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("抽象方法"),e("strong",[t._v("不能使用"),e("code",[t._v("static")]),t._v("修饰")]),t._v("（静态方法隶属于类）")])]),t._v(" "),e("li",[e("p",[t._v("抽象方法"),e("strong",[t._v("不能使用"),e("code",[t._v("final")]),t._v("修饰")]),t._v("（最终方法无法被重写，不符合抽象方法的规则）")])]),t._v(" "),e("li",[e("p",[t._v("抽象方法"),e("strong",[t._v("不能使用"),e("code",[t._v("private")]),t._v("修饰")]),t._v("（造成子类不可见，进而无法重载）")])]),t._v(" "),e("li",[e("p",[e("strong",[t._v("最终类不能是抽象类")]),t._v("（最终类无法被继承，进而其方法也无法被重载）")])])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h4",{attrs:{id:"抽象类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#抽象类","aria-hidden":"true"}},[this._v("#")]),this._v(" 抽象类")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("被"),s("code",[this._v("abstract")]),this._v("修饰的类称为抽象类。")])},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("div",{staticClass:"warning custom-block"},[e("p",{staticClass:"custom-block-title"},[t._v("注意")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("抽象类"),e("strong",[t._v("不能创建对象")])])]),t._v(" "),e("li",[e("p",[t._v("抽象类中"),e("strong",[t._v("存在构造方法")])])]),t._v(" "),e("li",[e("p",[t._v("抽象类中"),e("strong",[t._v("可以存在非抽象方法和属性")])])])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"接口"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#接口","aria-hidden":"true"}},[this._v("#")]),this._v(" 接口")])},function(){var t=this.$createElement,s=this._self._c||t;return s("li",[s("p",[this._v("类似于类的引用类型。")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("li",[s("p",[this._v("使用关键字"),s("code",[this._v("interface")]),this._v("表示")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("li",[s("p",[this._v("接口中的数据都为公共的静态常量（被"),s("code",[this._v("final")]),this._v(", "),s("code",[this._v("static")]),this._v("和"),s("code",[this._v("public")]),this._v("修饰的成员变量）")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"接口的实现"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#接口的实现","aria-hidden":"true"}},[this._v("#")]),this._v(" 接口的实现")])},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("ul",[e("li",[e("p",[t._v("和抽象类类似，接口也可以有具体化的实现，称为实现(implements)。")])]),t._v(" "),e("li",[e("p",[t._v("使用关键字"),e("code",[t._v("implements")]),t._v("来使一个类变为目标接口的实现类。")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("当类成为某接口（们）的实现类后，要求实现接口中定义的所有抽象方法。")])]),t._v(" "),e("li",[e("p",[t._v("一个类可以实现多个接口，不过可能会造成方法混乱。")])])])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"接口的多重继承"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#接口的多重继承","aria-hidden":"true"}},[this._v("#")]),this._v(" 接口的多重继承")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("strong",[this._v("接口可以多重继承")]),this._v("，使用"),s("code",[this._v("extends")]),this._v("关键字来继承其他接口。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("ul",[s("li",[this._v("在进行强制类型转换时，编译器会检查两个类之间是否存在继承关系\n"),s("ul",[s("li",[s("p",[this._v("若存在继承关系，则编译时会通过，但运行时不一定")])]),this._v(" "),s("li",[s("p",[this._v("若不存在继承关系，编译时会报错")])])])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("由于接口之间可以多继承，接口和类之间可以多实现，所以会形成复杂的图状结构。在这样的结构中寻找根是很困难的，为提高效率，Java 在编译时会"),s("strong",[this._v("放弃检查类于接口是否存在实现关系")]),this._v("。")])},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("div",{staticClass:"warning custom-block"},[e("p",{staticClass:"custom-block-title"},[t._v("注意")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("接口"),e("strong",[t._v("不能被实例化")]),t._v("。")])]),t._v(" "),e("li",[e("p",[t._v("接口中"),e("strong",[t._v("不允许定义构造方法")]),t._v("，"),e("strong",[t._v("编译完成后会产生"),e("code",[t._v(".class")]),t._v("文件")]),t._v("，但"),e("strong",[t._v("接口不是类")]),t._v("。")])]),t._v(" "),e("li",[e("p",[t._v("接口"),e("strong",[t._v("默认只能被"),e("code",[t._v("public")]),t._v("修")]),t._v("饰，且实现接口的类中的"),e("strong",[t._v("具体实现方法也只能被"),e("code",[t._v("public")]),t._v("所修饰")]),t._v("。")])]),t._v(" "),e("li",[e("p",[t._v("接口中的"),e("strong",[t._v("方法默认被"),e("code",[t._v("public")]),t._v("和"),e("code",[t._v("abstract")]),t._v("修饰")]),t._v("。")])]),t._v(" "),e("li",[e("p",[t._v("接口"),e("strong",[t._v("可作为模板")]),t._v("，用于反射中来实现解耦。")])])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"内部类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#内部类","aria-hidden":"true"}},[this._v("#")]),this._v(" 内部类")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"方法内部类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#方法内部类","aria-hidden":"true"}},[this._v("#")]),this._v(" 方法内部类")])},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("ul",[e("li",[e("p",[t._v("定义在方法中的类。")])]),t._v(" "),e("li",[e("p",[t._v("只能在"),e("strong",[t._v("定义它的方法中使用")]),t._v("。")])]),t._v(" "),e("li",[e("p",[t._v("方法内部类中"),e("strong",[t._v("不能定义静态属性和静态方法")]),t._v("，但"),e("strong",[t._v("静态常量是允许定义的")]),t._v("。")])]),t._v(" "),e("li",[e("p",[t._v("方法内部类"),e("strong",[t._v("可以使用外部类中的一些属性和方法")]),t._v("。"),e("strong",[t._v("但如果使用的是当前方法的数据时，要求这个数据为常量")]),t._v("。")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"成员内部类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#成员内部类","aria-hidden":"true"}},[this._v("#")]),this._v(" 成员内部类")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"静态内部类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#静态内部类","aria-hidden":"true"}},[this._v("#")]),this._v(" 静态内部类")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("使用"),s("code",[this._v("static")]),this._v("关键字修饰的内部类。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"匿名内部类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#匿名内部类","aria-hidden":"true"}},[this._v("#")]),this._v(" 匿名内部类")])},function(){var t=this.$createElement,s=this._self._c||t;return s("ul",[s("li",[s("p",[this._v("类体定义和对象创建写在一起的形式，没有名称，只使用一次。")])]),this._v(" "),s("li",[s("p",[this._v("本质上是继承了对应的类或是实现了对应的接口（只要一个类允许被继承，那么它就可以拥有匿名内部类的形式）。")])]),this._v(" "),s("li",[s("p",[this._v("若匿名内部类定义在方法中，则其使用规则同方法内部类一致。")])]),this._v(" "),s("li",[s("p",[this._v("若匿名内部类定义在类中，则其使用规则同成员内部类一致。")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"内部接口"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#内部接口","aria-hidden":"true"}},[this._v("#")]),this._v(" 内部接口")])},function(){var t=this.$createElement,s=this._self._c||t;return s("ul",[s("li",[s("p",[this._v("定义在类或接口中的接口。")])]),this._v(" "),s("li",[s("p",[this._v("类中定义的接口，接口中定义的类，接口中定义的接口，默认都用"),s("code",[this._v("static")]),this._v("修饰。")])])])}],!1,null,null,null);_.options.__file="面向对象.md";s.default=_.exports}}]);