(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{167:function(t,e,r){"use strict";r.r(e);var s=r(0),a=Object(s.a)({},function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("div",{staticClass:"content"},[t._m(0),t._v(" "),t._m(1),t._v(" "),t._m(2),t._v(" "),r("p",[t._v("面向过程注重过程，强调完成这个过程的具体动作。"),r("br"),t._v("\n其设计理念是"),r("router-link",{attrs:{to:"./语法.html/#顺序结构"}},[t._v("自顶向下，逐步求精")]),t._v("的。")],1),t._v(" "),t._m(3),t._v(" "),t._m(4),t._v(" "),t._m(5),t._v(" "),t._m(6),t._v(" "),t._m(7),t._v(" "),t._m(8),t._v(" "),t._m(9),t._v(" "),t._m(10),t._v(" "),t._m(11),t._v(" "),t._m(12),t._v(" "),t._m(13),t._v(" "),t._m(14),t._v(" "),t._m(15),t._v(" "),t._m(16),t._v(" "),t._m(17),t._v(" "),t._m(18),t._v(" "),t._m(19),t._v(" "),t._m(20),t._v(" "),t._m(21),t._v(" "),t._m(22),t._v(" "),t._m(23),t._v(" "),t._m(24),t._v(" "),t._m(25),t._v(" "),t._m(26),t._v(" "),t._m(27),t._v(" "),t._m(28),t._v(" "),t._m(29),t._v(" "),t._m(30),t._v(" "),t._m(31),t._v(" "),t._m(32),t._v(" "),t._m(33),t._v(" "),t._m(34)])},[function(){var t=this.$createElement,e=this._self._c||t;return e("h1",{attrs:{id:"面向对象"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#面向对象","aria-hidden":"true"}},[this._v("#")]),this._v(" 面向对象")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"概述"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#概述","aria-hidden":"true"}},[this._v("#")]),this._v(" 概述")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"面向过程"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#面向过程","aria-hidden":"true"}},[this._v("#")]),this._v(" 面向过程")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"面向对象-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#面向对象-2","aria-hidden":"true"}},[this._v("#")]),this._v(" 面向对象")])},function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("p",[t._v("面向对象 (Object-Oriented) 注重对象，当我们拥有这个对象时，我们就拥有了这个对象所具有的一切功能。"),r("br"),t._v("\n面向对象技术最大的三个特征是："),r("strong",[t._v("封装")]),t._v("，"),r("strong",[t._v("继承")]),t._v("和"),r("strong",[t._v("多态")]),t._v("。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"类和对象"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#类和对象","aria-hidden":"true"}},[this._v("#")]),this._v(" 类和对象")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"类"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#类","aria-hidden":"true"}},[this._v("#")]),this._v(" 类")])},function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("p",[t._v("类 (Class) 是 Java 程序设计语言的基础。"),r("br"),t._v("\n类似于显示生活中“种类”的概念，Java 中的类也是一种对某类事物进行抽象和归并。"),r("br"),t._v("\n我们对某类事物进行抽象分析，去粗取精，由表及里，判断出这类事物最本质的特征，并用 Java 中预定的手法进行表述，就形成了一个类。"),r("br"),t._v("\n一个类包含两大内容："),r("strong",[t._v("属性")]),t._v("和"),r("strong",[t._v("方法")]),t._v("。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"对象"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#对象","aria-hidden":"true"}},[this._v("#")]),this._v(" 对象")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("对象 (Object) 是对类的实例化。"),e("br"),this._v("\n我们可以通过某类的具体对象来进行具体操作。"),e("br"),this._v("\n使用"),e("code",[this._v("new")]),this._v("关键字可以创建新的对象，使用"),e("code",[this._v(".")]),this._v("运算符获取并使用该对象所具有的方法。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"this"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#this","aria-hidden":"true"}},[this._v("#")]),this._v(" "),e("code",[this._v("this")])])},function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("p",[r("code",[t._v("this")]),t._v("关键字可以表述一个对当前对象自身的引用。"),r("br"),t._v("\n在本类中使用"),r("code",[t._v("this")]),t._v("可以调用本类的"),r("strong",[t._v("非静态方法")]),t._v("和"),r("strong",[t._v("非静态属性")]),t._v("。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"方法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#方法","aria-hidden":"true"}},[this._v("#")]),this._v(" 方法")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("方法 (Method) , 也称为函数。"),e("br"),this._v("\n为实现代码复用，需要将代码进行封装。这种封装的形式就是方法。"),e("br"),this._v("\n方法在定义好之后，必须明确返回值类型。若方法有明确的返回值类型，还要确保方法有返回值。"),e("br"),this._v(" "),e("strong",[this._v("作用")]),this._v("：")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[e("p",[this._v("提高代码复用性。")])]),this._v(" "),e("li",[e("p",[this._v("使代码结构更加清晰。")])]),this._v(" "),e("li",[e("p",[this._v("便于模块化开发。")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("strong",[this._v("方法签名")]),this._v("：一个方法由其修饰符、返回值类型、方法名和形式参数唯一确定，这一组数据称为方法签名。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"构造方法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#构造方法","aria-hidden":"true"}},[this._v("#")]),this._v(" 构造方法")])},function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("p",[t._v("与类同名且没有返回值类型。"),r("br"),t._v("\n可以被重载。"),r("br"),t._v("\n构造函数中可以存在"),r("code",[t._v("return")]),t._v("语句，用于规避不合理的数据。"),r("br"),t._v(" "),r("strong",[t._v("作用")]),t._v("：用于创建对象（标识对象创建的开始和结束）")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"方法的使用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#方法的使用","aria-hidden":"true"}},[this._v("#")]),this._v(" 方法的使用")])},function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("ul",[r("li",[r("p",[t._v("方法递归"),r("br"),t._v(" "),r("strong",[t._v("核心")]),t._v("：方法调用自己本身")]),t._v(" "),r("div",{staticClass:"warning custom-block"},[r("p",{staticClass:"custom-block-title"},[t._v("注意")]),t._v(" "),r("p",[t._v("需要控制好结束条件，若递归层数太深，则出现栈溢出错误。")])])]),t._v(" "),r("li",[r("p",[t._v("方法重载 (Method Overload)"),r("br"),t._v("\n详见"),r("a",{attrs:{href:"#%E5%A4%9A%E6%80%81"}},[t._v("多态")]),t._v("。")])]),t._v(" "),r("li",[r("p",[t._v("方法覆盖 (Method Override)"),r("br"),t._v("\n详见"),r("a",{attrs:{href:"#%E5%A4%9A%E6%80%81"}},[t._v("多态")]),t._v("。")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"包"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#包","aria-hidden":"true"}},[this._v("#")]),this._v(" 包")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"封装"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#封装","aria-hidden":"true"}},[this._v("#")]),this._v(" 封装")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"继承"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#继承","aria-hidden":"true"}},[this._v("#")]),this._v(" 继承")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"多态"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#多态","aria-hidden":"true"}},[this._v("#")]),this._v(" 多态")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"编译时多态"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#编译时多态","aria-hidden":"true"}},[this._v("#")]),this._v(" 编译时多态")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("方法重载 (Method Overload)"),e("br"),this._v("\n是行为多态。"),e("br"),this._v("\n发生在同一个类中，方法名一致而参数列表不同。和修饰符、返回值类型、异常无关。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"运行时多态"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#运行时多态","aria-hidden":"true"}},[this._v("#")]),this._v(" 运行时多态")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[e("p",[this._v("向上造型")])]),this._v(" "),e("li",[e("p",[this._v("方法覆盖 (Method Override)"),e("br"),this._v("\n又称方法重写，是行为多态。"),e("br"),this._v("\n发生在父子类中，双方拥有方法签名完全一致的非静态方法。")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"权限修饰符"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#权限修饰符","aria-hidden":"true"}},[this._v("#")]),this._v(" 权限修饰符")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"非权限修饰符"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#非权限修饰符","aria-hidden":"true"}},[this._v("#")]),this._v(" 非权限修饰符")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"静态"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#静态","aria-hidden":"true"}},[this._v("#")]),this._v(" 静态")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"抽象"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#抽象","aria-hidden":"true"}},[this._v("#")]),this._v(" 抽象")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"最终"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#最终","aria-hidden":"true"}},[this._v("#")]),this._v(" 最终")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"接口"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#接口","aria-hidden":"true"}},[this._v("#")]),this._v(" 接口")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"内部类"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#内部类","aria-hidden":"true"}},[this._v("#")]),this._v(" 内部类")])}],!1,null,null,null);a.options.__file="面向对象.md";e.default=a.exports}}]);