(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{238:function(t,a,v){"use strict";v.r(a);var _=v(2),s=Object(_.a)({},(function(){var t=this,a=t.$createElement,v=t._self._c||a;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("h1",{attrs:{id:"api-语言基础类库-package-java-lang"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#api-语言基础类库-package-java-lang"}},[t._v("#")]),t._v(" API-语言基础类库 (Package "),v("code",[t._v("java.lang")]),t._v(")")]),t._v(" "),v("h2",{attrs:{id:"object类"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#object类"}},[t._v("#")]),t._v(" "),v("code",[t._v("Object")]),t._v("类")]),t._v(" "),v("h3",{attrs:{id:"基本信息"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#基本信息"}},[t._v("#")]),t._v(" 基本信息")]),t._v(" "),v("p",[v("strong",[t._v("Package")]),t._v(" java.lang"),v("br"),t._v(" "),v("code",[t._v("public class Object")])]),t._v(" "),v("ul",[v("li",[v("p",[v("code",[t._v("Object")]),t._v("类是所有类的父类。在 Java 中处于顶级父类的地位，是类层级结构的根类。")])]),t._v(" "),v("li",[v("p",[t._v("任何类对象都可以用"),v("code",[t._v("Object")]),t._v("类的对象来接收。")])])]),t._v(" "),v("h3",{attrs:{id:"重要方法"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#重要方法"}},[t._v("#")]),t._v(" 重要方法")]),t._v(" "),v("ol",[v("li",[v("p",[v("code",[t._v("clone()")])]),t._v(" "),v("ul",[v("li",[v("p",[t._v("克隆一个对象。")])]),t._v(" "),v("li",[v("p",[t._v("当一个对象要被克隆时，"),v("strong",[t._v("它所对应的类必须实现"),v("code",[t._v("Cloneable")]),t._v("接口")]),t._v("。")])]),t._v(" "),v("li",[v("p",[t._v("克隆完成后会产生一个新的对象。"),v("strong",[t._v("新对象和原对象的地址不同，但属性值相同")]),t._v("。")])]),t._v(" "),v("li",[v("p",[v("code",[t._v("Cloneable")]),t._v("接口"),v("br"),t._v("\n其中没有任何属性和方法，仅用于标识此类产生的对象可以被克隆。")])])])]),t._v(" "),v("li",[v("p",[v("code",[t._v("finalize()")])]),t._v(" "),v("ul",[v("li",[v("p",[t._v("通知"),v("code",[t._v("GC")]),t._v("回收当前对象。")])]),t._v(" "),v("li",[v("p",[t._v("即使"),v("code",[t._v("GC")]),t._v("已经开始运行，也只回收当前对象而不回收其他对象。")])]),t._v(" "),v("li",[v("p",[v("span",{staticStyle:{color:"#3eaf7c"}},[t._v("* "),v("code",[t._v("System.gc()")]),t._v("通知"),v("code",[t._v("GC")]),t._v("回收所有可以回收的对象。→"),v("a",{attrs:{href:"#_4-2-2-system%E7%B1%BB"}},[v("code",[t._v("System")]),t._v("类")])])])])])]),t._v(" "),v("li",[v("p",[v("code",[t._v("getClass()")]),v("br"),t._v("\n获取对象的运行时类对象（如，后续可用于反射）。")])]),t._v(" "),v("li",[v("p",[v("code",[t._v("hashCode()")]),v("br"),t._v("\n获取该对象的哈希码值，在一定范围内可以认为是唯一的。哈希码为一串 32 位的二进制数据。")])]),t._v(" "),v("li",[v("p",[v("code",[t._v("toString()")]),v("br"),t._v("\n打印对象。实际调用对象本身的"),v("code",[t._v("toString()")]),t._v("。")])]),t._v(" "),v("li",[v("p",[v("code",[t._v("equals(Object obj)")]),v("br"),t._v("\n比较两个对象是否相等。默认比较对象的地址，但对于"),v("code",[t._v("File")]),t._v("，"),v("code",[t._v("String")]),t._v("，"),v("code",[t._v("Date")]),t._v("和包装类来说，它们比较地是对象值。")]),t._v(" "),v("div",{staticClass:"custom-block tip"},[v("p",{staticClass:"custom-block-title"},[t._v("特别地")]),t._v(" "),v("p",[t._v("当手动重写"),v("code",[t._v("equals()")]),t._v("时，思路为:")]),t._v(" "),v("ol",[v("li",[v("p",[t._v("判断地址是否一致("),v("code",[t._v("if (this == obj)")]),t._v(")")])]),t._v(" "),v("li",[v("p",[t._v("判断参数是否为空("),v("code",[t._v("if (obj == null)")]),t._v(")")])]),t._v(" "),v("li",[v("p",[t._v("判断类型是否一致("),v("code",[t._v("if (this.getClass() != obj.getClass())")]),t._v(")")])]),t._v(" "),v("li",[v("p",[t._v("判断属性值是否一致")])])])])])]),t._v(" "),v("h2",{attrs:{id:"system类"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#system类"}},[t._v("#")]),t._v(" "),v("code",[t._v("System")]),t._v("类")]),t._v(" "),v("h3",{attrs:{id:"基本信息-2"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#基本信息-2"}},[t._v("#")]),t._v(" 基本信息")]),t._v(" "),v("p",[v("strong",[t._v("Package")]),t._v(" java.lang")]),t._v(" "),v("p",[v("code",[t._v("public final class System")])]),t._v(" "),v("ul",[v("li",[v("p",[v("code",[t._v("System")]),t._v("类提供了标准输入输出、错误输入输出和一些访问系统属性的方法。")])]),t._v(" "),v("li",[v("p",[t._v("它是一个静态类，不能被继承，不能被实例化，所有方法都是静态方法。")])])]),t._v(" "),v("h3",{attrs:{id:"重要方法-2"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#重要方法-2"}},[t._v("#")]),t._v(" 重要方法")]),t._v(" "),v("ol",[v("li",[v("p",[v("code",[t._v("static void gc()")])]),t._v(" "),v("p",[t._v("强制 Java 虚拟机启动垃圾回收机制，收集内存中所有不再被引用的对象所占用的内存空间。")])]),t._v(" "),v("li",[v("p",[v("code",[t._v("static void exit(int status)")])]),t._v(" "),v("p",[t._v("强制终止当前正在运行的 Java 虚拟机，并将参数"),v("code",[t._v("status")]),t._v("返回给系统。通常来讲，"),v("code",[t._v("status")]),t._v("为 0 表示正常终止；非 0 表示异常终止。")])]),t._v(" "),v("li",[v("p",[v("code",[t._v("static long currentTimeMillis()")]),v("br"),t._v("\n返回从 1970 年 1 月 1 日到当前系统时间的毫秒数。")])])]),t._v(" "),v("div",{staticClass:"custom-block tip"},[v("p",{staticClass:"custom-block-title"},[t._v("关于"),v("code",[t._v("System")]),t._v("类的属性")]),t._v(" "),v("ul",[v("li",[v("p",[v("code",[t._v("in")]),v("br"),t._v("\n从键盘输入信息，只能按字节读取")])]),t._v(" "),v("li",[v("p",[v("code",[t._v("out")]),v("br"),t._v("\n将信息标准输出到显示器（是"),v("code",[t._v("PrintStream")]),t._v("类的对象，声明："),v("code",[t._v("static final PrintStream out")]),t._v("）")])]),t._v(" "),v("li",[v("p",[v("code",[t._v("err")]),v("br"),t._v("\n将错误提示信息（使用红色字体）输出到显示器（是"),v("code",[t._v("PrintStream")]),t._v("类的对象，声明："),v("code",[t._v("static final PrintStream err")]),t._v("）")])])]),t._v(" "),v("p",[t._v("*这三个属性都是字节流，见 "),v("RouterLink",{attrs:{to:"/java/API-输入输出类库.html/#i-o-stream"}},[t._v("I/O Stream")]),t._v(".")],1)]),t._v(" "),v("h2",{attrs:{id:"异常"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#异常"}},[t._v("#")]),t._v(" 异常")]),t._v(" "),v("p",[t._v("异常是一套处理和反馈问题的机制。")]),t._v(" "),v("h3",{attrs:{id:"基本信息-3"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#基本信息-3"}},[t._v("#")]),t._v(" 基本信息")]),t._v(" "),v("p",[v("strong",[t._v("Package")]),t._v(" java.lang")]),t._v(" "),v("p",[v("code",[t._v("public class Throwable")])]),t._v(" "),v("ul",[v("li",[v("p",[v("code",[t._v("Throwable")]),t._v("类是异常 (Exception) 和错误 (Error) 的父类。")])]),t._v(" "),v("li",[v("p",[t._v("错误无法处理，而异常可以处理。")])])]),t._v(" "),v("h3",{attrs:{id:"exception"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#exception"}},[t._v("#")]),t._v(" "),v("code",[t._v("Exception")])]),t._v(" "),v("p",[v("strong",[t._v("分类")])]),t._v(" "),v("ul",[v("li",[v("p",[t._v("编译时异常（或称已检查异常）：编译期出现的异常，要求必须处理，抛出或者捕获。"),v("br"),t._v("\n如："),v("code",[t._v("CloneNotSupportedException")]),t._v("和"),v("code",[t._v("ParseException")])])]),t._v(" "),v("li",[v("p",[t._v("运行时异常（或称未检查异常）：编译期不报错，但运行时出现。在编译期处理与否均可，往往非语法错误。"),v("br"),t._v("\n如："),v("code",[t._v("ArithmeticException")]),t._v("、"),v("code",[t._v("ArrayIndexOutOfBoundException")]),t._v("、"),v("code",[t._v("NullPointerException")]),t._v("、"),v("code",[t._v("ClassCastException")]),t._v("和"),v("code",[t._v("NumberFormatException")])])]),t._v(" "),v("li",[v("p",[t._v("自定义异常：编程者通过继承某个异常类自己编写的异常。")])])]),t._v(" "),v("div",{staticClass:"custom-block tip"},[v("p",{staticClass:"custom-block-title"},[t._v("关于异常处理")]),t._v(" "),v("ul",[v("li",[v("p",[t._v("运行时异常可以随意抛出和捕获")])]),t._v(" "),v("li",[v("p",[t._v("编译时异常只能在抛出时捕获")])])])]),t._v(" "),v("div",{staticClass:"custom-block tip"},[v("p",{staticClass:"custom-block-title"},[t._v("关于异常捕获")]),t._v(" "),v("ul",[v("li",[v("p",[t._v("使用多个"),v("code",[t._v("catch")]),t._v("来分别捕获不同的异常")])]),t._v(" "),v("li",[v("p",[t._v("可以捕获一个父类异常，统一处理")])]),t._v(" "),v("li",[v("p",[t._v("在一个"),v("code",[t._v("catch")]),t._v("语句中，可以使用"),v("code",[t._v("|")]),t._v("分割不同的异常来分组处理，避免了写多个"),v("code",[t._v("catch")]),t._v("语句"),v("Badge",{attrs:{text:"> Java SE 7.0"}})],1)]),t._v(" "),v("li",[v("p",[t._v("当一个方法声明抛出父类异常时，处理中必须处理父类异常")])]),t._v(" "),v("li",[v("p",[t._v("在捕获异常时，需要先捕获子类异常再捕获父类异常")])])])]),t._v(" "),v("div",{staticClass:"custom-block tip"},[v("p",{staticClass:"custom-block-title"},[t._v("关于 finally")]),t._v(" "),v("p",[t._v("无论是否发生异常都会执行")])]),t._v(" "),v("h3",{attrs:{id:"error"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#error"}},[t._v("#")]),t._v(" "),v("code",[t._v("Error")])]),t._v(" "),v("p",[t._v("错误。不应试图捕获的严重问题。无法处理。")]),t._v(" "),v("h2",{attrs:{id:"线程"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#线程"}},[t._v("#")]),t._v(" 线程")]),t._v(" "),v("h3",{attrs:{id:"基本信息-4"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#基本信息-4"}},[t._v("#")]),t._v(" 基本信息")]),t._v(" "),v("p",[v("strong",[t._v("Package")]),t._v(" java.lang"),v("br"),t._v(" "),v("code",[t._v("public class Thread")])]),t._v(" "),v("h3",{attrs:{id:"进程与线程"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#进程与线程"}},[t._v("#")]),t._v(" 进程与线程")]),t._v(" "),v("ul",[v("li",[v("p",[t._v("线程是操作系统中的重要概念之一，是程序运行的基本单元。")])]),t._v(" "),v("li",[v("p",[t._v("进程是线程的集合。每一个进程可以创建一个或多个线程。")])])]),t._v(" "),v("h3",{attrs:{id:"自定义线程"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#自定义线程"}},[t._v("#")]),t._v(" 自定义线程")]),t._v(" "),v("p",[t._v("线程执行没有顺序性，相互抢占资源。这个抢占过程不只存在于线程执行的开始，而是存在于执行的全过程。在这种抢占模式下，会导致不合常理的情况发生（多线程并发安全问题）。")]),t._v(" "),v("ul",[v("li",[v("p",[t._v("继承"),v("code",[t._v("Thread")]),t._v("类")]),t._v(" "),v("ul",[v("li",[v("p",[t._v("在"),v("code",[t._v("run()")]),t._v("中重写线程执行逻辑。")])]),t._v(" "),v("li",[v("p",[t._v("类实例通过"),v("code",[t._v("start()")]),t._v("启动线程。")])])])]),t._v(" "),v("li",[v("p",[t._v("实现"),v("code",[t._v("Runnable")]),t._v("接口")]),t._v(" "),v("ul",[v("li",[v("p",[t._v("重写"),v("code",[t._v("run()")]),t._v("。")])]),t._v(" "),v("li",[v("p",[t._v("通过"),v("code",[t._v("Thread")]),t._v("类对象启动线程。")])])])]),t._v(" "),v("li",[v("p",[t._v("实现"),v("code",[t._v("Callable<T>接口")])]),t._v(" "),v("ul",[v("li",[t._v("重写"),v("code",[t._v("call()")])])])])]),t._v(" "),v("h3",{attrs:{id:"线程同步"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#线程同步"}},[t._v("#")]),t._v(" 线程同步")]),t._v(" "),v("p",[t._v("使用"),v("code",[t._v("synchronized")]),t._v("关键字来同步多个线程，一定程度上解决线程冲突。")]),t._v(" "),v("p",[v("strong",[t._v("同步代码块")])]),t._v(" "),v("div",{staticClass:"language-java extra-class"},[v("pre",{pre:!0,attrs:{class:"language-java"}},[v("code",[t._v("   "),v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("synchronized")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("同步锁 "),v("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("所有线程可见"),v("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      …\n   "),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("      \n")])])]),v("p",[t._v("可以传入类字节码，"),v("code",[t._v("this")]),t._v("对象，共享资源")]),t._v(" "),v("p",[v("strong",[t._v("同步方法")]),v("br"),t._v("\n使用"),v("code",[t._v("synchronized")]),t._v("修饰方法，此时锁对象为"),v("code",[t._v("this")]),t._v("对象。")]),t._v(" "),v("h3",{attrs:{id:"线程通信"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#线程通信"}},[t._v("#")]),t._v(" 线程通信")]),t._v(" "),v("p",[t._v("通过等待唤醒机制调节线程之间的执行顺序。")]),t._v(" "),v("p",[t._v("线程在等待期间存在于线程池中，线程池本质上是一个存储线程的队列。"),v("br"),t._v("\nA1 A2 C1 C2 → ()"),v("br"),t._v("\nA1(Running)"),v("br"),t._v("\nA1 A2 C1 C2 → ()"),v("br"),t._v("\nA1(Running, "),v("font",{attrs:{color:"red"}},[t._v("wait()[A1]")]),t._v(")"),v("br"),t._v("\nA2 C1 C2 → (A1)"),v("br"),t._v("\nA2(Running, "),v("font",{attrs:{color:"red"}},[t._v("wait()[A2]")]),t._v(")"),v("br"),t._v("\nC1 C2 → (A1 A2)"),v("br"),t._v("\nC1(Running, "),v("font",{attrs:{color:"green"}},[t._v("notify()[A1]")]),t._v(")"),v("br"),t._v("\nA1 C1 C2 → (A2)"),v("br"),t._v("\nC1(Running, "),v("font",{attrs:{color:"red"}},[t._v("wait()[C1]")]),t._v(")"),v("br"),t._v("\nA1 C2 → (A2, C1)"),v("br"),t._v("\nC2(Running, "),v("font",{attrs:{color:"red"}},[t._v("wait()[C2]")]),t._v(")"),v("br"),t._v("\nA1 → (A2, C1, C2)"),v("br"),t._v("\nA1(Running, "),v("font",{attrs:{color:"green"}},[t._v("notify()[A2]")]),t._v(")"),v("br"),t._v("\nA1 A2 → (C1, C2)"),v("br"),t._v("\nA1(Running, "),v("font",{attrs:{color:"red"}},[t._v("wait()[A1]")]),t._v(")"),v("br"),t._v("\nA2 → (C1, C2, A1)"),v("br"),t._v("\nA2(Running, "),v("font",{attrs:{color:"red"}},[t._v("wait()[A2]")]),t._v(")"),v("br"),t._v("\n→ (C1, C2, A1, A2)")],1),t._v(" "),v("p",[v("code",[t._v("sleep()")]),t._v("需要制定睡眠时间，结束自然恢复。释放执行权，不释放锁对象，在"),v("code",[t._v("Thread")]),t._v("类中，为静态方法\n"),v("code",[t._v("wait()")]),t._v("可以指定等待时间，也可不指定，此时需要唤醒。释放执行权，释放锁对象。在"),v("code",[t._v("Object")]),t._v("类中，为普通方法。必须结合锁使用（两对象相同）。")]),t._v(" "),v("h3",{attrs:{id:"死锁"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#死锁"}},[t._v("#")]),t._v(" 死锁")]),t._v(" "),v("p",[v("strong",[t._v("产生原因")]),v("br"),t._v("\n多个线程；共享资源过多；锁对象不统一；锁嵌套。")]),t._v(" "),v("p",[v("strong",[t._v("避免死锁")]),v("br"),t._v("\n统一锁对象、减少锁嵌套。")]),t._v(" "),v("p",[v("strong",[t._v("同步与异步")])]),t._v(" "),v("ul",[v("li",[v("p",[t._v("若某对象在某时间段内只允许一个线程操作即为同步，反之异步。")])]),t._v(" "),v("li",[v("p",[t._v("同步一定安全。")])]),t._v(" "),v("li",[v("p",[t._v("不安全一定异步。")])])]),t._v(" "),v("h3",{attrs:{id:"线程状态"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#线程状态"}},[t._v("#")]),t._v(" 线程状态")]),t._v(" "),v("p",[v("img",{attrs:{src:"/img/%E7%BA%BF%E7%A8%8B%E7%8A%B6%E6%80%81.png",alt:"线程状态"}})]),t._v(" "),v("ul",[v("li",[v("p",[t._v("阻塞：不执行代码抢占资源")])]),t._v(" "),v("li",[v("p",[t._v("冻结：不执行代码，不抢占资源")])])]),t._v(" "),v("h3",{attrs:{id:"守护线程"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#守护线程"}},[t._v("#")]),t._v(" 守护线程")]),t._v(" "),v("ul",[v("li",[v("p",[t._v("守护其他线程的执行，被守护线程结束后，守护线程无论完成与否随之结束")])]),t._v(" "),v("li",[v("p",[t._v("只要代码中出现守护线程，程序中的线程只能是守护线程或者被守护线程"),v("br"),t._v("\n若存在多个被守护线程，则最后一个被守护线程为结束标志")])])]),t._v(" "),v("h3",{attrs:{id:"线程优先级"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#线程优先级"}},[t._v("#")]),t._v(" 线程优先级")]),t._v(" "),v("ul",[v("li",[v("p",[t._v("线程拥有 1-10 共十级优先级")])]),t._v(" "),v("li",[v("p",[t._v("优先级越高，理论上抢到资源的概率越大")])]),t._v(" "),v("li",[v("p",[t._v("相邻两个优先级几乎没有差别"),v("br"),t._v("\n相差5级以上，略有差别")])])]),t._v(" "),v("h2",{attrs:{id:"枚举"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#枚举"}},[t._v("#")]),t._v(" 枚举")]),t._v(" "),v("h3",{attrs:{id:"基本信息-5"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#基本信息-5"}},[t._v("#")]),t._v(" 基本信息")]),t._v(" "),v("p",[v("strong",[t._v("Package")]),t._v(" java.lang"),v("br"),t._v(" "),v("code",[t._v("public abstract class Enum<E extends Enum<E>>")])]),t._v(" "),v("ul",[v("li",[v("p",[t._v("取值固定且能一一列举")])]),t._v(" "),v("li",[v("p",[t._v("枚举常量必须定义在首行，用"),v("code",[t._v(",")]),t._v("隔开，以"),v("code",[t._v(";")]),t._v("结尾")])]),t._v(" "),v("li",[v("p",[t._v("枚举类中允许定义属性和方法")])]),t._v(" "),v("li",[v("p",[t._v("枚举类构造函数默认且只能为私有"),v("br"),t._v("\n可以携带参数，在枚举后添加括号")])]),t._v(" "),v("li",[v("p",[t._v("可以定义抽象方法，以匿名内部类的形式实现")])]),t._v(" "),v("li",[v("p",[v("code",[t._v("switch(表达式)")]),v("br"),t._v("\n表达式值新添Enum常量")])])]),t._v(" "),v("h2",{attrs:{id:"string类"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#string类"}},[t._v("#")]),t._v(" "),v("code",[t._v("String")]),t._v("类")]),t._v(" "),v("h3",{attrs:{id:"基本信息-6"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#基本信息-6"}},[t._v("#")]),t._v(" 基本信息")]),t._v(" "),v("p",[v("strong",[t._v("Package")]),t._v(" java.lang"),v("br"),t._v(" "),v("code",[t._v("public final class String")])]),t._v(" "),v("ul",[v("li",[v("p",[v("code",[t._v("String")]),t._v("类是一个最终类，表示字符串。")])]),t._v(" "),v("li",[v("p",[t._v("所有字符串都是"),v("code",[t._v("String")]),t._v("类的实例。")])]),t._v(" "),v("li",[v("p",[t._v("字符串是常量，创建后不可更改，但可以被共享。")])])]),t._v(" "),v("h3",{attrs:{id:"重要方法-3"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#重要方法-3"}},[t._v("#")]),t._v(" 重要方法")]),t._v(" "),v("ol",[v("li",[v("p",[v("code",[t._v("char chatAt()")]),v("br"),t._v("\n获取字符串指定下标字符。")])]),t._v(" "),v("li",[v("p",[v("code",[t._v("int length()")]),v("br"),t._v("\n获取字符串长度。")])]),t._v(" "),v("li",[v("p",[v("code",[t._v("char[] toCharArray()")]),v("br"),t._v("\n将字符串转化为字符数组。")])]),t._v(" "),v("li",[v("p",[t._v("其他不改变原串的方法")]),t._v(" "),v("table",[v("thead",[v("tr",[v("th",[t._v("方法")]),t._v(" "),v("th",[t._v("描述")]),t._v(" "),v("th",[t._v("备注")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[v("code",[t._v("int compareTo(String another)")])]),t._v(" "),v("td",[t._v("判断两个字符串大小，根据返回值政府来确定")]),t._v(" "),v("td")]),t._v(" "),v("tr",[v("td",[v("code",[t._v("String concat(String str)")])]),t._v(" "),v("td",[t._v("拼接字符串，不该面原字符串")]),t._v(" "),v("td")]),t._v(" "),v("tr",[v("td",[v("code",[t._v("boolean contains(String str)")])]),t._v(" "),v("td",[t._v("是否包含该子串")]),t._v(" "),v("td")]),t._v(" "),v("tr",[v("td",[v("code",[t._v("boolean equals(Object o)")])]),t._v(" "),v("td",[t._v("是否相等")]),t._v(" "),v("td")]),t._v(" "),v("tr",[v("td",[v("code",[t._v("byte[] getBytes()")])]),t._v(" "),v("td",[t._v("将字符串转化为字节数组")]),t._v(" "),v("td",[t._v("通过"),v("code",[t._v("String")]),t._v("的构造方法将字节数组转化为字符串")])]),t._v(" "),v("tr",[v("td",[v("code",[t._v("int indexOf(int ch, int index)")])]),t._v(" "),v("td",[t._v("指定下标开始寻找指定字符第一次出现的位置")]),t._v(" "),v("td")]),t._v(" "),v("tr",[v("td",[v("code",[t._v("static String valueOf()")])]),t._v(" "),v("td",[t._v("将传入值转换为字符串")]),t._v(" "),v("td",[t._v("传入对象则会调用对象的"),v("code",[t._v("toString()")]),t._v("；"),v("br"),t._v("传入字符数组对象，则打印其内容")])]),t._v(" "),v("tr",[v("td",[v("code",[t._v("String replaceAll(String reg, String str)")])]),t._v(" "),v("td",[t._v("替换指定内容")]),t._v(" "),v("td")]),t._v(" "),v("tr",[v("td",[v("code",[t._v("boolean matches(String reg)")])]),t._v(" "),v("td",[t._v("是否匹配指定规则")]),t._v(" "),v("td")]),t._v(" "),v("tr",[v("td",[v("code",[t._v("String[] split(String reg)")])]),t._v(" "),v("td",[t._v("按指定规则切割字符串")]),t._v(" "),v("td",[t._v("作为切割的符号会被消除；"),v("br"),t._v("若两个切割符号相连，则会被分出一个空字符串"),v("code",[t._v('""')])])])])])])]),t._v(" "),v("div",{staticClass:"custom-block tip"},[v("p",{staticClass:"custom-block-title"},[t._v("特别地")]),t._v(" "),v("ul",[v("li",[v("p",[t._v('拼接字符串可以使用运算符"'),v("code",[t._v("+")]),t._v('"，本质上 Java 编译器会调用'),v("code",[t._v("StringBuffer")]),t._v("（或类似技术）来实现这个拼接操作。")])]),t._v(" "),v("li",[v("p",[t._v("拼接多个字符串建议使用"),v("code",[t._v("StringBuilder")]),t._v("类，少量字符串使用"),v("code",[t._v("+")]),t._v("运算符")])]),t._v(" "),v("li",[v("p",[v("code",[t._v("StringBuilder")]),t._v("和"),v("code",[t._v("StringBuffer")]),t._v("使用方法完全一致")]),t._v(" "),v("ul",[v("li",[v("p",[v("code",[t._v("StringBuilder")]),t._v("线程不安全")])]),t._v(" "),v("li",[v("p",[v("code",[t._v("StringBuffer")]),t._v("线程安全")])])])]),t._v(" "),v("li",[v("p",[t._v("故代码："),v("br"),t._v(" "),v("strong",[t._v("Input")])]),t._v(" "),v("div",{staticClass:"language-java extra-class"},[v("pre",{pre:!0,attrs:{class:"language-java"}},[v("code",[v("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" s "),v("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token string"}},[t._v('"a"')]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ns "),v("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token string"}},[t._v('"b"')]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),v("p",[t._v("实际上的执行效果是：")]),t._v(" "),v("div",{staticClass:"language-java extra-class"},[v("pre",{pre:!0,attrs:{class:"language-java"}},[v("code",[v("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" s "),v("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token string"}},[t._v('"a"')]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ns "),v("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("StringBuilder")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),v("span",{pre:!0,attrs:{class:"token string"}},[t._v('"a"')]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),v("span",{pre:!0,attrs:{class:"token function"}},[t._v("append")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),v("span",{pre:!0,attrs:{class:"token string"}},[t._v('"b"')]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),v("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),v("p",[t._v("在最后的"),v("code",[t._v("toString()")]),t._v("中生成了新的字符串对象，类似于（真实过程更加复杂）：")]),t._v(" "),v("div",{staticClass:"language-java extra-class"},[v("pre",{pre:!0,attrs:{class:"language-java"}},[v("code",[t._v("s "),v("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),v("span",{pre:!0,attrs:{class:"token string"}},[t._v('"ab"')]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])])]),t._v(" "),v("p",[v("strong",[t._v("分析代码")]),v("br"),t._v(" "),v("strong",[t._v("Input")])]),t._v(" "),v("div",{staticClass:"language-java extra-class"},[v("pre",{pre:!0,attrs:{class:"language-java"}},[v("code",[v("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" s1 "),v("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token string"}},[t._v('"ab"')]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),v("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" s2 "),v("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),v("span",{pre:!0,attrs:{class:"token string"}},[t._v('"ab"')]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),v("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" s4 "),v("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token string"}},[t._v('"a"')]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ns4 "),v("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token string"}},[t._v('"b"')]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),v("ol",[v("li",[v("p",[t._v("第一句")]),t._v(" "),v("div",{staticClass:"language-java extra-class"},[v("pre",{pre:!0,attrs:{class:"language-java"}},[v("code",[v("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" s1 "),v("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token string"}},[t._v('"ab"')]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),v("p",[t._v("内存图："),v("br"),t._v(" "),v("img",{attrs:{src:"/img/String_01.jpg",alt:'String s1 = "ab";'}})])]),t._v(" "),v("li",[v("p",[t._v("第二句")]),t._v(" "),v("div",{staticClass:"language-java extra-class"},[v("pre",{pre:!0,attrs:{class:"language-java"}},[v("code",[v("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" s2 "),v("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),v("span",{pre:!0,attrs:{class:"token string"}},[t._v('"ab"')]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),v("p",[t._v("内存图："),v("br"),t._v(" "),v("img",{attrs:{src:"/img/String_02.jpg",alt:'String s2 = new String("ab");'}})])]),t._v(" "),v("li",[v("p",[t._v("第三句")]),t._v(" "),v("div",{staticClass:"language-java extra-class"},[v("pre",{pre:!0,attrs:{class:"language-java"}},[v("code",[v("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" s4 "),v("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token string"}},[t._v('"a"')]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),v("p",[t._v("内存图："),v("br"),t._v(" "),v("img",{attrs:{src:"/img/String_03.jpg",alt:'String s4 = "a";'}})])]),t._v(" "),v("li",[v("p",[t._v("第四句")]),t._v(" "),v("div",{staticClass:"language-java extra-class"},[v("pre",{pre:!0,attrs:{class:"language-java"}},[v("code",[t._v("s4 "),v("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token string"}},[t._v('"b"')]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),v("p",[t._v("由"),v("code",[t._v("StringBuilder")]),t._v("实现"),v("code",[t._v("+=")]),t._v("操作，具体步骤为：")]),t._v(" "),v("ol",[v("li",[v("p",[t._v("生成"),v("code",[t._v("StringBuilder")]),t._v("对象")]),t._v(" "),v("div",{staticClass:"language-java extra-class"},[v("pre",{pre:!0,attrs:{class:"language-java"}},[v("code",[v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("StringBuilder")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),v("span",{pre:!0,attrs:{class:"token string"}},[t._v('"a"')]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),v("p",[t._v("内存图："),v("br"),t._v(" "),v("img",{attrs:{src:"/img/String_04.jpg",alt:'new StringBuilder("a")'}})])]),t._v(" "),v("li",[v("p",[v("code",[t._v("StringBuilder")]),t._v("对象取"),v("code",[t._v("append()")]),t._v("方法拼接字符串")]),t._v(" "),v("div",{staticClass:"language-java extra-class"},[v("pre",{pre:!0,attrs:{class:"language-java"}},[v("code",[v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("StringBuilder")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),v("span",{pre:!0,attrs:{class:"token string"}},[t._v('"a"')]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),v("span",{pre:!0,attrs:{class:"token function"}},[t._v("append")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),v("span",{pre:!0,attrs:{class:"token string"}},[t._v('"b"')]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),v("p",[t._v("内存图：\n"),v("img",{attrs:{src:"/img/String_05.jpg",alt:'new StringBuilder("a").append("b")'}}),v("br"),t._v("\n堆内存"),v("code",[t._v("0x3f4c")]),t._v('断开与常量"a"('),v("code",[t._v("0x45fa")]),t._v(')的链接，转而链接常量"ab"('),v("code",[t._v("0x003d")]),t._v(")。")])]),t._v(" "),v("li",[v("p",[t._v("调用"),v("code",[t._v("toString()")]),t._v("生成新的"),v("code",[t._v("String")]),t._v("对象")]),t._v(" "),v("div",{staticClass:"language-java extra-class"},[v("pre",{pre:!0,attrs:{class:"language-java"}},[v("code",[v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("StringBuilder")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),v("span",{pre:!0,attrs:{class:"token string"}},[t._v('"a"')]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),v("span",{pre:!0,attrs:{class:"token function"}},[t._v("append")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),v("span",{pre:!0,attrs:{class:"token string"}},[t._v('"b"')]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),v("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),v("p",[t._v("内存图："),v("br"),t._v(" "),v("img",{attrs:{src:"/img/String_06.jpg",alt:'new StringBuilder("a").append("b").toString()'}})])]),t._v(" "),v("li",[v("p",[t._v("将新生成的"),v("code",[t._v("String")]),t._v("对象的管理权交给"),v("code",[t._v("s4")]),t._v("（赋值）")]),t._v(" "),v("div",{staticClass:"language-java extra-class"},[v("pre",{pre:!0,attrs:{class:"language-java"}},[v("code",[t._v("s4 "),v("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("StringBuilder")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),v("span",{pre:!0,attrs:{class:"token string"}},[t._v('"a"')]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),v("span",{pre:!0,attrs:{class:"token function"}},[t._v("append")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),v("span",{pre:!0,attrs:{class:"token string"}},[t._v('"b"')]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),v("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),v("p",[t._v("内存图："),v("br"),t._v(" "),v("img",{attrs:{src:"/img/String_07.jpg",alt:'s4 = new StringBuilder("a").append("b").toString();'}}),t._v("\n栈内存内"),v("code",[t._v("s4")]),t._v('断开与常量"a"('),v("code",[t._v("0x45fa")]),t._v(")的链接，转而链接堆内存"),v("code",[t._v("0x7bce")]),t._v("。")])]),t._v(" "),v("li",[v("p",[t._v("结束操作，最终结果"),v("br"),t._v("\n内存图："),v("br"),t._v(" "),v("img",{attrs:{src:"/img/String_08.jpg",alt:"完成"}})])])])])])]),t._v(" "),v("div",{staticClass:"custom-block tip"},[v("p",{staticClass:"custom-block-title"},[t._v("关于编码")]),t._v(" "),v("p",[t._v("按照某些规律将字符映射成字节。这个记录规则就是编码表")]),t._v(" "),v("table",[v("thead",[v("tr",[v("th",[t._v("名称")]),t._v(" "),v("th",[t._v("内容")]),t._v(" "),v("th",[t._v("特点")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[t._v("ASCII")]),t._v(" "),v("td",[t._v("0 至 127")]),t._v(" "),v("td",[t._v("不完全")])]),t._v(" "),v("tr",[v("td",[t._v("西欧码表 ISO-8859-1")]),t._v(" "),v("td",[t._v("西欧字符")]),t._v(" "),v("td",[t._v("一个字母占 1 字节")])]),t._v(" "),v("tr",[v("td",[t._v("GB2312")]),t._v(" "),v("td",[t._v("常见基本简体汉字和部分常用繁体汉字")]),t._v(" "),v("td",[t._v("一个字符占 2 字节")])]),t._v(" "),v("tr",[v("td",[t._v("UTF-8")]),t._v(" "),v("td",[t._v("常见语言的常见字符")]),t._v(" "),v("td",[t._v("一个字符占 3 字节")])])])])]),t._v(" "),v("p",[t._v("→ "),v("a",{attrs:{href:"#scanner%E7%B1%BB"}},[t._v("关于"),v("code",[t._v("Scanner")]),t._v("类")])]),t._v(" "),v("h3",{attrs:{id:"正则表达式"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#正则表达式"}},[t._v("#")]),t._v(" 正则表达式")]),t._v(" "),v("p",[t._v("正则表达式本质上是"),v("strong",[t._v("指定匹配")]),t._v("或"),v("strong",[t._v("筛选规则")]),t._v("的一系列表达式。")]),t._v(" "),v("p",[v("strong",[t._v("规则")])]),t._v(" "),v("ul",[v("li",[v("p",[t._v("元字符与限定符：正则表达式中含有表达特殊意义的字符，这些字符成为元字符；在正则表达式中，需要表示元字符出现次数等逻辑规则时，使用限定符来表示。")])]),t._v(" "),v("li",[v("p",[t._v("在 Java 中，由于使用"),v("code",[t._v("\\")]),t._v("转义且某些元字符中本身包含"),v("code",[t._v("\\")]),t._v("，故在使用时需要写作"),v("code",[t._v("\\\\")]),t._v("。如：表示任意一个数字的正则表达式在 Java 中写作"),v("code",[t._v("\\\\d")]),t._v("。")])])]),t._v(" "),v("table",[v("thead",[v("tr",[v("th",[t._v("元字符/限定符")]),t._v(" "),v("th",[t._v("描述")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[v("code",[t._v(".")])]),t._v(" "),v("td",[t._v("任意字符")])]),t._v(" "),v("tr",[v("td",[v("code",[t._v("\\d")])]),t._v(" "),v("td",[t._v("0至9任意一个数字")])]),t._v(" "),v("tr",[v("td",[v("code",[t._v("\\D")])]),t._v(" "),v("td",[t._v("任意一个非数字")])]),t._v(" "),v("tr",[v("td",[v("code",[t._v("\\s")])]),t._v(" "),v("td",[t._v("空格类字符，如"),v("code",[t._v("\\t")]),t._v(", "),v("code",[t._v("\\n")]),t._v(", "),v("code",[t._v("\\x0B")]),t._v(", "),v("code",[t._v("\\f")]),t._v(", "),v("code",[t._v("\\r")])])]),t._v(" "),v("tr",[v("td",[v("code",[t._v("\\S")])]),t._v(" "),v("td",[t._v("任意一个非空格类字符")])]),t._v(" "),v("tr",[v("td",[v("code",[t._v("\\w")])]),t._v(" "),v("td",[t._v("除"),v("code",[t._v("$")]),t._v("外的可用于标识符的字符（字母(a-zA-Z)、数字(0-9)、下划线(_)）")])]),t._v(" "),v("tr",[v("td",[v("code",[t._v("\\W")])]),t._v(" "),v("td",[t._v("任意一个不能用于标识符的字符")])]),t._v(" "),v("tr",[v("td",[v("code",[t._v("^")])]),t._v(" "),v("td",[t._v("串开头")])]),t._v(" "),v("tr",[v("td",[v("code",[t._v("$")])]),t._v(" "),v("td",[t._v("串结尾")])]),t._v(" "),v("tr",[v("td",[v("code",[t._v("|")])]),t._v(" "),v("td",[t._v("或")])]),t._v(" "),v("tr",[v("td",[v("code",[t._v("+")])]),t._v(" "),v("td",[t._v("出现1次或多次")])]),t._v(" "),v("tr",[v("td",[v("code",[t._v("?")])]),t._v(" "),v("td",[t._v("出现0次或1次")])]),t._v(" "),v("tr",[v("td",[v("code",[t._v("*")])]),t._v(" "),v("td",[t._v("出现0次或多次")])]),t._v(" "),v("tr",[v("td",[v("code",[t._v("{n}")])]),t._v(" "),v("td",[t._v("出现n次")])]),t._v(" "),v("tr",[v("td",[v("code",[t._v("{n,}")])]),t._v(" "),v("td",[t._v("出现至少n次")])]),t._v(" "),v("tr",[v("td",[v("code",[t._v("{n,m}")])]),t._v(" "),v("td",[t._v("出现n至m次")])]),t._v(" "),v("tr",[v("td",[v("code",[t._v("()")])]),t._v(" "),v("td",[t._v("捕获组")])]),t._v(" "),v("tr",[v("td",[v("code",[t._v("[]")])]),t._v(" "),v("td",[t._v("单个字符")])]),t._v(" "),v("tr",[v("td",[v("code",[t._v("\\n")])]),t._v(" "),v("td",[t._v("编号为n的捕获组")])])])]),t._v(" "),v("blockquote",[v("p",[v("strong",[t._v("这里：{n,m|n,m∈N"),v("sub",[t._v("+")]),t._v("}")])])]),t._v(" "),v("p",[v("strong",[t._v("捕获组")])]),t._v(" "),v("ul",[v("li",[v("p",[t._v("起编号作用")])]),t._v(" "),v("li",[v("p",[t._v("从左括号出现的位置开始计算")])])]),t._v(" "),v("p",[t._v("例如："),v("code",[t._v("(A((BC(D))E))F)")])]),t._v(" "),v("table",[v("thead",[v("tr",[v("th",[t._v("捕获组")]),t._v(" "),v("th",[t._v("内容")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[v("code",[t._v("\\\\1")])]),t._v(" "),v("td",[v("code",[t._v("A((BC(D))E)")])])]),t._v(" "),v("tr",[v("td",[v("code",[t._v("\\\\2")])]),t._v(" "),v("td",[v("code",[t._v("(BC(D))E")])])]),t._v(" "),v("tr",[v("td",[v("code",[t._v("\\\\3")])]),t._v(" "),v("td",[v("code",[t._v("BC(D)")])])]),t._v(" "),v("tr",[v("td",[v("code",[t._v("\\\\4")])]),t._v(" "),v("td",[v("code",[t._v("D")])])]),t._v(" "),v("tr",[v("td",[v("code",[t._v("\\\\5")])]),t._v(" "),v("td",[v("code",[t._v("F")])])])])]),t._v(" "),v("p",[v("strong",[v("code",[t._v("String")]),t._v("类中的使用")])]),t._v(" "),v("ul",[v("li",[v("p",[t._v("使用"),v("code",[t._v("boolean matches(String regex)")]),t._v("来使用正则表达式验证字符串是否符合规则。")])]),t._v(" "),v("li",[v("p",[v("code",[t._v("String")]),t._v("类还提供了其他的验证规则函数，如："),v("code",[t._v("boolean startsWith(String prefix)")]),t._v("用来验证是否由某字符串打头。")])])]),t._v(" "),v("blockquote",[v("hr")]),t._v(" "),v("h2",{attrs:{id:"包装类"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#包装类"}},[t._v("#")]),t._v(" 包装类")]),t._v(" "),v("h3",{attrs:{id:"基本信息-7"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#基本信息-7"}},[t._v("#")]),t._v(" 基本信息")]),t._v(" "),v("p",[t._v("对于每种基本数据类型, Java 都提供了与其对应的类。这些类称为包装类。")]),t._v(" "),v("table",[v("thead",[v("tr",[v("th",{staticStyle:{"text-align":"center"}},[t._v("基本数据类型")]),t._v(" "),v("th",{staticStyle:{"text-align":"left"}},[v("code",[t._v("byte")])]),t._v(" "),v("th",[v("code",[t._v("short")])]),t._v(" "),v("th",[v("code",[t._v("int")])]),t._v(" "),v("th",[v("code",[t._v("long")])]),t._v(" "),v("th",[v("code",[t._v("float")])]),t._v(" "),v("th",[v("code",[t._v("double")])]),t._v(" "),v("th",[v("code",[t._v("char")])]),t._v(" "),v("th",[v("code",[t._v("boolean")])])])]),t._v(" "),v("tbody",[v("tr",[v("td",{staticStyle:{"text-align":"center"}},[t._v("包装类")]),t._v(" "),v("td",{staticStyle:{"text-align":"left"}},[v("code",[t._v("Byte")])]),t._v(" "),v("td",[v("code",[t._v("Short")])]),t._v(" "),v("td",[v("code",[t._v("Integer")])]),t._v(" "),v("td",[v("code",[t._v("Long")])]),t._v(" "),v("td",[v("code",[t._v("Float")])]),t._v(" "),v("td",[v("code",[t._v("Double")])]),t._v(" "),v("td",[v("code",[t._v("Character")])]),t._v(" "),v("td",[v("code",[t._v("Boolean")])])])])]),t._v(" "),v("blockquote",[v("p",[v("code",[t._v("int")]),t._v("和"),v("code",[t._v("char")]),t._v("所对应的包装类为单词的全拼。")])]),t._v(" "),v("h3",{attrs:{id:"装箱"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#装箱"}},[t._v("#")]),t._v(" 装箱")]),t._v(" "),v("p",[t._v("将"),v("strong",[t._v("基本数据类型转换为对应的引用数据类型对象")]),t._v("的操作。")]),t._v(" "),v("h3",{attrs:{id:"自动装箱"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#自动装箱"}},[t._v("#")]),t._v(" 自动装箱 "),v("Badge",{attrs:{text:"Java SE 5.0+"}})],1),t._v(" "),v("p",[t._v("将一个"),v("strong",[t._v("基本数据类型变量直接赋值给对应的引用数据类型对象")]),t._v("。本质上调用了对应的"),v("code",[t._v("valueOf()")]),t._v("。")]),t._v(" "),v("p",[t._v("例如：")]),t._v(" "),v("div",{staticClass:"language-java extra-class"},[v("pre",{pre:!0,attrs:{class:"language-java"}},[v("code",[v("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),t._v(" integer "),v("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),v("p",[t._v("相当于：")]),t._v(" "),v("div",{staticClass:"language-java extra-class"},[v("pre",{pre:!0,attrs:{class:"language-java"}},[v("code",[v("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),t._v(" integer "),v("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),v("span",{pre:!0,attrs:{class:"token function"}},[t._v("valueOf")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),v("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),v("div",{staticClass:"custom-block warning"},[v("p",{staticClass:"custom-block-title"},[t._v("注意")]),t._v(" "),v("p",[t._v("所有相同类型地包装类对象之间值的比较，应当全部使用equals()。")]),t._v(" "),v("p",[t._v("在值范围在 -128 到 127内的赋值，Integer对象会在IntegerCache.cache中产生，会服用已有对象。此时使用==比较是安全的。"),v("br"),t._v("\n但在范围之外的所有数据会在堆中产生，不会复用已有对象。"),v("br"),t._v("\n故推荐全部使用equals()来规避风险。")])]),t._v(" "),v("h3",{attrs:{id:"自动拆箱"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#自动拆箱"}},[t._v("#")]),t._v(" 自动拆箱 "),v("Badge",{attrs:{text:"Java SE 5.0+"}})],1),t._v(" "),v("p",[t._v("将一个引用数据类型对象直接赋值给对应基本数据类型变量。本质上调用了对象的"),v("code",[t._v("xxxValue()")]),t._v("。")]),t._v(" "),v("p",[t._v("例如：")]),t._v(" "),v("div",{staticClass:"language-java extra-class"},[v("pre",{pre:!0,attrs:{class:"language-java"}},[v("code",[v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i "),v("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" integer"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),v("p",[t._v("相当于：")]),t._v(" "),v("div",{staticClass:"language-java extra-class"},[v("pre",{pre:!0,attrs:{class:"language-java"}},[v("code",[v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i "),v("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" integer"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),v("span",{pre:!0,attrs:{class:"token function"}},[t._v("intValue")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),v("p",[t._v("当发生基本数据类型和包装类运算时，会发生自动拆箱。")]),t._v(" "),v("div",{staticClass:"custom-block tip"},[v("p",{staticClass:"custom-block-title"},[t._v("关于哈希码")]),t._v(" "),v("ul",[v("li",[v("p",[t._v("整数的哈希码是其本身，但小数的哈希码需要经过计算才能得到。")])]),t._v(" "),v("li",[v("p",[t._v("字符的哈希码是其对应的编码。")])]),t._v(" "),v("li",[v("p",[t._v("布尔类型的哈希码为特殊值，如"),v("code",[t._v("true")]),t._v("的哈希码为"),v("code",[t._v("1231")]),t._v("；"),v("code",[t._v("false")]),t._v("为"),v("code",[t._v("1237")]),t._v("。")])]),t._v(" "),v("li",[v("p",[t._v("八种基本数据类型的哈希码都为固定值。")])])])]),t._v(" "),v("h2",{attrs:{id:"math类"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#math类"}},[t._v("#")]),t._v(" "),v("code",[t._v("Math")]),t._v("类")]),t._v(" "),v("h3",{attrs:{id:"基本信息-8"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#基本信息-8"}},[t._v("#")]),t._v(" 基本信息")]),t._v(" "),v("p",[v("strong",[t._v("Package")]),t._v(" java.lang"),v("br"),t._v(" "),v("code",[t._v("public final class Math")])]),t._v(" "),v("p",[v("code",[t._v("Math")]),t._v("类是一个最终类，其构造函数是私有的。")]),t._v(" "),v("p",[t._v("该类提供了一系列静态方法，这些方法实现了基本的数学运算，如三角函数、绝对值、平方根等。")]),t._v(" "),v("h3",{attrs:{id:"重要方法-4"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#重要方法-4"}},[t._v("#")]),t._v(" 重要方法")]),t._v(" "),v("ol",[v("li",[v("p",[v("code",[t._v("static double ceil(double a)")]),v("br"),t._v("\n向上取整")])]),t._v(" "),v("li",[v("p",[v("code",[t._v("static double floor(double a)")]),v("br"),t._v("\n向下取整")])]),t._v(" "),v("li",[v("p",[v("code",[t._v("static long round(double a)")]),t._v("/"),v("code",[t._v("static int round(float a)")]),v("br"),t._v("\n四舍五入")])]),t._v(" "),v("li",[v("p",[v("code",[t._v("static double sqrt(double a)")]),v("br"),t._v("\n求平方根")])]),t._v(" "),v("li",[v("p",[v("code",[t._v("static double pow(double a, double b)")]),v("br"),t._v("\n求幂 (a"),v("sup",[t._v("b")]),t._v(")")])]),t._v(" "),v("li",[v("p",[v("code",[t._v("static double random()")]),v("br"),t._v("\n返回一个随机数 (0.0≤x<1.0)")])])]),t._v(" "),v("h3",{attrs:{id:"strictfp关键字"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#strictfp关键字"}},[t._v("#")]),t._v(" "),v("code",[t._v("strictfp")]),t._v("关键字")]),t._v(" "),v("p",[t._v("精确浮点(strict float point)，用于修饰类、接口和方法。")]),t._v(" "),v("p",[t._v("被修饰的代码在执行中以80位二进制数来运算小数，结果会保留为64位。")]),t._v(" "),v("div",{staticClass:"custom-block tip"},[v("p",{staticClass:"custom-block-title"},[t._v("特别的")]),t._v(" "),v("p",[t._v("当适用精确运算时，Java 提供了"),v("code",[t._v("BigDecimal")]),t._v("类。")]),t._v(" "),v("p",[t._v("这个类中对基础运算（如加、减、乘、除）提供了方法支持，故，不能使用运算符（如"),v("code",[t._v("+")]),t._v("、"),v("code",[t._v("-")]),t._v("、"),v("code",[t._v("*")]),t._v("、"),v("code",[t._v("/")]),t._v("）来进行运算。")])])])}),[],!1,null,null,null);a.default=s.exports}}]);