import{_ as l,C as k,c as p,o as t,ag as n,j as i,a,G as e}from"./chunks/framework.DPDPlp3K.js";const u=JSON.parse('{"title":"API-工具类库 3 (Package java.util)","description":"","frontmatter":{"prev":{"text":"API-工具类库2","link":"java/API-util2"},"next":{"text":"API-输入输出类库","link":"java/API-io"}},"headers":[],"relativePath":"java/API-util3.md","filePath":"java/API-util3.md"}'),E={name:"java/API-util3.md"};function r(d,s,g,y,c,F){const h=k("Badge");return t(),p("div",null,[s[16]||(s[16]=n("",6)),i("ol",null,[i("li",null,[s[14]||(s[14]=i("p",null,[i("code",null,"ConcurrentHashMap"),a("类")],-1)),i("ul",null,[s[11]||(s[11]=i("li",null,"映射底层依靠键值对存储数据，默认大小为 16",-1)),s[12]||(s[12]=i("li",null,"数组的每一个位置维系了一个链表，默认当元素大于 8 时，转为红黑树（根据泊松分布，得知链表长度为 8 是千万分之一）",-1)),i("li",null,[s[0]||(s[0]=a("经过一定位运算分布到 16 个桶中")),s[1]||(s[1]=i("br",null,null,-1)),s[2]||(s[2]=a(" 当元素碰撞时，两元素键对比；若相同，则覆盖。不同则生成链。")),s[3]||(s[3]=i("br",null,null,-1)),s[4]||(s[4]=a(" 每个桶独立设置了 ")),s[5]||(s[5]=i("code",null,"ReentrantLock",-1)),s[6]||(s[6]=a(" 来保证线程安全，每个桶互不影响，提高并发效率。")),s[7]||(s[7]=i("br",null,null,-1)),s[8]||(s[8]=a(" 默认最高支持 16 个线程并发写。")),e(h,{type:"warning",text:"Java 7.0"}),s[9]||(s[9]=i("br",null,null,-1)),s[10]||(s[10]=a(" 在 Java 8 中将结构改为和 HashMap 类似的链表/红黑树结构，每个结点之间都互不影响。利用 CAS 和 synchronized 保证线程安全。"))]),s[13]||(s[13]=n("",5))])]),s[15]||(s[15]=n("",1))]),s[17]||(s[17]=n("",67))])}const A=l(E,[["render",r]]);export{u as __pageData,A as default};
