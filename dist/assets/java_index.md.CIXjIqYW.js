import{_ as s,c as i,o as t,ag as n}from"./chunks/framework.DPDPlp3K.js";const g=JSON.parse('{"title":"Java 概述","description":"","frontmatter":{"prev":false,"next":{"text":"语法","link":"/java/grammars"}},"headers":[],"relativePath":"java/index.md","filePath":"java/index.md"}'),l={name:"java/index.md"};function e(r,a,o,p,h,d){return t(),i("div",null,a[0]||(a[0]=[n(`<h1 id="java-概述" tabindex="-1">Java 概述 <a class="header-anchor" href="#java-概述" aria-label="Permalink to &quot;Java 概述&quot;">​</a></h1><h2 id="_1-1-关于-java" tabindex="-1">1.1 关于 Java <a class="header-anchor" href="#_1-1-关于-java" aria-label="Permalink to &quot;1.1 关于 Java&quot;">​</a></h2><ul><li><p>1995 年 Sun 公司正式推出的一款编程语言<br> 吸收了 C++ 的优点，去掉了其中难以理解的部分</p></li><li><p>起初它的名字为 Oak<br> Green Project 引导下开发了 Oak 语言，并在实用机器运行<br> SunWorld 大会正式以&quot;Java&quot;的名字发布了 1.0 版本<br> 提出了 Java 的口号 &quot;Write once, run anywhere.&quot;</p></li><li><p>版本变化</p><ul><li>Beta [1995, <strong>JDK Beta</strong>]</li><li>1.0 [1996, <strong>JDK 1.0</strong>] (JVM, Applet, AWT...)</li><li>1.1 [1997, <strong>JDK 1.1</strong>] (JDBC, JavaBean, 内部类...)</li><li>1.2 [1998, <strong>J2SE 1.2</strong>, ...] (分解为 J2SE, J2EE, J2ME)</li><li>1.3 [2000, <strong>J2SE 1.3</strong>, ...] (数学运算, Timer, ...)</li><li>1.4 [2002, <strong>J2SE 1.4</strong>, ...] (正则, 日志, XML解析器, ...) 走向成熟</li><li>5.0 [2004, <strong>J2SE 5.0</strong>, ...] (泛型, 自动装箱, 枚举, 便利循环, ...) 面向易用</li><li>6.0 [2006, <strong>Java SE 6.0</strong>, ...] (动态语言, 垃圾回收, 类加载, ...)</li><li>Sun 衰落，被 Oracle 收购</li><li>7.0 [2011, <strong>Java SE 7</strong>, ...] (G1 收集器, 类加载框架, ...)</li><li>8.0 [2014, <strong>Java SE 8 (LTS)</strong>, ...] (Lambda 表达式, 默认方法, ...)</li><li>9.0 [2017, <strong>Java SE 9</strong>, ...] (模块系统, REPL 交互式编程, ...)</li><li>10.0 [2018, <strong>Java SE 10</strong>, ...] (局部类型推测, 改进的 GC, ...)</li><li>11.0 [2018, <strong>Java SE 11 (LTS)</strong>, ...] (基于嵌套的访问控制, 标准 Http 客户端, ...)</li><li>12.0 [2019, <strong>Java SE 12</strong>, ...] (增强的 Switch, Constants API, ...)</li></ul></li><li><p>技术结构</p><ul><li>Java SE: 标准版</li><li>Java EE: 企业版</li><li>Java ME: 移动版</li></ul></li><li><p>跨平台性<br> Java 是一款拥有跨平台性的语言。这种特性的实现方式是<span id="JVM"></span>JVM (Java Virtual Machine).<br> Java 针对每种操作系统开发了对应的 Java 虚拟机，Java 程序在编写完成后并不直接在计算机中运行，而是先提交给对应操作系统的 JVM 进行“翻译”。JVM 将 Java 代码“翻译”成当前操作系统可以“读懂”的语言后才运行。<br> 所以 Java 语言的跨平台性得益于 JVM，但 <strong>JVM 本身不具有跨平台性</strong>。</p></li></ul><h2 id="_1-2-jvm-jre-和-jdk" tabindex="-1">1.2 JVM, JRE 和 JDK <a class="header-anchor" href="#_1-2-jvm-jre-和-jdk" aria-label="Permalink to &quot;1.2 JVM, JRE 和 JDK&quot;">​</a></h2><ul><li><p><a href="#JVM">JVM (Java Virtual Machine)</a>, <strong>Java 虚拟机</strong>，是 Java 可以跨平台的前提。</p></li><li><p>JRE (Java Runtime Environment), <strong>Java 运行时环境</strong>，包括 JVM、Java 平台核心类和基础 Java 平台库。</p></li><li><p>JDK (Java Development Kit), <strong>Java 开发工具包</strong>，包括 JRE 和一些开发工具.</p></li></ul><h2 id="_1-3-第一个-java-程序" tabindex="-1">1.3 第一个 Java 程序 <a class="header-anchor" href="#_1-3-第一个-java-程序" aria-label="Permalink to &quot;1.3 第一个 Java 程序&quot;">​</a></h2><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Demo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello, world!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="warning custom-block"><p class="custom-block-title">注意</p><ul><li>Java 程序必须写到 <code>.java</code> 文件中</li><li><code>.class</code> 文件名对应类名。每一个类在编译后会生成一个对应的 <code>.class</code> 文件</li><li>当一个类用 <code>public</code> 修饰时，这个类被称为<strong>公共类</strong>。公共类要求和 Java 文件名完全一致</li></ul></div><h2 id="_1-4-命令行下的操作" tabindex="-1">1.4 命令行下的操作 <a class="header-anchor" href="#_1-4-命令行下的操作" aria-label="Permalink to &quot;1.4 命令行下的操作&quot;">​</a></h2><p>编译当前 Java 文件使用命令<code>javac</code>，完整命令：<br><strong>Input</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>javac -d 编译完成后存放路径 要编译的.java文件</span></span></code></pre></div><br><p>存在类依赖时使用<code>java -cp</code>来命令指定依赖路径，完整命令：<br><strong>Input</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>java -cp .class文件的存放路径 .class文件的文件名</span></span></code></pre></div><br><p>生成 JavaDoc使用命令<code>javadoc -d</code>，完整命令：<br><strong>Input</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>javadoc -d 文档生成路径 编译的.java文件</span></span></code></pre></div>`,17)]))}const v=s(l,[["render",e]]);export{g as __pageData,v as default};
