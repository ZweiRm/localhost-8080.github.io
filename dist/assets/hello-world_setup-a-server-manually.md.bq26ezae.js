import{_ as i,c as a,o as n,ag as l}from"./chunks/framework.DPDPlp3K.js";const e="/img/vultr_add_ssh_key.jpg",t="/img/tomcat_webapps.jpg",E=JSON.parse('{"title":"让我们来手动配置一台服务器","description":"","frontmatter":{},"headers":[],"relativePath":"hello-world/setup-a-server-manually.md","filePath":"hello-world/setup-a-server-manually.md"}'),p={name:"hello-world/setup-a-server-manually.md"};function h(k,s,r,d,c,o){return n(),a("div",null,s[0]||(s[0]=[l('<h1 id="让我们来手动配置一台服务器" tabindex="-1">让我们来手动配置一台服务器 <a class="header-anchor" href="#让我们来手动配置一台服务器" aria-label="Permalink to &quot;让我们来手动配置一台服务器&quot;">​</a></h1><p>当我们从云服务商购买了一台服务器或者确实有一台服务器在手里时，我们需要对它进行一些最基本的配置来使它可以正常工作。这篇文章可以让你了解到如何对一台 Linux 服务器进行基本的配置。<br> 当然，某些云服务商也提供了现成的镜像服务一键搭建及配置。可以根据需求自行选择。</p><h2 id="step-0-概要" tabindex="-1">Step 0. 概要 <a class="header-anchor" href="#step-0-概要" aria-label="Permalink to &quot;Step 0. 概要&quot;">​</a></h2><p>这篇文章记录使用 CentOS 系统配置一个可以让 Java Web 应用程序工作的服务器。将包含：</p><ul><li>基本软件安装及配置</li><li>基础配置</li><li>Java Web 应用相关软件安装及配置</li></ul><p><strong>在此之前你需要掌握的知识：</strong> Linux 基本操作命令</p><p><strong>在操作中会使用到的软件：</strong> Cmder；FileZilla<br> Cmder 用来敲命令，当然你也可以用 PowerShell；<br> FileZilla 用来通过 FTP 向服务器端操作文件。</p><h2 id="step-1-配置-ssh-密钥及安全组" tabindex="-1">Step 1. 配置 SSH 密钥及安全组 <a class="header-anchor" href="#step-1-配置-ssh-密钥及安全组" aria-label="Permalink to &quot;Step 1. 配置 SSH 密钥及安全组&quot;">​</a></h2><p>使用 SSH 连接服务器可以让我们免去每次输入密码的麻烦。安全组的配置可以在云服务商端设置对某端口某协议放行与否，以此来提高安全性。本段所有命令在本机执行。</p><h3 id="ssh-密钥" tabindex="-1">SSH 密钥 <a class="header-anchor" href="#ssh-密钥" aria-label="Permalink to &quot;SSH 密钥&quot;">​</a></h3><ul><li><p>Vultr 服务器</p><ol><li><p>生成 SSH Key<br> 使用命令：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ssh-keygen</span></span></code></pre></div><p>命令会要求进行简单配置，若使用默认配置只需连续按下回车以确认。<br> SSH Key 会默认存放于 <code>C:\\Users\\用户名\\.ssh</code>（Windows) ；<code>~/.ssh/</code>(Unix)文件夹中。 其中密钥为 <code>id_rsa</code>；公钥为 <code>id_rsa.pub</code>。</p></li><li><p>部署 SSH Key<br> 使用命令查看公钥：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cat</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /home/example_user/.ssh/id_rsa.pub</span></span></code></pre></div><p>复制弹出的结果，打开 Vultr 网站中 Account&gt; SSH Keys&gt; Add SSH Key 填写表单并保存。<br><img src="'+e+`" alt="Add SSH Key"></p></li><li><p>使用 SSH Key 部署服务器<br> 在 Vultr 网站中 Products&gt;Deploy New Instance 选择所需要的服务器配置、镜像并勾选刚才配置的 SSH Key.</p><div class="warning custom-block"><p class="custom-block-title">注意</p><p>在 Vultr 中，自动给服务器实例配置 SSH Key 只发生在购买服务器时。所以如果我们已经拥有了一台服务器后意欲自动配置 SSH Key 只能通过重装 SSH Key 操作来实现。而<strong>这个操作会抹除服务器的所有内容</strong>。<br> 方法：Vultr 网站中 Products&gt; Server&gt; Settings&gt; Reinstall SSH Keys</p><p><strong>手动向服务器部署 SSH Key</strong><br> 除了 Vultr 提供的自动部署 SSH Key，我们还可以手动向服务器上传 SSH Key来避免抹除已有服务器的麻烦。</p><ul><li><p>Windows<br><strong>在 PowerShell 中使用命令：</strong></p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $env</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">:USERPROFILE</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\.</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">ssh</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\i</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">d_rsa.pub</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ssh</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> root@你的服务器IP</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;cat &gt;&gt; .ssh/authorized_keys&quot;</span></span></code></pre></div><p>*<em>此操作不能使用 Cmder.</em></p></li><li><p>Linux/macOS<br> 使用命令：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ssh-copy-id</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -i</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ~/.ssh/id_rsa.pub</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> root@你的服务器IP</span></span></code></pre></div><p>根据提示要求输入密码来安装 Key.</p></li></ul></div></li><li><p>使用 SSH 登录服务器<br> 使用命令：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ssh</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> root@你的服务器IP</span></span></code></pre></div><p>即可免密码登录远程服务器。</p></li></ol></li><li><p>阿里云服务器</p><ol><li><p>创建密钥对<br> 在阿里云 ECS 管理控制台中点击 网络与安全&gt; 密钥对。完成相应的配置，点击确定生成密钥对。下载私钥 <code>密钥对名称.pem</code> 到本地，存放于<code>C:\\Users\\用户名\\.ssh</code>/<code>~/.ssh/</code>下。</p></li><li><p>绑定密钥对<br> 在密钥对设置中点击：操作&gt; 绑定密钥对。选择要配置的服务器实例，点击确定。（当服务器实例正在运行中时需要对其重新启动）</p></li><li><p>使用 SSH 连接服务器</p><ul><li><p>确认私钥所在位置，并修改其权限。<br> 使用命令：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">chmod</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 400</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ~/.ssh/密钥对名称.pem</span></span></code></pre></div></li><li><p>连接服务器实例<br> 使用命令：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ssh</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -i</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ~/.ssh/密钥对名称.pem</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> root@你的服务器IP</span></span></code></pre></div></li></ul></li></ol></li></ul><h3 id="安全组" tabindex="-1">安全组 <a class="header-anchor" href="#安全组" aria-label="Permalink to &quot;安全组&quot;">​</a></h3><ul><li><p>Vultr 服务器</p><ol><li><p>新建安全组<br> Vultr 网站 Products&gt; Firewall&gt; Add FireWall Group<br> 按提示填写表单。开放端口<code>22</code>, <code>80</code>, <code>443</code>, <code>3306</code>, <code>8080</code>, <code>8081</code>, <code>8082</code>并保存。</p></li><li><p>绑定安全组<br> Vultr 网站 Products&gt; Server&gt; Settings&gt; Firewall<br> 选择刚才配置的安全组并使其生效。</p></li></ol></li><li><p>阿里云服务器</p><ol><li><p>创建安全组<br> 在 ECS 控制台点击 网络与安全&gt; 安全组&gt; 创建安全组<br> 配置安全组开放端口<code>22</code>, <code>80</code>, <code>443</code>, <code>3306</code>, <code>8080</code>, <code>8081</code>, <code>8082</code>并保存。</p></li><li><p>绑定安全组<br> 在 ECS 控制台点击 实例与镜像&gt; 实例&gt; 操作&gt; 管理&gt; 本实例安全组&gt; 加入安全组<br> 选择配置的安全组并使其生效。</p></li></ol></li></ul><h2 id="step-2-安装-vim" tabindex="-1">Step 2. 安装 Vim <a class="header-anchor" href="#step-2-安装-vim" aria-label="Permalink to &quot;Step 2. 安装 Vim&quot;">​</a></h2><p>Vim 是一款基于 Vi 的编辑器。相对于 Vi，它有更强大的功能。我们会使用 Vim 来应对后续编辑文件的需要。<br> 使用 <code>yum</code> 来安装 vim：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">yum</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -y</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> vim</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span></code></pre></div><p>安装完成后，就可以使用 vim 来创建、编辑文件了。这里附上一个简单的<a href="https://www.runoob.com/linux/linux-vim.html" target="_blank" rel="noreferrer">教程</a>。</p><h2 id="step-2-5-配置-swap-可选" tabindex="-1">Step 2.5. 配置 SWAP（可选） <a class="header-anchor" href="#step-2-5-配置-swap-可选" aria-label="Permalink to &quot;Step 2.5. 配置 SWAP（可选）&quot;">​</a></h2><p>当服务器内存过小时，会造成某些程序崩溃。增加交换区来配置虚拟内存。</p><ol><li><p>SWAP 分区大小<br> 根据红帽建议 <a href="https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/6/html/installation_guide/s2-diskpartrecommend-ppc#id4394007" target="_blank" rel="noreferrer">Recommended Partitioning Scheme</a>：</p><table tabindex="0"><thead><tr><th style="text-align:center;">物理内存</th><th style="text-align:center;">建议的交换空间大小</th><th style="text-align:center;">若开启休眠功能建议的交换空间大小</th></tr></thead><tbody><tr><td style="text-align:center;">⩽ 2GB</td><td style="text-align:center;">2 倍于 RAM 大小</td><td style="text-align:center;">3 倍于 RAM大小</td></tr><tr><td style="text-align:center;">&gt; 2GB – 8GB</td><td style="text-align:center;">和 RAM 大小相等</td><td style="text-align:center;">2 倍于 RAM 大小</td></tr><tr><td style="text-align:center;">&gt; 8GB – 64GB</td><td style="text-align:center;">至少 4 GB</td><td style="text-align:center;">1.5 倍于 RAM 大小</td></tr><tr><td style="text-align:center;">&gt;64GB</td><td style="text-align:center;">至少 4 GB</td><td style="text-align:center;">不建议休眠</td></tr></tbody></table></li><li><p>设置 SWAP 分区 使用命令：</p><ol><li><p>创建 SWAP 分区</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> if=/dev/zero</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> of=/swapfile</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> bs=1M</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> count=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2048</span></span></code></pre></div><p>其中 <code>bs</code>×<code>count</code> 为 SWAP 分区大小，这个示例中大小位 2G. <code>bs</code>为每块大小，<code>count</code>为块数。<br><code>/swapfile</code>为生成的分区路径。</p></li><li><p>将刚才生成的分区设置为 SWAP 分区</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mkswap</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /swapfile</span></span></code></pre></div></li><li><p>启用 SWAP 分区</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">swapon</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /swapfile</span></span></code></pre></div></li><li><p>自动挂载分区</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">vim</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /etc/fstab</span></span></code></pre></div><p>添加行并保存：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">/swapfile</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> swap</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> swap</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> defaults</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span></code></pre></div></li><li><p>检查 swappiness 值<br> 这个参数控制操作系统使用 SWAP 分区的时机。参数范围由 0 到 100。当参数为 0 时表示系统最大程度使用物理内存，耗尽时使用 SWAP 分区；100 表示积极使用 SWAP 分区，将物理内存上的内容及时搬运到 SWAP 分区里。CentOS 7 默认为 30；CentOS 6 默认为 60.<br> 使用命令检查：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cat</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /proc/sys/vm/swappiness</span></span></code></pre></div><p>若需修改，执行命令：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 临时修改</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sysctl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> vm.swappiness=?</span></span></code></pre></div><p>或者</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 永久修改</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">vim</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /etc/sysctl.conf</span></span></code></pre></div><p>并添加行：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">vm.swappiness</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">=?</span></span></code></pre></div></li><li><p>查看内存情况<br> 使用命令：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">free</span></span></code></pre></div></li></ol></li></ol><h2 id="step-3-安装并配置-jdk" tabindex="-1">Step 3. 安装并配置 JDK <a class="header-anchor" href="#step-3-安装并配置-jdk" aria-label="Permalink to &quot;Step 3. 安装并配置 JDK&quot;">​</a></h2><ol><li>在 <a href="http://jdk.java.net/" target="_blank" rel="noreferrer">OpenJDK</a>下载 Linux 适用的 JDK 压缩包，并使用 FileZilla 上传到服务器合适的位置。</li><li>解压缩<br> 使用命令：<div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">tar</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -xzvf</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> openjdk-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">****</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">_linux-x64_bin.tar.gz</span></span></code></pre></div>*<em>将命令中的文件替换成你所下载的版本。</em></li><li>配置环境变量<br> 这里使用对系统所有用户有效且便于维护的方法进行设置。这个操作需要管理员权限。使用命令： <ol><li><p>新建 Shell 脚本并编辑</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">vim</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /etc/profile.d/java.sh</span></span></code></pre></div><p>编辑内容并保存：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Java Environment</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">JAVA_HOME</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/root/java/jdk-11</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">PATH</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$PATH</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$JAVA_HOME</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/bin</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">CLASSPATH</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$JAVA_HOME</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/lib</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> JAVA_HOME PATH CLASSPATH</span></span></code></pre></div><p>*<em>将命令中 <code>JAVA_HOME</code> 替换成刚才解压完成后生成的文件夹路径。</em><br> 这样的配置方式可以在不需要该环境变量时更简便地进行维护。</p></li><li><p>使环境变量生效<br> 使用命令：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">source</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /etc/profile.d/java.sh</span></span></code></pre></div></li><li><p>检查是否生效<br> 使用命令：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">java</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -version</span></span></code></pre></div><p>若正确显示版本信息表明配置正确。</p></li></ol></li></ol><h2 id="step-4-设置防火墙" tabindex="-1">Step 4. 设置防火墙 <a class="header-anchor" href="#step-4-设置防火墙" aria-label="Permalink to &quot;Step 4. 设置防火墙&quot;">​</a></h2><ol><li><p>检查防火墙状态<br> 默认情况下，CentOS 7 已经内置并开启了防火墙 firewalld. 使用命令检查其状态：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">firewall-cmd</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --state</span></span></code></pre></div><p>若显示 <code>running</code> 则已开启。</p><p>当显示命令不存在时，使用命令安装：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">yum</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> firewalld</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -y</span></span></code></pre></div></li><li><p>设置放行规则<br> 使用命令：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">firewall-cmd</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --permanent</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --zone=public</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --add-port=22/tcp</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">firewall-cmd</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --permanent</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --zone=public</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --add-port=80/tcp</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">firewall-cmd</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --permanent</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --zone=public</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --add-port=443/tcp</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">firewall-cmd</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --permanent</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --zone=public</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --add-port=3306/tcp</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">firewall-cmd</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --permanent</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --zone=public</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --add-port=8080/tcp</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">firewall-cmd</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --permanent</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --zone=public</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --add-port=8081/tcp</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">firewall-cmd</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --permanent</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --zone=public</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --add-port=8082/tcp</span></span></code></pre></div><p>每一条都显示<code>success</code>则正确。</p></li><li><p>重载防火墙以使得配置生效<br> 使用命令：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">firewall-cmd</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --reload</span></span></code></pre></div></li><li><p>检查防火墙<br> 使用命令：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">firewall-cmd</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --zone=public</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --list-ports</span></span></code></pre></div><p>检查所有要设置的端口都已放行。</p></li></ol><h2 id="step-5-安装-mysql" tabindex="-1">Step 5. 安装 MySQL <a class="header-anchor" href="#step-5-安装-mysql" aria-label="Permalink to &quot;Step 5. 安装 MySQL&quot;">​</a></h2><ol><li><p>下载 yum repository<br> 访问 <a href="https://dev.mysql.com/downloads/repo/yum/" target="_blank" rel="noreferrer">MySQL Community Downloads</a>，找到适合的版本，点击<code>Download</code>。在页面中，复制<code>No thanks, just start my download.</code>链接所对应的地址。<br> 在服务器端使用命令下载 rpm 文件：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">wget</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://dev.mysql.com/get/platform-and-version-specific-package-name.noarch.rpm</span></span></code></pre></div><p>*<em>命令中 url 替换为刚才复制的链接。</em></p></li><li><p>安装 yum repository<br> 使用命令安装：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">yum</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -y</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> platform-and-version-specific-package-name.noarch.rpm</span></span></code></pre></div></li><li><p>安装 MySQL<br> 使用命令：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">yum</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mysql-community-server</span></span></code></pre></div><p>按提示键入 <code>y</code> 来确认。</p></li><li><p>启动 MySQL<br> 使用命令来启动 MySQL 服务：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">systemctl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> start</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mysqld.service</span></span></code></pre></div><p>接着使用命令来查看 MySQL 服务的状态：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">systemctl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> status</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mysqld.service</span></span></code></pre></div><p>若显示绿色的 <code>active (running)</code> 则 MySQL 启动正常。</p></li><li><p>登录并配置 MySQL<br> 输入命令获得 MySQL 自动生成的初始密码：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">grep</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;temporary password&#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /var/log/mysqld.log</span></span></code></pre></div><p>*<em>返回的 <code>2020-08-23T13:59:15.793152Z 6 [Note] [MY-010454] [Server] A temporary password is generated for root@localhost: ********</code> 末尾为初始密码</em></p><p>复制初试密码并登录 MySQL：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mysql</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -uroot</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span></span></code></pre></div><p>按提示粘贴密码并确定。</p><p>使用命令更改自定义 MySQL 登录密码：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ALTER</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> USER</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;root&#39;@&#39;localhost&#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> IDENTIFIED</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> BY</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;MyNewPass4!&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><p>*<em>注意这里是 SQL 语句，需以分号结尾。</em></p><p>使用命令来更改远程连接：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">CREATE</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> USER</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;root&#39;@&#39;%&#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> IDENTIFIED</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> BY</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;******&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><p>这里 <code>%</code> 指所有 IP，根据需要可以改为固定某 IP。<code>******</code> 为对应密码。</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">GRANT</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ALL</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> PRIVILEGES</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ON</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> *</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> TO</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;root&#39;@&#39;%&#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> WITH</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> GRANT</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> OPTION</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><p>设置新创建的账户的权限。</p></li><li><p>按需求建立数据库、执行数据库文件</p></li></ol><h2 id="step-6-安装-tomcat" tabindex="-1">Step 6. 安装 Tomcat <a class="header-anchor" href="#step-6-安装-tomcat" aria-label="Permalink to &quot;Step 6. 安装 Tomcat&quot;">​</a></h2><ol><li><p>下载 Tomcat<br> 访问 <a href="https://tomcat.apache.org/" target="_blank" rel="noreferrer">Apache Tomcat</a>, 选择合适的版本并下载。</p></li><li><p>安装 Tomcat<br> 将下载好的文件使用 FileZilla 上传到服务器，按类似安装 JDK 的方法在合适的位置解压缩。按需要可以解压多份 Tomcat 服务器以后备用。</p></li></ol><h2 id="step-7-安装并配置-tengine" tabindex="-1">Step 7. 安装并配置 Tengine <a class="header-anchor" href="#step-7-安装并配置-tengine" aria-label="Permalink to &quot;Step 7. 安装并配置 Tengine&quot;">​</a></h2><ol><li><p>下载并安装相关软件<br> 使用命令安装编译器：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">yum</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -y</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> gcc</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> gcc-c++</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> autoconf</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> automake</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> make</span></span></code></pre></div><p>使用命令安装 pcre-devel：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">yum</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -y</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pcre-devel</span></span></code></pre></div><p>使用命令安装 OpenSSL：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">yum</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -y</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> openssl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> openssl-devel</span></span></code></pre></div></li><li><p>下载并安装 Tengine<br> 访问<a href="http://tengine.taobao.org/" target="_blank" rel="noreferrer">The Tengine Web Server</a>下载压缩包，并使用 FileZilla 上传到服务器适当的位置。按类似安装 JDK 的方法解压缩。</p><p>在服务器访问解压好的文件夹，使用命令：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./configure</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">make</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> make</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span></span></code></pre></div><p>*<em>请确保安装过程没有报错：类似<code>./configure: error</code>的错误提示。若有，请查阅相关文档解决。</em><br> *<em>Tengine 默认将安装在 <code>/usr/local/nginx</code> 目录。</em></p></li><li><p>配置环境变量<br> 使用命令生成并保存文件：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">vim</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /etc/profile.d/tengine.sh</span></span></code></pre></div><p>编辑内容：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Tengine Environment</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">PATH</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$PATH</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">:/usr/local/nginx/sbin</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> PATH</span></span></code></pre></div><p>使环境变量生效 使用命令：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">source</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /etc/profile.d/tengine.sh</span></span></code></pre></div><p>检查是否生效<br> 使用命令：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">nginx</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -v</span></span></code></pre></div><p>若正确显示版本信息表明配置正确。</p></li><li><p>设置为系统服务<br> 使用命令创建文件，使得 Tengine 开机自启：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">vim</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /lib/systemd/system/nginx.service</span></span></code></pre></div><p>编辑内容并保存：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[Unit]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Description</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">The</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> nginx</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> HTTP</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> and</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> reverse</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> proxy</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> server</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">After</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">syslog.target</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> network.target</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> remote-fs.target</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> nss-lookup.target</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[Service]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Type</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">forking</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">PIDFile</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/usr/local/nginx/logs/nginx.pid</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ExecStartPre</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/usr/local/nginx/sbin/nginx</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> -t</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ExecStart</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/usr/local/nginx/sbin/nginx</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> -c</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /usr/local/nginx/conf/nginx.conf</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ExecReload</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/bin/kill</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> -s</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> HUP</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $MAINPID</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ExecStop</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/bin/kill</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> -s</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> QUIT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $MAINPID</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">PrivateTmp</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[Install]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">WantedBy</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">multi-user.target</span></span></code></pre></div><p>修改该文件权限：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">chmod</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 745</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /lib/systemd/system/nginx.service</span></span></code></pre></div><p>设置开机自启：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">systemctl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> enable</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> nginx.service</span></span></code></pre></div></li></ol><h2 id="step-8-部署并测试项目" tabindex="-1">Step 8. 部署并测试项目 <a class="header-anchor" href="#step-8-部署并测试项目" aria-label="Permalink to &quot;Step 8. 部署并测试项目&quot;">​</a></h2><p>下面再对 Tomcat 和 Tengine 进行一些操作和配置，最后进行简单地测试确保项目已经正确运行。</p><h3 id="上传项目包" tabindex="-1">上传项目包 <a class="header-anchor" href="#上传项目包" aria-label="Permalink to &quot;上传项目包&quot;">​</a></h3><p>在本地测试完成后，使用 FileZilla 将 <code>.war</code> 压缩包上传到服务器端。上传路径为 <code>apache-tomcat-****/webapps</code><br> 若你有多个项目需要分别上传到每个 Tomcat 中。在这篇文章的示例里，会将三个项目分别上传到三份 Tomcat 中。</p><div class="warning custom-block"><p class="custom-block-title">注意</p><p>当在 IDE 测试导出项目时，请：</p><ul><li>明确项目配置文件中 MySQL 密码已经与服务器中安装的 MySQL 密码相同。</li><li>明确配置文件中当前项目的端口号以便后续配置。在这篇文章的示例里三个项目的端口号分别为 <code>8080</code>, <code>8081</code> 和 <code>8082</code>.</li></ul></div><p>上传完毕后对文件夹中的部分文件做些修改，以使我们的项目成为该 Tomcat 的默认项目。</p><ul><li>重命名 <code>ROOT</code> 文件夹，添加后缀类似 <code>_1</code> 以使自动生成的 ROOT 项目不再是默认项目。</li><li>重命名我们上传的项目为 <code>ROOT.war</code>. 当服务器启动时会自动解压该包来生成默认项目文件夹 ROOT.</li></ul><p>完成后：<br><img src="`+t+`" alt="Tomcat Webapps"></p><h3 id="配置-tomcat" tabindex="-1">配置 Tomcat <a class="header-anchor" href="#配置-tomcat" aria-label="Permalink to &quot;配置 Tomcat&quot;">​</a></h3><p>我们对每一个 Tomcat 的配置文件进行修改。<br> 访问文件夹：<code>apache-tomcat-******/conf/</code>，找到<code>server.xml</code>进行编辑：</p><ol><li><p>将每个 Tomcat 的 <code>port</code> 设置项改为与所开发的 Web APP 设置一致。把 <code>redirectPort</code> 设置项改为 <code>443</code>. 保存修改。</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line highlighted"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Connector</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> port</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;8080&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> protocol</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;HTTP/1.1&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">connectionTimeout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;20000&quot;</span></span>
<span class="line highlighted"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">redirectPort</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;443&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span></code></pre></div><p>之后类似的，将 SHUTDOWN 用的 <code>8085</code> 依次改为不同的端口，保存修改。</p></li><li><p>在每个 Tomcat 的 <code>server.xml</code> 配置文件中增添标签：<br> 找到 <code>&lt;Engine&gt;...&lt;/Engine&gt;</code> 标签，在其中添加子标签用以后续配合 Tengine 识别 HTTP 和 HTTPS 访问：</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Engine</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Catalina&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> defaultHost</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;localhost&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Valve</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> className</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;org.apache.catalina.valves.RemoteIpValve&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> remoteIpHeader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;X-Forwarded-For&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> protocolHeader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;X-Forwarded-Proto&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> protocolHeaderHttpsValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">...</span></span></code></pre></div><p>完成后保存修改。</p></li></ol><h3 id="再配置-tengine" tabindex="-1">再配置 Tengine <a class="header-anchor" href="#再配置-tengine" aria-label="Permalink to &quot;再配置 Tengine&quot;">​</a></h3><ol><li><p>创建 HTTPS 证书文件夹并上传证书<br> 在目录 <code>/usr/local/nginx/conf/</code> 下创建 <code>cert/</code> 文件夹。访问域名提供商（如阿里云）控制台下载 HTTPS 证书。下载完成后通过 FileZilla 上传到刚才建立的文件夹中。</p></li><li><p>配置 Tengine<br> 使用命令编辑 Tengine 的配置文件以设置服务器反向代理：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">vim</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /usr/local/nginx/conf/nginx.conf</span></span></code></pre></div><div class="language-properties vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">properties</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line highlighted"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">pid        /usr/local/nginx/logs/nginx.pid</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">; # 去掉该行注释，更改该项内容为此。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">http {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    include       mime.types</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    default_type  application/octet-stream</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    sendfile        on</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    keepalive_timeout  65</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">;</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    upstream tomcat*** {</span></span>
<span class="line highlighted"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        server localhost:8080</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">; # 对应 Tomcat 服务器中配置文件中的设置</span></span>
<span class="line highlighted"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # HTTPS server</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    server {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        listen       443 ssl</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">;</span></span>
<span class="line highlighted"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        server_name  domain.com</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">; # 改为在域名商购买的域名</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        ssl_certificate      cert/domain_name.pem</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">; # 改为刚才保存在 cer/ 文件夹中 .pem 文件路径</span></span>
<span class="line highlighted"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        ssl_certificate_key  cert/domain_name.key</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">; # 改为刚才保存在 cer/ 文件夹中 .key 文件路径</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        ssl_session_cache    shared:SSL:1m</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        ssl_session_timeout  5m</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">;</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">; #使用此加密套件。</span></span>
<span class="line highlighted"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        ssl_protocols TLSv1 TLSv1.1 TLSv1.2</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">; #使用该协议进行配置。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        ssl_prefer_server_ciphers  on</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">;</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        rewrite ^(.*)$ https://$host$1 permanent</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">;   #将所有 HTTP 请求通过 rewrite 重定向到 HTTPS。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        location / {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            root   html</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">;</span></span>
<span class="line highlighted"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            index  index.html index.htm</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">; # 改为 Web APP 开发设置的首页</span></span>
<span class="line highlighted"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            proxy_pass http://tomcat_***</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">; # 对应上面 upstream 项进行修改</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    server { </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 对应 HTTP 访问进行跳转</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        lisent 80</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        server_name health.ahza.xin</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        return 301 https://******$request_uri</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">; # 跳转 URL设置为 HTTPS协议</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="warning custom-block"><p class="custom-block-title">提示</p><p><code>upstream</code> 项命名不能使用下划线，否则 Tomcat 报 400 错误。</p></div><p>有几个 Tomcat 就配置几对 <code>upstream</code> 和 <code>server</code>. 下面是本篇文章中的配置文件示例：</p><div class="language-properties vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">properties</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> #user  nobody;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> worker_processes  1</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> #error_log  logs/error.log;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> #error_log  logs/error.log  notice;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> #error_log  logs/error.log  info;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> #error_log  &quot;pipe:rollback logs/error_log interval=1d baknum=7 maxsize=2G&quot;;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pid        /usr/local/nginx/logs/nginx.pid</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> events {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     worker_connections  1024</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> http {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     include       mime.types</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     default_type  application/octet-stream</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     #log_format  main  &#39;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#39;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     #                  &#39;$status $body_bytes_sent &quot;$http_referer&quot; &#39;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     #                  &#39;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#39;;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     #access_log  logs/access.log  main;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     #access_log  &quot;pipe:rollback logs/access_log interval=1d baknum=7 maxsize=2G&quot;  main;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     sendfile        on</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     #tcp_nopush     on;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     #keepalive_timeout  0;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     keepalive_timeout  65</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     #gzip  on;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     #server {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     #    listen       80;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     #    server_name  localhost;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">         #charset koi8-r;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">         #access_log  logs/host.access.log  main;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">         #access_log  &quot;pipe:rollback logs/host.access_log interval=1d baknum=7 maxsize=2G&quot;  main;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     #    location / {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     #        root   html;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     #        index  index.html index.htm;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     #    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">         #error_page  404              /404.html;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">         # redirect server error pages to the static page /50x.html</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">         #</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">         # error_page   500 502 503 504  /50x.html;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">         # location = /50x.html {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">         #     root   html;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">         # }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">         # proxy the PHP scripts to Apache listening on 127.0.0.1:80</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">         #</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">         #location ~ \\.php$ {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">         #    proxy_pass   http://127.0.0.1;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">         #}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">         # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">         #</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">         #location ~ \\.php$ {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">         #    root           html;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">         #    fastcgi_pass   127.0.0.1:9000;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">         #    fastcgi_index  index.php;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">         #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">         #    include        fastcgi_params;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">         #}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">         # pass the Dubbo rpc to Dubbo provider server listening on 127.0.0.1:20880</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">         #</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">         #location /dubbo {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">         #    dubbo_pass_all_headers on;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">         #    dubbo_pass_set args $args;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">         #    dubbo_pass_set uri $uri;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">         #    dubbo_pass_set method $request_method;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">         #</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">         #    dubbo_pass org.apache.dubbo.samples.tengine.DemoService 0.0.0 tengineDubbo dubbo_backend;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">         #}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">         # deny access to .htaccess files, if Apache&#39;s document root</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">         # concurs with nginx&#39;s one</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">         #</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">         #location ~ /\\.ht {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">         #    deny  all;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">         #}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     # }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     # upstream for Dubbo rpc to Dubbo provider server listening on 127.0.0.1:20880</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     #</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     #upstream dubbo_backend {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     #    multi 1;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     #    server 127.0.0.1:20880;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     #}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     # another virtual host using mix of IP-, name-, and port-based configuration</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     #</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     #server {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     #    listen       8000;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     #    listen       somename:8080;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     #    server_name  somename  alias  another.alias;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     #    location / {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     #        root   html;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     #        index  index.html index.htm;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     #    }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     #}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     upstream tomcatHealth {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">         server localhost:8080</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     upstream tomcatOjFront {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">         server localhost:8081</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     upstream tomcatOjBack {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">         server localhost:8082</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     # HTTPS server 1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     server {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">         listen       443 ssl</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">         server_name  health.ahza.xin</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">         ssl_certificate      cert/3030836_health.ahza.xin.pem</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">         ssl_certificate_key  cert/3030836_health.ahza.xin.key</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">         ssl_session_cache    shared:SSL:1m</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">         ssl_session_timeout  5m</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">         ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">         ssl_protocols TLSv1 TLSv1.1 TLSv1.2</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">         ssl_prefer_server_ciphers  on</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">         location / {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">             root   html</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">             index  index.html index.htm</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">             proxy_pass http://tomcatHealth</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">         }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     server {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">         listen 80</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">         server_name health.ahza.xin</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">         return 301 https://health.ahza.xin$request_uri</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     # HTTPS server 2</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     server {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">         listen       443 ssl</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">         server_name  oj.front.ahza.xin</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">         ssl_certificate      cert/3030823_oj.front.ahza.xin.pem</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">         ssl_certificate_key  cert/3030823_oj.front.ahza.xin.key</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">         ssl_session_cache    shared:SSL:1m</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">         ssl_session_timeout  5m</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">         ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">         ssl_protocols TLSv1 TLSv1.1 TLSv1.2</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">         ssl_prefer_server_ciphers  on</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">         location / {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">             root   html</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">             index  login.html index.html index.htm</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">             proxy_pass http://tomcatOjFront</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">         }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     server {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">         listen 80</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">         server_name oj.front.ahza.xin</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">         return 301 https://oj.front.ahza.xin$request_uri</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     # HTTPS server 3</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     server {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">         listen       443 ssl</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">         server_name  oj.back.ahza.xin</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">         ssl_certificate      cert/3030837_oj.back.ahza.xin.pem</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">         ssl_certificate_key  cert/3030837_oj.back.ahza.xin.key</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">         ssl_session_cache    shared:SSL:1m</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">         ssl_session_timeout  5m</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">         ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">         ssl_protocols TLSv1 TLSv1.1 TLSv1.2</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">         ssl_prefer_server_ciphers  on</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">         location / {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">             root   html</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">             index  login.html index.html index.htm</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">             proxy_pass http://tomcatOjBack</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">         }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     server {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">         listen 80</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">         server_name oj.back.ahza.xin</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">         return 301 https://oj.back.ahza.xin$request_uri</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span></code></pre></div><p>使用命令测试配置是否正确：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">nginx</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -t</span></span></code></pre></div><p>如提示错误查阅相关文档解决。</p><div class="warning custom-block"><p class="custom-block-title">提示</p><p>这里配置的所有域名均需要经过 ICP 域名信息备案，否则可能会被服务器提供商禁止访问。</p></div></li></ol><h3 id="启动项目以测试" tabindex="-1">启动项目以测试 <a class="header-anchor" href="#启动项目以测试" aria-label="Permalink to &quot;启动项目以测试&quot;">​</a></h3><ol><li><p>启动 Tengine<br> 使用命令：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">systemctl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> start</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> nginx.service</span></span></code></pre></div></li><li><p>启动 Tomcat<br> 分别进入每一个 Tomcat 文件夹中，访问 <code>bin/</code> 文件夹，并使用命令启动 Tomcat：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./startup.sh</span></span></code></pre></div><p>访问 <code>logs/</code> 文件夹，使用命令观察启动情况：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">tail</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> catalina.out</span></span></code></pre></div><p>出现问题时，请查阅相关文档解决。</p></li></ol><h2 id="你可能会遇到的问题" tabindex="-1">你可能会遇到的问题 <a class="header-anchor" href="#你可能会遇到的问题" aria-label="Permalink to &quot;你可能会遇到的问题&quot;">​</a></h2><ol><li><p>Q：项目正常运行几天后再访问报 502 Bad Gateway 错误怎么办？<br> A：明确报错项目，命令访问到它所在的 Tomcat 并尝试重新启动它。</p></li><li><p>Q：为什么本地端 IDE 测试项目可以正确运行，服务器启动 Tomcat 后报错。错误内容以 <code>Error creating bean with name &#39;entityManagerFactory&#39; defined in class path resource [org/springframework/boot/autoconfigure/orm/jpa/HibernateJpaConfiguration.class]...</code> 起头，包括 <code>Caused by: java.lang.NullPointerException: null</code> ？<br> A：低版本的 javassist 库引起了这个问题，尝试修改 pom 文件以更新依赖来解决。如：</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">parent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">groupId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;org.springframework.boot&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">groupId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">artifactId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;spring-boot-starter-parent&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">artifactId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line highlighted"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">version</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;2.1.0.RELEASE&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">version</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">relativePath</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/&gt; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">&lt;!-- lookup parent from repository --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">parent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div></li></ol><h2 id="参考文献或资料" tabindex="-1">参考文献或资料 <a class="header-anchor" href="#参考文献或资料" aria-label="Permalink to &quot;参考文献或资料&quot;">​</a></h2><p>[1] vim. <a href="https://github.com/vim/vim" target="_blank" rel="noreferrer">GitHub - vim/vim: The official Vim repository</a><br> [2] Vultr. <a href="https://www.vultr.com/docs/how-do-i-generate-ssh-keys" target="_blank" rel="noreferrer">How Do I Generate SSH Keys?</a><br> [3] Vultr. <a href="https://www.vultr.com/docs/deploy-a-new-server-with-an-ssh-key" target="_blank" rel="noreferrer">Deploy a New Server with an SSH Key</a><br> [4] Vultr. <a href="https://www.vultr.com/docs/how-to-add-and-delete-ssh-keys" target="_blank" rel="noreferrer">How to Add and Delete SSH Keys</a><br> [5] 阿里云. <a href="https://help.aliyun.com/document_detail/51793.html" target="_blank" rel="noreferrer">创建SSH密钥对</a><br> [6] 阿里云. <a href="https://help.aliyun.com/document_detail/51796.html" target="_blank" rel="noreferrer">绑定SSH密钥对</a><br> [7] 阿里云. <a href="https://help.aliyun.com/document_detail/51798.html" target="_blank" rel="noreferrer">使用SSH密钥对连接Linux实例</a><br> [8] 明济安. <a href="https://www.cnblogs.com/mingjian/p/5230387.html" target="_blank" rel="noreferrer">linux设置虚拟内存（swap）解决mysql因内存不足挂掉的故障</a><br> [9] 乾乾君子. <a href="https://blog.csdn.net/sirchenhua/article/details/87861709" target="_blank" rel="noreferrer">Linux SWAP交换分区应该设置多大？</a><br> [10] 悠悠i. <a href="https://www.cnblogs.com/youyoui/p/10680329.html" target="_blank" rel="noreferrer">Linux环境变量配置全攻略</a><br> [11] taodanc. <a href="https://blog.csdn.net/duan9015/article/details/103332154" target="_blank" rel="noreferrer">Linux下配置JDK11环境变量</a><br> [12] 菩提尘. <a href="https://www.cnblogs.com/kevin1990/p/8641315.html" target="_blank" rel="noreferrer">Linux 环境下/etc/profile和/etc/profile.d 的区别</a><br> [13] 老蒋. <a href="https://www.itbulu.com/centos7-firewalld.html" target="_blank" rel="noreferrer">CentOS7安装firewalld防火墙添加放行端口简单演示过程</a><br> [14] Oracle. <a href="https://dev.mysql.com/doc/mysql-yum-repo-quick-guide/en/" target="_blank" rel="noreferrer">A Quick Guide to Using the MySQL Yum Repository</a><br> [15] 24只羊. <a href="https://blog.csdn.net/qq_36582604/article/details/80526287" target="_blank" rel="noreferrer">CentOS7安装MySQL（完整版）</a><br> [16] 王晨_icat. <a href="https://www.jianshu.com/p/79ae3a922954" target="_blank" rel="noreferrer">MySQL server version for the right syntax to use near &#39;identified by &quot;******&quot; with grant option&#39; ...</a><br> [17] Alibaba Group. <a href="http://tengine.taobao.org/document_cn/install_cn.html" target="_blank" rel="noreferrer">简单例子-The Tengine Web Server</a><br> [18] 随风ˇ止步. <a href="https://www.cnblogs.com/zhoudemo/p/9043585.html" target="_blank" rel="noreferrer">Tengine安装</a><br> [19] 阿里云. <a href="https://help.aliyun.com/document_detail/98728.html" target="_blank" rel="noreferrer">在Nginx或Tengine服务器上安装证书</a><br> [20] 亡朝歌. <a href="https://blog.csdn.net/baidu_34861695/article/details/97787413" target="_blank" rel="noreferrer">【新手向】Nginx+Tomcat+SSL 实现多项目http和https混用</a><br> [21] ye976142425. <a href="https://blog.csdn.net/ye976142425/article/details/81409310" target="_blank" rel="noreferrer">nginx代理俩个不相干的tomcat,并且俩配置https,亲测。</a><br> [22] IPI715718. <a href="https://blog.csdn.net/IPI715718/article/details/83549506" target="_blank" rel="noreferrer">nginx 启动报错“var/run/nginx/nginx.pid&quot; no such file or directory解决方法</a><br> [23] 温故而知新666. <a href="https://blog.csdn.net/nimasike/article/details/51889171?utm_medium=distribute.pc_aggpage_search_result.none-task-blog-2~all~baidu_landing_v2~default-1-51889171.nonecase&amp;utm_term=tengine%E5%8A%A0%E5%85%A5%E7%B3%BB%E7%BB%9F%E6%9C%8D%E5%8A%A1%E5%BC%80%E6%9C%BA%E5%90%AF%E5%8A%A8" target="_blank" rel="noreferrer">CentOs7 安装Tengine 并设置成系统服务，开机自动启动。</a><br> [24] 西邮陈冠希. <a href="https://blog.csdn.net/weixin_38214171/article/details/85333852" target="_blank" rel="noreferrer">nginx配置tomcat反向代理出现 java.lang.IllegalArgumentException: The character [_] is never valid in a domai</a><br> [25] Maxwell1987. <a href="https://my.oschina.net/u/1762727/blog/2877884" target="_blank" rel="noreferrer">[每日短篇] 12 - Spring Boot + JPA 因为 javassist 包出现 NullPointerException 问题的解决</a></p>`,49)]))}const y=i(p,[["render",h]]);export{E as __pageData,y as default};
