import{_ as d,C as n,c as p,o,ag as t,j as i,a,G as l}from"./chunks/framework.DPDPlp3K.js";const h="/img/String_01.jpg",c="/img/String_02.jpg",r="/img/String_03.jpg",k="/img/String_04.jpg",g="/img/String_05.jpg",E="/img/String_06.jpg",u="/img/String_07.jpg",b="/img/String_08.jpg",D=JSON.parse('{"title":"API-语言基础类库 (Package java.lang)","description":"","frontmatter":{"prev":{"text":"API-介绍","link":"java/API-introduction"},"next":{"text":"API-语言基础类库2","link":"java/API-lang2"}},"headers":[],"relativePath":"java/API-lang.md","filePath":"java/API-lang.md"}'),y={name:"java/API-lang.md"},F={class:"tip custom-block"},v={id:"_4-6-3-自动装箱",tabindex:"-1"},m={id:"_4-6-4-自动拆箱",tabindex:"-1"};function C(q,s,A,S,_,B){const e=n("Badge");return o(),p("div",null,[s[18]||(s[18]=t('<h1 id="api-语言基础类库-package-java-lang" tabindex="-1">API-语言基础类库 (Package <code>java.lang</code>) <a class="header-anchor" href="#api-语言基础类库-package-java-lang" aria-label="Permalink to &quot;API-语言基础类库 (Package `java.lang`)&quot;">​</a></h1><h2 id="_4-1-object类" tabindex="-1">4.1 <code>Object</code>类 <a class="header-anchor" href="#_4-1-object类" aria-label="Permalink to &quot;4.1 `Object`类&quot;">​</a></h2><h3 id="_4-1-1-基本信息" tabindex="-1">4.1.1 基本信息 <a class="header-anchor" href="#_4-1-1-基本信息" aria-label="Permalink to &quot;4.1.1 基本信息&quot;">​</a></h3><p><strong>Package</strong> java.lang<br><code>public class Object</code></p><ul><li><p><code>Object</code>类是所有类的父类。在 Java 中处于顶级父类的地位，是类层级结构的根类。</p></li><li><p>任何类对象都可以用<code>Object</code>类的对象来接收。</p></li></ul><h3 id="_4-1-2-重要方法" tabindex="-1">4.1.2 重要方法 <a class="header-anchor" href="#_4-1-2-重要方法" aria-label="Permalink to &quot;4.1.2 重要方法&quot;">​</a></h3><ol><li><p><code>clone()</code></p><ul><li><p>克隆一个对象。</p></li><li><p>当一个对象要被克隆时，<strong>它所对应的类必须实现<code>Cloneable</code>接口</strong>。</p></li><li><p>克隆完成后会产生一个新的对象。<strong>新对象和原对象的地址不同，但属性值相同</strong>。</p></li><li><p><code>Cloneable</code>接口<br> 其中没有任何属性和方法，仅用于标识此类产生的对象可以被克隆。</p></li></ul></li><li><p><code>finalize()</code></p><ul><li><p>通知<code>GC</code>回收当前对象。</p></li><li><p>即使<code>GC</code>已经开始运行，也只回收当前对象而不回收其他对象。</p></li><li><p><span style="color:#3eaf7c;">* <code>System.gc()</code>通知<code>GC</code>回收所有可以回收的对象。→<a href="#_4-2-2-system类"><code>System</code>类</a></span></p></li></ul></li><li><p><code>getClass()</code><br> 获取对象的运行时类对象（如，后续可用于反射）。</p></li><li><p><code>hashCode()</code><br> 获取该对象的哈希码值，在一定范围内可以认为是唯一的。哈希码为一串 32 位的二进制数据。</p></li><li><p><code>toString()</code><br> 打印对象。实际调用对象本身的<code>toString()</code>。</p></li><li><p><code>equals(Object obj)</code><br> 比较两个对象是否相等。默认比较对象的地址，但对于<code>File</code>，<code>String</code>，<code>Date</code>和包装类来说，它们比较地是对象值。</p><div class="tip custom-block"><p class="custom-block-title">重写 <code>equals()</code></p><p>当手动重写<code>equals()</code>时，思路为:</p><ol><li><p>判断地址是否一致(<code>if (this == obj)</code>)</p></li><li><p>判断参数是否为空(<code>if (obj == null)</code>)</p></li><li><p>判断类型是否一致(<code>if (this.getClass() != obj.getClass())</code>)</p></li><li><p>判断属性值是否一致</p></li></ol></div></li></ol><div class="tip custom-block"><p class="custom-block-title"><code>hashCode()</code> 与 <code>euqals()</code></p><ul><li>如果两个对象相等，则 hashcode 一定也是相同的</li><li>两个对象相等，对两个 <code>equals()</code> 方法返回 <code>true</code></li><li>两个对象有相同的 hashcode 值，它们也不一定是相等的</li></ul><p>综上，如果一个类的 <code>equals()</code> 方法被覆盖过，则 <code>hashCode()</code> 方法也必须被覆盖。</p></div><h2 id="_4-2-system类" tabindex="-1">4.2 <code>System</code>类 <a class="header-anchor" href="#_4-2-system类" aria-label="Permalink to &quot;4.2 `System`类&quot;">​</a></h2><h3 id="_4-2-1-基本信息" tabindex="-1">4.2.1 基本信息 <a class="header-anchor" href="#_4-2-1-基本信息" aria-label="Permalink to &quot;4.2.1 基本信息&quot;">​</a></h3><p><strong>Package</strong> java.lang</p><p><code>public final class System</code></p><ul><li><p><code>System</code>类提供了标准输入输出、错误输入输出和一些访问系统属性的方法。</p></li><li><p>它是一个静态类，不能被继承，不能被实例化，所有方法都是静态方法。</p></li></ul><h3 id="_4-2-2-重要方法" tabindex="-1">4.2.2 重要方法 <a class="header-anchor" href="#_4-2-2-重要方法" aria-label="Permalink to &quot;4.2.2 重要方法&quot;">​</a></h3><ol><li><p><code>static void gc()</code></p><p>强制 Java 虚拟机启动垃圾回收机制，收集内存中所有不再被引用的对象所占用的内存空间。</p></li><li><p><code>static void exit(int status)</code></p><p>强制终止当前正在运行的 Java 虚拟机，并将参数<code>status</code>返回给系统。通常来讲，<code>status</code>为 0 表示正常终止；非 0 表示异常终止。</p></li><li><p><code>static long currentTimeMillis()</code><br> 返回从 1970 年 1 月 1 日到当前系统时间的毫秒数。</p></li></ol><div class="tip custom-block"><p class="custom-block-title">关于<code>System</code>类的属性</p><ul><li><p><code>in</code><br> 从键盘输入信息，只能按字节读取</p></li><li><p><code>out</code><br> 将信息标准输出到显示器（是<code>PrintStream</code>类的对象，声明：<code>static final PrintStream out</code>）</p></li><li><p><code>err</code><br> 将错误提示信息（使用红色字体）输出到显示器（是<code>PrintStream</code>类的对象，声明：<code>static final PrintStream err</code>）</p></li></ul><p>*这三个属性都是字节流，见 <a href="./API-io.html#i-o-stream">I/O Stream</a>.</p></div><h2 id="_4-3-异常" tabindex="-1">4.3 异常 <a class="header-anchor" href="#_4-3-异常" aria-label="Permalink to &quot;4.3 异常&quot;">​</a></h2><p>异常是一套处理和反馈问题的机制。</p><h3 id="_4-3-1-基本信息" tabindex="-1">4.3.1 基本信息 <a class="header-anchor" href="#_4-3-1-基本信息" aria-label="Permalink to &quot;4.3.1 基本信息&quot;">​</a></h3><p><strong>Package</strong> java.lang</p><p><code>public class Throwable</code></p><ul><li><p><code>Throwable</code>类是异常 (Exception) 和错误 (Error) 的父类。</p></li><li><p>错误无法处理，而异常可以处理。</p></li></ul><h3 id="_4-3-2-exception" tabindex="-1">4.3.2 <code>Exception</code> <a class="header-anchor" href="#_4-3-2-exception" aria-label="Permalink to &quot;4.3.2 `Exception`&quot;">​</a></h3><p><strong>分类</strong></p><ul><li><p>编译时异常（或称已检查异常）：编译期出现的异常，要求必须处理，抛出或者捕获。<br> 如：<code>CloneNotSupportedException</code>和<code>ParseException</code></p></li><li><p>运行时异常（或称未检查异常）：编译期不报错，但运行时出现。在编译期处理与否均可，往往非语法错误。<br> 如：<code>ArithmeticException</code>、<code>ArrayIndexOutOfBoundException</code>、<code>NullPointerException</code>、<code>ClassCastException</code>和<code>NumberFormatException</code></p></li><li><p>自定义异常：编程者通过继承某个异常类自己编写的异常。</p></li></ul><div class="tip custom-block"><p class="custom-block-title">关于异常处理</p><ul><li><p>运行时异常可以随意抛出和捕获</p></li><li><p>编译时异常只能在抛出时捕获</p></li></ul></div>',26)),i("div",F,[s[11]||(s[11]=i("p",{class:"custom-block-title"},"关于异常捕获",-1)),i("ul",null,[s[7]||(s[7]=i("li",null,[i("p",null,[a("使用多个"),i("code",null,"catch"),a("来分别捕获不同的异常")])],-1)),s[8]||(s[8]=i("li",null,[i("p",null,"可以捕获一个父类异常，统一处理")],-1)),i("li",null,[i("p",null,[s[0]||(s[0]=a("在一个")),s[1]||(s[1]=i("code",null,"catch",-1)),s[2]||(s[2]=a("语句中，可以使用")),s[3]||(s[3]=i("code",null,"|",-1)),s[4]||(s[4]=a("分割不同的异常来分组处理，避免了写多个")),s[5]||(s[5]=i("code",null,"catch",-1)),s[6]||(s[6]=a("语句")),l(e,{text:"> Java SE 7.0"})])]),s[9]||(s[9]=i("li",null,[i("p",null,"当一个方法声明抛出父类异常时，处理中必须处理父类异常")],-1)),s[10]||(s[10]=i("li",null,[i("p",null,"在捕获异常时，需要先捕获子类异常再捕获父类异常")],-1))])]),s[19]||(s[19]=t(`<div class="tip custom-block"><p class="custom-block-title">关于 finally</p><p>无论是否发生异常都会执行</p></div><h3 id="_4-3-3-error" tabindex="-1">4.3.3 <code>Error</code> <a class="header-anchor" href="#_4-3-3-error" aria-label="Permalink to &quot;4.3.3 \`Error\`&quot;">​</a></h3><p>错误。不应试图捕获的严重问题。无法处理。</p><h2 id="_4-4-枚举" tabindex="-1">4.4 枚举 <a class="header-anchor" href="#_4-4-枚举" aria-label="Permalink to &quot;4.4 枚举&quot;">​</a></h2><h3 id="_4-4-1-基本信息" tabindex="-1">4.4.1 基本信息 <a class="header-anchor" href="#_4-4-1-基本信息" aria-label="Permalink to &quot;4.4.1 基本信息&quot;">​</a></h3><p><strong>Package</strong> java.lang<br><code>public abstract class Enum&lt;E extends Enum&lt;E&gt;&gt;</code></p><ul><li><p>取值固定且能一一列举</p></li><li><p>枚举常量必须定义在首行，用<code>,</code>隔开，以<code>;</code>结尾</p></li><li><p>枚举类中允许定义属性和方法</p></li><li><p>枚举类构造函数默认且只能为私有<br> 可以携带参数，在枚举后添加括号</p></li><li><p>可以定义抽象方法，以匿名内部类的形式实现</p></li><li><p><code>switch(表达式)</code><br> 表达式值新添Enum常量</p></li></ul><h2 id="_4-5-string类" tabindex="-1">4.5 <code>String</code>类 <a class="header-anchor" href="#_4-5-string类" aria-label="Permalink to &quot;4.5 \`String\`类&quot;">​</a></h2><h3 id="_4-5-1-基本信息" tabindex="-1">4.5.1 基本信息 <a class="header-anchor" href="#_4-5-1-基本信息" aria-label="Permalink to &quot;4.5.1 基本信息&quot;">​</a></h3><p><strong>Package</strong> java.lang<br><code>public final class String</code></p><ul><li><p><code>String</code>类是一个最终类，表示字符串。</p></li><li><p>所有字符串都是<code>String</code>类的实例。</p></li><li><p>字符串是常量，创建后不可更改，但可以被共享。</p></li></ul><h3 id="_4-5-2-重要方法" tabindex="-1">4.5.2 重要方法 <a class="header-anchor" href="#_4-5-2-重要方法" aria-label="Permalink to &quot;4.5.2 重要方法&quot;">​</a></h3><ol><li><p><code>char chatAt()</code><br> 获取字符串指定下标字符。</p></li><li><p><code>int length()</code><br> 获取字符串长度。</p></li><li><p><code>char[] toCharArray()</code><br> 将字符串转化为字符数组。</p></li><li><p>其他不改变原串的方法</p><table tabindex="0"><thead><tr><th>方法</th><th>描述</th><th>备注</th></tr></thead><tbody><tr><td><code>int compareTo(String another)</code></td><td>判断两个字符串大小，根据返回值正负来确定</td><td></td></tr><tr><td><code>String concat(String str)</code></td><td>拼接字符串，不该面原字符串</td><td></td></tr><tr><td><code>boolean contains(String str)</code></td><td>是否包含该子串</td><td></td></tr><tr><td><code>boolean equals(Object o)</code></td><td>是否相等</td><td></td></tr><tr><td><code>byte[] getBytes()</code></td><td>将字符串转化为字节数组</td><td>通过<code>String</code>的构造方法将字节数组转化为字符串</td></tr><tr><td><code>int indexOf(int ch, int index)</code></td><td>指定下标开始寻找指定字符第一次出现的位置</td><td></td></tr><tr><td><code>static String valueOf()</code></td><td>将传入值转换为字符串</td><td>传入对象则会调用对象的<code>toString()</code>；<br>传入字符数组对象，则打印其内容</td></tr><tr><td><code>String replaceAll(String reg, String str)</code></td><td>替换指定内容</td><td></td></tr><tr><td><code>boolean matches(String reg)</code></td><td>是否匹配指定规则</td><td></td></tr><tr><td><code>String[] split(String reg)</code></td><td>按指定规则切割字符串</td><td>作为切割的符号会被消除；<br>若两个切割符号相连，则会被分出一个空字符串<code>&quot;&quot;</code></td></tr></tbody></table></li></ol><div class="tip custom-block"><p class="custom-block-title">特别地</p><ul><li><p>拼接字符串可以使用运算符&quot;<code>+</code>&quot;，本质上 Java 编译器会调用<code>StringBuffer</code>（或类似技术）来实现这个拼接操作。</p></li><li><p>拼接多个字符串建议使用<code>StringBuilder</code>类，少量字符串使用<code>+</code>运算符</p></li><li><p><code>StringBuilder</code>和<code>StringBuffer</code>使用方法完全一致</p><ul><li><p><code>StringBuilder</code>线程不安全</p></li><li><p><code>StringBuffer</code>线程安全</p></li></ul></li><li><p>故代码：<br><strong>Input</strong></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">String s </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;a&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">s </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;b&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><p>实际上的执行效果是：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">String s </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;a&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">s </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> StringBuilder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;a&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">append</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;b&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div><p>在最后的<code>toString()</code>中生成了新的字符串对象，类似于（真实过程更加复杂）：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">s </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ab&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div></li></ul><p><strong>分析代码</strong><br><strong>Input</strong></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">String s1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;ab&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">String s2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ab&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">String s4 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;a&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">s4 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;b&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><ol><li><p>第一句</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">String s1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;ab&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><p>内存图：<br><img src="`+h+'" alt="String s1 = &quot;ab&quot;;"></p></li><li><p>第二句</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">String s2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ab&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>内存图：<br><img src="'+c+'" alt="String s2 = new String(&quot;ab&quot;);"></p></li><li><p>第三句</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">String s4 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;a&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><p>内存图：<br><img src="'+r+'" alt="String s4 = &quot;a&quot;;"></p></li><li><p>第四句</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">s4 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;b&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><p>由<code>StringBuilder</code>实现<code>+=</code>操作，具体步骤为：</p><ol><li><p>生成<code>StringBuilder</code>对象</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> StringBuilder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;a&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>内存图：<br><img src="'+k+'" alt="new StringBuilder(&quot;a&quot;)"></p></li><li><p><code>StringBuilder</code>对象取<code>append()</code>方法拼接字符串</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> StringBuilder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;a&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">append</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;b&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>内存图： <img src="'+g+'" alt="new StringBuilder(&quot;a&quot;).append(&quot;b&quot;)"><br> 堆内存<code>0x3f4c</code>断开与常量&quot;a&quot;(<code>0x45fa</code>)的链接，转而链接常量&quot;ab&quot;(<code>0x003d</code>)。</p></li><li><p>调用<code>toString()</code>生成新的<code>String</code>对象</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> StringBuilder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;a&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">append</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;b&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>内存图：<br><img src="'+E+'" alt="new StringBuilder(&quot;a&quot;).append(&quot;b&quot;).toString()"></p></li><li><p>将新生成的<code>String</code>对象的管理权交给<code>s4</code>（赋值）</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">s4 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> StringBuilder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;a&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">append</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;b&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div><p>内存图：<br><img src="'+u+'" alt="s4 = new StringBuilder(&quot;a&quot;).append(&quot;b&quot;).toString();"> 栈内存内<code>s4</code>断开与常量&quot;a&quot;(<code>0x45fa</code>)的链接，转而链接堆内存<code>0x7bce</code>。</p></li><li><p>结束操作，最终结果<br> 内存图：<br><img src="'+b+'" alt="完成"></p></li></ol></li></ol></div><div class="tip custom-block"><p class="custom-block-title">关于编码</p><p>按照某些规律将字符映射成字节。这个记录规则就是编码表</p><table tabindex="0"><thead><tr><th>名称</th><th>内容</th><th>特点</th></tr></thead><tbody><tr><td>ASCII</td><td>0 至 127</td><td>不完全</td></tr><tr><td>西欧码表 ISO-8859-1</td><td>西欧字符</td><td>一个字母占 1 字节</td></tr><tr><td>GB2312</td><td>常见基本简体汉字和部分常用繁体汉字</td><td>一个字符占 2 字节</td></tr><tr><td>UTF-8</td><td>常见语言的常见字符</td><td>一个字符占 3 字节</td></tr></tbody></table></div><p>→ <a href="#scanner类">关于<code>Scanner</code>类</a></p><h3 id="_4-5-3-正则表达式" tabindex="-1">4.5.3 正则表达式 <a class="header-anchor" href="#_4-5-3-正则表达式" aria-label="Permalink to &quot;4.5.3 正则表达式&quot;">​</a></h3><p>正则表达式本质上是<strong>指定匹配</strong>或<strong>筛选规则</strong>的一系列表达式。</p><p><strong>规则</strong></p><ul><li><p>元字符与限定符：正则表达式中含有表达特殊意义的字符，这些字符成为元字符；在正则表达式中，需要表示元字符出现次数等逻辑规则时，使用限定符来表示。</p></li><li><p>在 Java 中，由于使用<code>\\</code>转义且某些元字符中本身包含<code>\\</code>，故在使用时需要写作<code>\\\\</code>。如：表示任意一个数字的正则表达式在 Java 中写作<code>\\\\d</code>。</p></li></ul><table tabindex="0"><thead><tr><th>元字符/限定符</th><th>描述</th></tr></thead><tbody><tr><td><code>.</code></td><td>任意字符</td></tr><tr><td><code>\\d</code></td><td>0至9任意一个数字</td></tr><tr><td><code>\\D</code></td><td>任意一个非数字</td></tr><tr><td><code>\\s</code></td><td>空格类字符，如<code>\\t</code>, <code>\\n</code>, <code>\\x0B</code>, <code>\\f</code>, <code>\\r</code></td></tr><tr><td><code>\\S</code></td><td>任意一个非空格类字符</td></tr><tr><td><code>\\w</code></td><td>除<code>$</code>外的可用于标识符的字符（字母(a-zA-Z)、数字(0-9)、下划线(_)）</td></tr><tr><td><code>\\W</code></td><td>任意一个不能用于标识符的字符</td></tr><tr><td><code>^</code></td><td>串开头</td></tr><tr><td><code>$</code></td><td>串结尾</td></tr><tr><td>`</td><td>`</td></tr><tr><td><code>+</code></td><td>出现1次或多次</td></tr><tr><td><code>?</code></td><td>出现0次或1次</td></tr><tr><td><code>*</code></td><td>出现0次或多次</td></tr><tr><td><code>{n}</code></td><td>出现n次</td></tr><tr><td><code>{n,}</code></td><td>出现至少n次</td></tr><tr><td><code>{n,m}</code></td><td>出现n至m次</td></tr><tr><td><code>()</code></td><td>捕获组</td></tr><tr><td><code>[]</code></td><td>单个字符</td></tr><tr><td><code>\\n</code></td><td>编号为n的捕获组</td></tr></tbody></table><blockquote><p><strong>这里：{n,m|n,m∈N<sub>+</sub>}</strong></p></blockquote><p><strong>捕获组</strong></p><ul><li><p>起编号作用</p></li><li><p>从左括号出现的位置开始计算</p></li></ul><p>例如：<code>(A((BC(D))E))F)</code></p><table tabindex="0"><thead><tr><th>捕获组</th><th>内容</th></tr></thead><tbody><tr><td><code>\\\\1</code></td><td><code>A((BC(D))E)</code></td></tr><tr><td><code>\\\\2</code></td><td><code>(BC(D))E</code></td></tr><tr><td><code>\\\\3</code></td><td><code>BC(D)</code></td></tr><tr><td><code>\\\\4</code></td><td><code>D</code></td></tr><tr><td><code>\\\\5</code></td><td><code>F</code></td></tr></tbody></table><p><strong><code>String</code>类中的使用</strong></p><ul><li><p>使用<code>boolean matches(String regex)</code>来使用正则表达式验证字符串是否符合规则。</p></li><li><p><code>String</code>类还提供了其他的验证规则函数，如：<code>boolean startsWith(String prefix)</code>用来验证是否由某字符串打头。</p></li></ul><blockquote><hr></blockquote><h2 id="_4-6-包装类" tabindex="-1">4.6 包装类 <a class="header-anchor" href="#_4-6-包装类" aria-label="Permalink to &quot;4.6 包装类&quot;">​</a></h2><h3 id="_4-6-1-基本信息" tabindex="-1">4.6.1 基本信息 <a class="header-anchor" href="#_4-6-1-基本信息" aria-label="Permalink to &quot;4.6.1 基本信息&quot;">​</a></h3><p>对于每种基本数据类型, Java 都提供了与其对应的类。这些类称为包装类。</p><table tabindex="0"><thead><tr><th style="text-align:center;">基本数据类型</th><th style="text-align:left;"><code>byte</code></th><th><code>short</code></th><th><code>int</code></th><th><code>long</code></th><th><code>float</code></th><th><code>double</code></th><th><code>char</code></th><th><code>boolean</code></th></tr></thead><tbody><tr><td style="text-align:center;">包装类</td><td style="text-align:left;"><code>Byte</code></td><td><code>Short</code></td><td><code>Integer</code></td><td><code>Long</code></td><td><code>Float</code></td><td><code>Double</code></td><td><code>Character</code></td><td><code>Boolean</code></td></tr></tbody></table><blockquote><p><code>int</code>和<code>char</code>所对应的包装类为单词的全拼。</p></blockquote><h3 id="_4-6-2-装箱" tabindex="-1">4.6.2 装箱 <a class="header-anchor" href="#_4-6-2-装箱" aria-label="Permalink to &quot;4.6.2 装箱&quot;">​</a></h3><p>将<strong>基本数据类型转换为对应的引用数据类型对象</strong>的操作。</p>',36)),i("h3",v,[s[12]||(s[12]=a("4.6.3 自动装箱 ")),l(e,{text:"Java SE 5.0+"}),s[13]||(s[13]=a()),s[14]||(s[14]=i("a",{class:"header-anchor",href:"#_4-6-3-自动装箱","aria-label":'Permalink to "4.6.3 自动装箱 <Badge text="Java SE 5.0+"/>"'},"​",-1))]),s[20]||(s[20]=t('<p>将一个<strong>基本数据类型变量直接赋值给对应的引用数据类型对象</strong>。本质上调用了对应的<code>valueOf()</code>。</p><p>例如：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Integer integer </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><p>相当于：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Integer integer </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Integer.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">valueOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><div class="warning custom-block"><p class="custom-block-title">注意</p><p>所有相同类型地包装类对象之间值的比较，应当全部使用equals()。</p><p>在值范围在 -128 到 127内的赋值，Integer对象会在IntegerCache.cache中产生，会服用已有对象。此时使用==比较是安全的。<br> 但在范围之外的所有数据会在堆中产生，不会复用已有对象。<br> 故推荐全部使用equals()来规避风险。</p></div>',6)),i("h3",m,[s[15]||(s[15]=a("4.6.4 自动拆箱 ")),l(e,{text:"Java SE 5.0+"}),s[16]||(s[16]=a()),s[17]||(s[17]=i("a",{class:"header-anchor",href:"#_4-6-4-自动拆箱","aria-label":'Permalink to "4.6.4 自动拆箱 <Badge text="Java SE 5.0+"/>"'},"​",-1))]),s[21]||(s[21]=t(`<p>将一个引用数据类型对象直接赋值给对应基本数据类型变量。本质上调用了对象的<code>xxxValue()</code>。</p><p>例如：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> integer;</span></span></code></pre></div><p>相当于：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> integer.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">intValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div><p>当发生基本数据类型和包装类运算时，会发生自动拆箱。</p><div class="tip custom-block"><p class="custom-block-title">关于哈希码</p><ul><li><p>整数的哈希码是其本身，但小数的哈希码需要经过计算才能得到。</p></li><li><p>字符的哈希码是其对应的编码。</p></li><li><p>布尔类型的哈希码为特殊值，如<code>true</code>的哈希码为<code>1231</code>；<code>false</code>为<code>1237</code>。</p></li><li><p>八种基本数据类型的哈希码都为固定值。</p></li></ul></div><h2 id="_4-7-math类" tabindex="-1">4.7 <code>Math</code>类 <a class="header-anchor" href="#_4-7-math类" aria-label="Permalink to &quot;4.7 \`Math\`类&quot;">​</a></h2><h3 id="_4-7-1-基本信息" tabindex="-1">4.7.1 基本信息 <a class="header-anchor" href="#_4-7-1-基本信息" aria-label="Permalink to &quot;4.7.1 基本信息&quot;">​</a></h3><p><strong>Package</strong> java.lang<br><code>public final class Math</code></p><p><code>Math</code>类是一个最终类，其构造函数是私有的。</p><p>该类提供了一系列静态方法，这些方法实现了基本的数学运算，如三角函数、绝对值、平方根等。</p><h3 id="_4-7-2-重要方法" tabindex="-1">4.7.2 重要方法 <a class="header-anchor" href="#_4-7-2-重要方法" aria-label="Permalink to &quot;4.7.2 重要方法&quot;">​</a></h3><ol><li><p><code>static double ceil(double a)</code><br> 向上取整</p></li><li><p><code>static double floor(double a)</code><br> 向下取整</p></li><li><p><code>static long round(double a)</code>/<code>static int round(float a)</code><br> 四舍五入</p></li><li><p><code>static double sqrt(double a)</code><br> 求平方根</p></li><li><p><code>static double pow(double a, double b)</code><br> 求幂 (a<sup>b</sup>)</p></li><li><p><code>static double random()</code><br> 返回一个随机数 (0.0≤x&lt;1.0)</p></li></ol><h3 id="_4-7-3-strictfp关键字" tabindex="-1">4.7.3 <code>strictfp</code>关键字 <a class="header-anchor" href="#_4-7-3-strictfp关键字" aria-label="Permalink to &quot;4.7.3 \`strictfp\`关键字&quot;">​</a></h3><p>精确浮点(strict float point)，用于修饰类、接口和方法。</p><p>被修饰的代码在执行中以80位二进制数来运算小数，结果会保留为64位。</p><div class="tip custom-block"><p class="custom-block-title">特别的</p><p>当适用精确运算时，Java 提供了<code>BigDecimal</code>类。</p><p>这个类中对基础运算（如加、减、乘、除）提供了方法支持，故，不能使用运算符（如<code>+</code>、<code>-</code>、<code>*</code>、<code>/</code>）来进行运算。</p></div><h2 id="_4-8-反射" tabindex="-1">4.8 反射 <a class="header-anchor" href="#_4-8-反射" aria-label="Permalink to &quot;4.8 反射&quot;">​</a></h2><h3 id="_4-8-1-基本信息" tabindex="-1">4.8.1 基本信息 <a class="header-anchor" href="#_4-8-1-基本信息" aria-label="Permalink to &quot;4.8.1 基本信息&quot;">​</a></h3><p><strong>Package</strong> java.lang<br><code>public final class Class&lt;T&gt;</code></p><p><strong>Package</strong> java.lang.reflect</p><p>Java 提供了反射机制，使用该机制可以动态操作 Java 代码（例如程序经过编译后的变动），也可以利用其来分析类的具体能力。它也体现了高内聚低耦合的设计思想。</p><h3 id="_4-8-2-class类" tabindex="-1">4.8.2 <code>Class</code>类 <a class="header-anchor" href="#_4-8-2-class类" aria-label="Permalink to &quot;4.8.2 \`Class\`类&quot;">​</a></h3><p><code>Class</code> 类的实例代表运行中的 Java 应用程序中的类和接口。枚举是类的一种，注解是接口的一种。<br> 每个数组也都属于一个类，该类反映为一个 <code>Class</code> 对象，该对象被所有具有相同元素类型和维数的数组共享。<br> Java 的原始类型（布尔、字节、<code>char</code>、<code>short</code>、<code>int</code>、<code>long</code>、<code>float</code> 和 <code>double</code>）以及关键字 <code>void</code> 也被表示为 <code>Class</code> 对象。（即存在 <code>int.class</code>, <code>void.class</code> 等 <code>Class</code> 对象）。<br><code>Class</code> 没有公共构造函数。相反，<code>Class</code> 对象是由 Java 虚拟机在加载类时自动构建的，并通过调用类加载器中的 <code>defineClass()</code> 方法来构建。</p><p><strong>获取 Class 对象</strong><br> 通过获取具体类的 Class 对象（某些地方也称为字节码对象），我们可以利用它们获取该类的类信息。获取方法：</p><ol><li><p><code>对象.getClass()</code><br> 通过某类的具体实例来获取该类的 <code>Class</code> 对象。调用了 <a href="#object类">Object 类</a>中的方法来实现。</p></li><li><p><code>类名.class</code><br> 每个类都有一个隐含的静态属性 <code>class</code>, 通过类名直接获取该属性来获取到 <code>Class</code> 对象。</p></li><li><p><code>Class.forName(&quot;类全路径&quot;)</code><br><code>Class</code> 类的静态方法，获取 <code>Class</code> 对象。<br> 它是一种动态加载类的方法，这样的加载方式不在程序编译期完成，而是在运行时再动态加载。<br> 例如：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        Admin admin </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Admin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        admin.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">login</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        User user </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> User</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        user.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">login</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>这样的主函数经过编译后，编译器无法找到类 <code>Admin</code> 和 <code>User</code> 以及它们所对应的 <code>login()</code> 而报错。这样的类加载形式是静态加载。</p><p>进行改造：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 统一的人员接口</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Person</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> login</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 具体实现</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Admin</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> implements</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Person</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Override</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> login</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Admin login.&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> User</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> implements</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Person</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Override</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> login</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;User login.&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 主函数</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 通过传入参数动态加载类</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        Class personClass </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Class.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">forName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(args[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 创建实例</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        Person person </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (Person) personClass.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">newInstance</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        person.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">login</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>通过这样的改造，主函数不必在编译时期就指定具体的 <code>Admin</code> 或者 <code>User</code> 类，即使它们暂时不存在也不影响主函数编译失败。在程序运行时，给程序传入具体要加载的类动态加载并调用其 <code>login()</code> 来完成整个功能。</p></li></ol><p><strong>获取构造函数</strong></p><ol><li><code>class对象.getConstructor(构造函数参数类型class对象)</code><br> 返回指定参数类型的公共构造函数。<br> 例如：<div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Person</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 属性</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 有参构造方法</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Person</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(String </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> age</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.age </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> age;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// main 函数中，获取到 class 对象 cl 后</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 获取有参构造函数(传入构造方法需要的 String 和 int 类型的 class 对象)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Constructor con </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cl.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getConstructor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(String.class, int.class);</span></span></code></pre></div></li><li><code>class对象.getConstructors()</code><br> 获取所有公共构造函数。</li><li><code>class对象.getDeclaredConstractors(构造函数参数类型字class对象)</code><br> 返回指定参数类型的全部构造函数（包括 <code>public</code> <code>private</code> 等）。</li></ol><p><strong>获取实例对象</strong><br><code>class对象.newInstance()</code> 要求存在无参数构造函数</p><p><strong>获取类属性</strong></p><ol><li><code>class对象.getFields(&quot;属性名&quot;)</code><br> 获取所有公有属性</li><li><code>class对象.getDeclaredFields(&quot;属性名&quot;)</code><br> 获取所有属性</li></ol><p><strong>获取方法对象</strong></p><ol><li><code>class对象.getMethod(&quot;方法名&quot;, 方法对应参数的class对象)</code><br> 获取公有方法</li><li><code>class对象.getDeclaredMethod(&quot;方法名&quot;, 方法对应参数的class对象)</code></li></ol><p><strong>获取所实现的接口</strong><br><code>class对象.getInterfaces()</code></p><p><strong>其他常用方法</strong></p><table tabindex="0"><thead><tr><th>名称</th><th>作用</th></tr></thead><tbody><tr><td><code>class对象.getName()</code></td><td>获取类全路径名</td></tr><tr><td><code>class对象.getPackage()</code></td><td>获取类所在包</td></tr><tr><td><code>class对象.getSimpleName()</code></td><td>获取当前类名</td></tr><tr><td><code>class对象.getSuperclass()</code></td><td>获取父类名</td></tr><tr><td><code>class对象.isAnonymousClass()</code></td><td>是否是匿名内部类</td></tr><tr><td><code>class对象.isLocalClass()</code></td><td>是否是方法内部类</td></tr><tr><td><code>class对象.isPrimitive()</code></td><td>是否是基本类型</td></tr><tr><td><code>class对象.isArray()</code></td><td>是否是数组</td></tr><tr><td><code>class对象.isEnum()</code></td><td>是否是枚举</td></tr><tr><td><code>class对象.isInstance(指定对象)</code></td><td>判断指定对象是否是该类的实现</td></tr><tr><td><code>class对象.isInterface()</code></td><td>是否是接口</td></tr><tr><td><code>class对象.isAssignableFrom(目标类型)</code></td><td>判断目标类型是否是当前类的本身或子类</td></tr></tbody></table><div class="tip custom-block"><p class="custom-block-title"><code>Object</code> 与 <code>Class</code></p><ul><li><code>Object</code> 是顶级父类，<code>Class</code> 也继承自 <code>Object</code>.</li><li><code>Class</code> 类用于反射，它表示了 Class 这样的一种类，可以利用它来进一步获取关于类的各种信息。</li><li><code>Class</code> 类的实例表示了当前运行着的 Java 程序的类，每一个类都会在运行时自动创建出它对应的 <code>Class</code> 类实例。</li><li><code>Class</code> 类的构造函数私有，只能通过 JVM 来访问。所以无法手动创建 <code>Class</code> 类的实例。</li></ul></div><h3 id="_4-8-3-constructor类" tabindex="-1">4.8.3 <code>Constructor</code>类 <a class="header-anchor" href="#_4-8-3-constructor类" aria-label="Permalink to &quot;4.8.3 \`Constructor\`类&quot;">​</a></h3><p>描述构造方法的类。</p><p><strong>获取实例对象</strong><br><code>constructor对象.newInstance()</code></p><p><strong>获取构造方法返回值类型</strong><br><code>constructor对象.getType()</code> 返回值是 <code>Class</code> 类型变量</p><p><strong>获取构造方法参数列表</strong><br><code>constructor对象.getParameterTypes()</code></p><h3 id="_4-8-4-field类" tabindex="-1">4.8.4 <code>Field</code>类 <a class="header-anchor" href="#_4-8-4-field类" aria-label="Permalink to &quot;4.8.4 \`Field\`类&quot;">​</a></h3><p>描述属性的类。</p><p><strong>获取指定对象的属性值</strong><br><code>field对象.get(指定对象)</code> 可能需要使用 <code>.setAccessible(true)</code> 来暴力破解访问权限限制。</p><p><strong>设置指定对象的属性值</strong><br><code>field对象.set(指定对象)</code></p><p><strong>获取属性声明类型</strong><br><code>field对象.getType()</code> 返回值是 <code>Class</code> 类型变量</p><p><strong>获取属性名称</strong><br><code>field对象.getName()</code></p><h3 id="_4-8-5-method类" tabindex="-1">4.8.5 <code>Method</code>类 <a class="header-anchor" href="#_4-8-5-method类" aria-label="Permalink to &quot;4.8.5 \`Method\`类&quot;">​</a></h3><p>描述方法的类。</p><p><strong>执行方法</strong><br><code>method对象.invoke(作用对象, 参数)</code><br> 如果方法有返回值类型则返回该类型变量，若方法无返回则返回 <code>null</code></p><p><strong>破解权限</strong><br><code>method对象.setAccessible(true)</code> 允许在类外执行，一般配合执行方法一起使用。</p><p><strong>获取方法返回值类型</strong><br><code>method对象.getReturnType()</code></p><p><strong>获取方法参数列表</strong><br><code>method对象.getParameterTypes()</code></p><p><strong>获取抛出异常</strong><br><code>method对象.getExceptionTypes()</code></p><p><strong>判断是否含有可变参数</strong><br><code>method对象.inVarArgs()</code></p>`,57))])}const f=d(y,[["render",C]]);export{D as __pageData,f as default};
