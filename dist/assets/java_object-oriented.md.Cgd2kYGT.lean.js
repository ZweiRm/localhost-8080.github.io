import{_ as t,C as p,c as k,o as e,ag as h,j as i,a,G as l}from"./chunks/framework.DPDPlp3K.js";const E="/img/%E5%8D%95%E7%BB%A7%E6%89%BF.jpg",d="/img/%E5%A4%9A%E7%BB%A7%E6%89%BF.jpg",r="/img/%E9%97%B4%E6%8E%A5%E7%BB%A7%E6%89%BF.jpg",g="/img/%E9%9D%99%E6%80%81%E5%86%85%E5%AD%98.png",y="/img/%E6%B3%9B%E5%9E%8B%E7%B1%BB%E5%9E%8B%E6%B3%9B%E5%8C%96.png",c="/img/Collection%E7%BB%A7%E6%89%BF%E5%85%B3%E7%B3%BB.png",o="/img/Box%E5%85%AC%E5%85%B1%E7%88%B6%E7%B1%BB.png",F="/img/List%E7%BB%A7%E6%89%BF%E5%85%B3%E7%B3%BB.png",_=JSON.parse('{"title":"面向对象","description":"","frontmatter":{"prev":{"text":"语法","link":"java/grammars"},"next":{"text":"API-介绍","link":"java/API-introduction"}},"headers":[],"relativePath":"java/object-oriented.md","filePath":"java/object-oriented.md"}'),u={name:"java/object-oriented.md"},A={id:"_3-6-模块",tabindex:"-1"},D={id:"_3-12-6-lambda-表达式",tabindex:"-1"},b={class:"tip custom-block"},C={class:"custom-block-title"};function v(B,s,m,x,q,j){const n=p("Badge");return e(),k("div",null,[s[18]||(s[18]=h("",16)),i("p",null,[s[0]||(s[0]=a("也就是说，如果内存中存储的是另一块内存的起始地址（对象引用指向堆内存具体对象）就称为一个引用。")),l(n,{type:"error",text:"Java 1.2-"})]),s[19]||(s[19]=h("",35)),i("h2",A,[s[1]||(s[1]=a("3.6 模块")),l(n,{text:"Java 9.0+"}),s[2]||(s[2]=a()),s[3]||(s[3]=i("a",{class:"header-anchor",href:"#_3-6-模块","aria-label":'Permalink to "3.6 模块<Badge text="Java 9.0+"/>"'},"​",-1))]),s[20]||(s[20]=h("",64)),i("ul",null,[s[9]||(s[9]=i("li",null,[i("p",null,"类似于类的引用类型。")],-1)),s[10]||(s[10]=i("li",null,[i("p",null,[a("使用关键字 "),i("code",null,"interface"),a(" 表示")])],-1)),i("li",null,[i("p",null,[s[4]||(s[4]=a("接口中方法默认且只能为抽象方法。")),l(n,{type:"error",text:"< Java SE 7.0"})]),i("ul",null,[i("li",null,[s[5]||(s[5]=a("在接口中，使用 ")),s[6]||(s[6]=i("code",null,"default",-1)),s[7]||(s[7]=a(" 关键字修饰的方法可以拥有方法体，可以给所有具体实现对象扩展功能。")),l(n,{text:"Java SE 8.0 +"})]),i("li",null,[s[8]||(s[8]=a("接口中也可以存在静态方法，要求该方法拥有方法体。这样的方法可以直接通过接口名打点获取到。")),l(n,{text:"Java SE 8.0 +"})])])]),s[11]||(s[11]=i("li",null,[i("p",null,[a("接口中的数据都为公共的静态常量（被 "),i("code",null,"final"),a(", "),i("code",null,"static"),a(" 和 "),i("code",null,"public"),a(" 修饰的成员变量）")])],-1))]),s[21]||(s[21]=h("",19)),i("h3",D,[s[12]||(s[12]=a("3.12.6 Lambda 表达式 ")),l(n,{text:"Java 8.0+"}),s[13]||(s[13]=a()),s[14]||(s[14]=i("a",{class:"header-anchor",href:"#_3-12-6-lambda-表达式","aria-label":'Permalink to "3.12.6 Lambda 表达式 <Badge text="Java 8.0+"/>"'},"​",-1))]),s[22]||(s[22]=h("",48)),i("div",b,[i("p",C,[s[15]||(s[15]=a("钻石操作符 ")),l(n,{text:"Java 7.0+"}),s[16]||(s[16]=a()),l(n,{text:"Java 9.0+"})]),s[17]||(s[17]=i("p",null,[a("在 Java SE 7.0 之后，当调用泛型类型的构造函数来实例化对象时，可以不在尖括号里写出具体的类型而让编译器自动进行推断。这样的空尖括号 "),i("code",null,"<>"),a(" 称为钻石操作符。在 Java 9 中，它新增了对匿名内部类的支持。"),i("br"),a(" 例如声明并实例化一个可以存放 "),i("code",null,"Integer"),a(" 类型的 Box 写为："),i("br"),i("code",null,"Box<Integer> integerBox = new Box<>();")],-1))]),s[23]||(s[23]=h("",74))])}const P=t(u,[["render",v]]);export{_ as __pageData,P as default};
