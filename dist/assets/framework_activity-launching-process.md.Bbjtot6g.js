import{_ as i,c as a,o as n,ag as t}from"./chunks/framework.DPDPlp3K.js";const c=JSON.parse('{"title":"Activity 启动流程","description":"","frontmatter":{"prev":{"text":"Framework","link":"framework/index"},"next":{"text":"performTraversal","link":"framework/performTraversal"}},"headers":[],"relativePath":"framework/activity-launching-process.md","filePath":"framework/activity-launching-process.md"}'),l={name:"framework/activity-launching-process.md"};function e(h,s,p,k,E,r){return n(),a("div",null,s[0]||(s[0]=[t(`<h1 id="activity-启动流程" tabindex="-1">Activity 启动流程 <a class="header-anchor" href="#activity-启动流程" aria-label="Permalink to &quot;Activity 启动流程&quot;">​</a></h1><h2 id="_1-launcher-发送启动信息" tabindex="-1">1. Launcher 发送启动信息 <a class="header-anchor" href="#_1-launcher-发送启动信息" aria-label="Permalink to &quot;1. Launcher 发送启动信息&quot;">​</a></h2><p>桌面作为 Launcher 进程，在接收到点击应用图标的命令时会调用 Activity 中的 <code>startActivity()</code>.</p><p><strong>Activity.java</strong></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Override</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> startActivity</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Intent intent, @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Nullable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Bundle options) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ...</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (options </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        startActivityForResult</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(intent, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, options);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        startActivityForResult</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(intent, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> startActivityForResult</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">RequiresPermission</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Intent intent, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> requestCode,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Nullable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Bundle options) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Instrumentation.ActivityResult ar </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                mInstrumentation.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">execStartActivity</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">                    this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, mMainThread.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getApplicationThread</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(), mToken, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                    intent, requestCode, options);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>它利用 Activity 类中的 Instrumentation 对象 <code>mInstrumentatio</code>n 的 <code>execStartActivity()</code> 来完成后续流程。其中传入的第二个参数是一个 Binder 对象，ASM 后面利用它来与 APP 通信。</p><p><code>execStartActivity()</code> 最核心的语句是：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ActivityTaskManager.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getService</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">startActivity</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(whoThread,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        who.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getOpPackageName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(), who.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getAttributionTag</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(), intent,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        intent.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">resolveTypeIfNeeded</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(who.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getContentResolver</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()), token,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        target </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> target.mEmbeddedID </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, requestCode, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, options);</span></span></code></pre></div><p>通过 <code>ActivityTaskManager.getService()</code> 来获取到 IActivityTaskManager 这样的 AMS 代理对象，再利用它继续向 AMS请求启动 Activity.</p><h2 id="_2-ams-启动-activity" tabindex="-1">2. AMS 启动 Activity <a class="header-anchor" href="#_2-ams-启动-activity" aria-label="Permalink to &quot;2. AMS 启动 Activity&quot;">​</a></h2><p>在 IActivityTaskManager 对应的服务端实现类 ActivityTaskManager 类中，上一步调用的 <code>startActivity()</code> 执行了 <code>startActivityAsUser()</code>，而这个方法中利用 ActivityStartController 对象调用了 <code>obtainStater()</code>. 它设置了一个启动器，在进行了一些配置后使用 <code>execute()</code> 执行。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getActivityStartController</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">obtainStarter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(intent, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;startActivityAsUser&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setCaller</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(caller)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setCallingPackage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(callingPackage)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setCallingFeatureId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(callingFeatureId)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setResolvedType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(resolvedType)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setResultTo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(resultTo)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setResultWho</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(resultWho)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setRequestCode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(requestCode)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setStartFlags</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(startFlags)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setProfilerInfo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(profilerInfo)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setActivityOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(bOptions)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setUserId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(userId)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">execute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div><p>在 <code>execute()</code> 中，最重要的语句是：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">res </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> executeRequest</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(mRequest);</span></span></code></pre></div><p>它把请求参数传给了 ActivityStarter 类中进行参数检查。之后继续进入启动 Activity 流程：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mLastStartActivityResult </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> startActivityUnchecked</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(r, sourceRecord, voiceSession,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                request.voiceInteractor, startFlags, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> /* doResume */</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, checkedOptions,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                inTask, inTaskFragment, restrictedBgActivity, intentGrants);</span></span></code></pre></div><p>在 <code>startActivityUnchecked()</code> 中，它将启动交给了 <code>startActivityInner()</code> 进行处理。而在 <code>starterActivityInner()</code> 当中对启动准备堆栈，并将参数交给 RootWindowContainer 类的 <code>resumeFocusedStacksTopActivities()</code>. 在这个函数中调用了 Task 类中的 <code>resumeTopActivityUncheckedLocked()</code> 函数。（此处未 Android 12 版本，之前版本会调用 ActivityStack 中的这个方法）Task 类是一个 Activity 界面集合，遵循栈的结构进行组织。</p><p>在该函数中对 Task 进行判断。若是非叶子结点则递归调用直到找到叶子结点并继续流程。之后进行一些列判断，例如查找当前栈帧中最接近栈顶且可显示和可聚焦的 Activity (next)，判断其暂停状态以及所属用户的权限等。之后进入 <code>resumeTopActivityInnerLocked()</code>.</p><p>在该函数中调用 TaskFragment 类中的 <code>retumeTopActivity()</code> 来恢复最顶层的 Activity. 其中：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (mResumedActivity </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            ProtoLog.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">d</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(WM_DEBUG_STATES, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;resumeTopActivity: Pausing %s&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, mResumedActivity);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            pausing </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> startPausing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(mTaskSupervisor.mUserLeaving, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> /* uiSleeping */</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                    next, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;resumeTopActivity&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">...</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (next.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">attachedToProcess</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // Activity 已经附加到进程，恢复页面并更新栈</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // Whoops, need to restart this activity!</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            mTaskSupervisor.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">startSpecificActivity</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(next, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span></code></pre></div><p>先对上一个 Activity 进行 Pause 操作，再继续当前 Activity.</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> startSpecificActivity</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ActivityRecord r, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">boolean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> andResume, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">boolean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> checkConfig) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 获取要启动的Activity进程信息</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    final</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> WindowProcessController wpc </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            mService.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getProcessController</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(r.processName, r.info.applicationInfo.uid);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    boolean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> knownToBeDead </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //如果进程存在且有进程中有线程存在 就是启动一个同应用的Activity（普通Activity就在此执行）</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (wpc </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> wpc.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">hasThread</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        try</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            realStartActivityLocked</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(r, wpc, andResume, checkConfig);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (RemoteException </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">e</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            Slog.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">w</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(TAG, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Exception when starting activity &quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> r.intent.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getComponent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">flattenToShortString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(), e);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // If a dead object exception was thrown -- fall through to</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // restart the application.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    knownToBeDead </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //否则通过AMS向Zygote进程请求创建新的进程</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    r.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">notifyUnknownVisibilityLaunchedForKeyguardTransition</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    final</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> boolean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> isTop </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> andResume </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> r.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isTopRunningActivity</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    mService.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">startProcessAsync</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(r, knownToBeDead, isTop, isTop </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;top-activity&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> :</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;activity&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="_3-启动新进程" tabindex="-1">3. 启动新进程 <a class="header-anchor" href="#_3-启动新进程" aria-label="Permalink to &quot;3. 启动新进程&quot;">​</a></h2><p>Zygote 创建新进程后通过反射机制调用进入 ActivityThread 类。在创建好 Looper 和 ActivityThread 类后，当前应用会被注册到 AMS 中。其逻辑是：在 AMS 绑定 ApplicationThread 时，发送了一个 <code>H.BIND_APPLICATION</code> 的 Message，在 Handler 中处理该消息时调用了 Application 的 <code>onCreate()</code>；在 <code>mAtmInternal</code> 的 <code>attachApplication</code> 层层调用到 <code>ActivityStackSupervisor.realStartActivityLocked()</code>.</p><h3 id="_3-1-启动已存在的-activity-进程" tabindex="-1">3.1 启动已存在的 Activity 进程 <a class="header-anchor" href="#_3-1-启动已存在的-activity-进程" aria-label="Permalink to &quot;3.1 启动已存在的 Activity 进程&quot;">​</a></h3><p>当前面创建并绑定好新进程，或当进程本来就存在时，走 <code>startSpecificActivity()</code> 中的 <code>realStartActivityLocked()</code>. 这个方法负责创建事务并分发给生命周期管理器进行处理。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">boolean</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> realStartActivityLocked</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ActivityRecord r, WindowProcessController proc,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    boolean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> andResume, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">boolean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> checkConfig) throws RemoteException {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Create activity launch transaction.</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    final</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ClientTransaction clientTransaction </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ClientTransaction.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">obtain</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            proc.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getThread</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(), r.appToken);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Set desired final state.</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    final</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ActivityLifecycleItem lifecycleItem;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (andResume) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        lifecycleItem </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ResumeActivityItem.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">obtain</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(isTransitionForward);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        lifecycleItem </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> PauseActivityItem.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">obtain</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    clientTransaction.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setLifecycleStateRequest</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(lifecycleItem);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Schedule transaction.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    mService.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getLifecycleManager</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">scheduleTransaction</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(clientTransaction);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>其中第一步创建需要的事务。第二步设置事务完成后客户端应该处于的最终状态，使用 <code>setLifecycleStateRequest()</code> 来设置，需要传入一个 ActivityLifecycleItem 对象。第三步开始调度事务。具体执行：客户端调用 <code>preExecute()</code>，触发所有需要在真正调度事务前执行完毕的工作；发送事务的 message 信息到客户端；客户端调用 <code>TransactionExecutor.execute()</code>，执行所有回调以及必要的生命周期事务。</p><p><strong>ClientLifecycleManager.java</strong></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> scheduleTransaction</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ClientTransaction transaction) throws RemoteException {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    final</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> IApplicationThread client </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> transaction.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getClient</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    transaction.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">schedule</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(client </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">instanceof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Binder)) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        transaction.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">recycle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><strong>ClientTransaction.java</strong></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> schedule</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() throws RemoteException {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    mClient.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">scheduleTransaction</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><code>mClient</code> 是 IApplicationThread 类型。是 ActivityThread 的代理对象。在其中通过异步的 Handler 分发和调度事件，最终在执行线程(主线程)的 <code>handleMessage()</code> 回调中执行服务端传过来的 Transaction.</p><p>最终 TransactionExecutor 来调用 ActivityThread 中的 <code>performLaunchActivity()</code> 来启动 Activity.<br> 其具体执行：</p><ul><li>创建应用上下文(Context)，获取 ClassLoader；</li><li>创建 Activity 对象，实质上是 classLoader.loadClass(name).newInstance()，这里会对 Activity 类进行初始化，调用对象的 <code>&lt;cinit&gt;</code> 方法，从而执行目标类里 static block 中的代码（通过 Instrumentation 的 newActivity() 方法，以反射形式创建 Activity 实例）;</li><li>根据应用的 AndroidManifest.xml 创建 Application 对象，并调用其 onCreate() 回调；</li><li>初始化 Activity，创建 Window 对象（PhoneWindow）并实现 Activity 和 Window 相关联；</li><li>通过 Instrumentation 调用对应 Activity 的 onCreate() 回调。</li></ul><p>后面即开始 APP 本身的代码。</p><h2 id="参考文献或资料" tabindex="-1">参考文献或资料 <a class="header-anchor" href="#参考文献或资料" aria-label="Permalink to &quot;参考文献或资料&quot;">​</a></h2><ol><li><a href="https://blog.csdn.net/m0_37698652/article/details/121593197#t5" target="_blank" rel="noreferrer">Activity的启动流程详解</a></li><li><a href="https://evilpan.com/2021/12/05/apk-startup/#launch-activity" target="_blank" rel="noreferrer">Android12 应用启动流程分析</a></li><li><a href="https://weiwangqiang.github.io/2021/06/08/start-activity-flow/" target="_blank" rel="noreferrer">framework之Activity启动流程（基于Android11源码）</a></li><li><a href="https://www.jianshu.com/p/d7364591f1d1" target="_blank" rel="noreferrer">Activity的启动流程这一篇够了</a></li><li><a href="https://juejin.cn/post/6847902222294990862" target="_blank" rel="noreferrer">Activity的启动过程详解（基于Android10.0）</a></li><li><a href="https://blog.csdn.net/qq_40587575/article/details/121354976" target="_blank" rel="noreferrer">【安卓 R 源码】Activity 启动流程及其生命周期源码分析</a></li></ol>`,38)]))}const y=i(l,[["render",e]]);export{c as __pageData,y as default};
